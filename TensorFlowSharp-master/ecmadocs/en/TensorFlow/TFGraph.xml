<Type Name="TFGraph" FullName="TensorFlow.TFGraph">
  <TypeSignature Language="C#" Value="public class TFGraph : TensorFlow.TFDisposableThreadSafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TFGraph extends TensorFlow.TFDisposableThreadSafe" />
  <AssemblyInfo>
    <AssemblyName>TensorFlowSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TensorFlow.TFDisposableThreadSafe</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a computation graph.  Graphs may be shared between sessions and are thread safe.
            </summary>
    <remarks>
      <para>
            Graphs consist of operations (represented by TFOperation objects), these can be named, or 
            the runtime will automatically assign a name.
            </para>
      <para>
            For debugging purposes, you might want to group operations together, for this, call the
            WithScope method with your new scope, which will create a new namespace for your object names.
            </para>
      <para>
            For example, if you call WithScope ("demo"), and add an operation named "add" inside the
            scope, the full name of the operation will be "demo/add", if you create a new scope inside, say
            "hot", and add a "sub" operation there the result will be "demo/hot/sub".
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TFGraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:TensorFlow.TFGraph" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Abort (string error_msg = null, Nullable&lt;bool&gt; exit_without_error = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Abort(string error_msg, valuetype System.Nullable`1&lt;bool&gt; exit_without_error, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error_msg" Type="System.String" />
        <Parameter Name="exit_without_error" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error_msg">
              Optional argument
              A string which is the message associated with the exception.
            </param>
        <param name="exit_without_error">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Abort'.
            </param>
        <summary>
              Raise a exception to abort the process when called.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              If exit_without_error is true, the process will exit normally,
              otherwise it will exit with a SIGABORT signal.
              
              Returns nothing but an exception.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Abs (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Abs(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Abs'.
            </param>
        <summary>
              Computes the absolute value of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>x</c>, this operation returns a tensor containing the absolute
              value of each element in <c>x</c>. For example, if x is an input element and y is
              an output element, this operation computes \\(y = |x|\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccumulateNV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AccumulateNV2 (TensorFlow.TFOutput[] inputs, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AccumulateNV2(valuetype TensorFlow.TFOutput[] inputs, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              A list of <c>Tensor</c> objects, each with same shape and type.
            </param>
        <param name="shape">
              Shape of elements of <c>inputs</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AccumulateNV2'.
            </param>
        <summary>
              Returns the element-wise sum of a list of tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>tf.accumulate_n_v2</c> performs the same operation as <c>tf.add_n</c>, but does not
              wait for all of its inputs to be ready before beginning to sum. This can
              save memory if inputs are ready at different times, since minimum temporary
              storage is proportional to the output size rather than the inputs size.
              
              Unlike the original <c>accumulate_n</c>, <c>accumulate_n_v2</c> is differentiable.
              
              Returns a <c>Tensor</c> of same shape and type as the elements of <c>inputs</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccumulatorApplyGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AccumulatorApplyGradient (TensorFlow.TFOutput handle, TensorFlow.TFOutput local_step, TensorFlow.TFOutput gradient, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AccumulatorApplyGradient(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput local_step, valuetype TensorFlow.TFOutput gradient, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="local_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a accumulator.
            </param>
        <param name="local_step">
              The local_step value at which the gradient was computed.
            </param>
        <param name="gradient">
              A tensor of the gradient to be accumulated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AccumulatorApplyGradient'.
            </param>
        <summary>
              Applies a gradient to a given accumulator.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Does not add if local_step is lesser than the accumulator's global_step.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccumulatorNumAccumulated">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AccumulatorNumAccumulated (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AccumulatorNumAccumulated(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to an accumulator.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AccumulatorNumAccumulated'.
            </param>
        <summary>
              Returns the number of gradients aggregated in the given accumulators.
            </summary>
        <returns>
              The number of gradients aggregated in the given accumulator.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccumulatorSetGlobalStep">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AccumulatorSetGlobalStep (TensorFlow.TFOutput handle, TensorFlow.TFOutput new_global_step, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AccumulatorSetGlobalStep(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput new_global_step, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="new_global_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to an accumulator.
            </param>
        <param name="new_global_step">
              The new global_step value to set.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AccumulatorSetGlobalStep'.
            </param>
        <summary>
              Updates the accumulator with a new value for global_step.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Logs warning if the accumulator's value is already higher than
              new_global_step.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccumulatorTakeGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AccumulatorTakeGradient (TensorFlow.TFOutput handle, TensorFlow.TFOutput num_required, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AccumulatorTakeGradient(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput num_required, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_required" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to an accumulator.
            </param>
        <param name="num_required">
              Number of gradients required before we return an aggregate.
            </param>
        <param name="dtype">
              The data type of accumulated gradients. Needs to correspond to the type
              of the accumulator.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AccumulatorTakeGradient'.
            </param>
        <summary>
              Extracts the average gradient in the given ConditionalAccumulator.
            </summary>
        <returns>
              The average of the accumulated gradients.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The op blocks until sufficient (i.e., more than num_required)
              gradients have been accumulated.  If the accumulator has already
              aggregated more than num_required gradients, it returns the average of
              the accumulated gradients.  Also automatically increments the recorded
              global_step in the accumulator by 1, and resets the aggregate to 0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Acos (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Acos(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Acos'.
            </param>
        <summary>
              Computes acos of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Acosh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Acosh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Acosh'.
            </param>
        <summary>
              Computes inverse hyperbolic cosine of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Add (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Add(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Add'.
            </param>
        <summary>
              Returns x + y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Add</c> supports broadcasting. <c>AddN</c> does not. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddGradients">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] AddGradients (TensorFlow.TFOutput[] y, TensorFlow.TFOutput[] x, TensorFlow.TFOutput[] dx = null, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] AddGradients(valuetype TensorFlow.TFOutput[] y, valuetype TensorFlow.TFOutput[] x, valuetype TensorFlow.TFOutput[] dx, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="x" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dx" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="y">The y elements.</param>
        <param name="x">The x elements.</param>
        <param name="dx">Initial gradients, which represent the symbolic partial derivatives of some loss function `L` w.r.t. <paramref name="y" /> ).   
            If the parameter is null, the implementation will use dx for 'OnesLike' for all shapes in <paramref name="y" /></param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Adds a gradient: the operations needed to compute the partial derivatives of sum of <paramref name="y" />` wrt to <paramref name="x" />.
            </summary>
        <returns>The partial derivatives, the size of the array is the same as the length of the <paramref name="y" /> array.</returns>
        <remarks>
            d(y[0] + y[1]+ ...)/dx[0], d(y[0] + y[1] + ...)/dx[1]z...
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddGradients">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] AddGradients (string prefix, TensorFlow.TFOutput[] y, TensorFlow.TFOutput[] x, TensorFlow.TFOutput[] dx = null, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] AddGradients(string prefix, valuetype TensorFlow.TFOutput[] y, valuetype TensorFlow.TFOutput[] x, valuetype TensorFlow.TFOutput[] dx, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="y" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="x" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dx" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="prefix">names the scope into which all gradients operations are being added.  This must be unique within 
            the provided graph otherwise this operation will fail.  If the value is null, the default prefixing behaviour takes
            place, see AddGradients for more details.
            </param>
        <param name="y">The y elements.</param>
        <param name="x">The x elements.</param>
        <param name="dx">Initial gradients, which represent the symbolic partial derivatives of some loss function `L` w.r.t. <paramref name="y" /> ).   
            If the parameter is null, the implementation will use dx for 'OnesLike' for all shapes in <paramref name="y" /></param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Adds a gradient: the operations needed to compute the partial derivatives of sum of <paramref name="y" />` wrt to <paramref name="x" />.
            </summary>
        <returns>The partial derivatives, the size of the array is the same as the length of the <paramref name="y" /> array.</returns>
        <remarks>
            d(y[0] + y[1]+ ...)/dx[0], d(y[0] + y[1] + ...)/dx[1]z...
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInitVariable">
      <MemberSignature Language="C#" Value="public void AddInitVariable (TensorFlow.TFOperation variable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInitVariable(class TensorFlow.TFOperation variable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="TensorFlow.TFOperation" />
      </Parameters>
      <Docs>
        <param name="variable">Variable to register.</param>
        <summary>
            Registers a specified variable as an initialization variable.
            </summary>
        <remarks>
          <para>
            This is a convenience method to track the variables that need to be initialized in the graph,
            you can retrieve the list of all those variables by calling the <see cref="M:TensorFlow.TFGraph.GetGlobalVariablesInitializer" />
            which will return this list and clear the state at that point.
            </para>
          <para>
            You typically use this method from helper methods to register all the variables that you want
            initialized, and a higher level method will retrieve all these variables and initialize them
            at their convenience.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddManySparseToTensorsMap">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AddManySparseToTensorsMap (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AddManySparseToTensorsMap(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The <c>indices</c> of the minibatch <c>SparseTensor</c>.
              <c>sparse_indices[:, 0]</c> must be ordered values in <c>[0, N)</c>.
            </param>
        <param name="sparse_values">
              1-D.  The <c>values</c> of the minibatch <c>SparseTensor</c>.
            </param>
        <param name="sparse_shape">
              1-D.  The <c>shape</c> of the minibatch <c>SparseTensor</c>.
              The minibatch size <c>N == sparse_shape[0]</c>.
            </param>
        <param name="container">
              Optional argument
              The container name for the <c>SparseTensorsMap</c> created by this op.
            </param>
        <param name="shared_name">
              Optional argument
              The shared name for the <c>SparseTensorsMap</c> created by this op.
              If blank, the new Operation's unique name is used.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AddManySparseToTensorsMap'.
            </param>
        <summary>
              Add an <c>N</c>-minibatch <c>SparseTensor</c> to a <c>SparseTensorsMap</c>, return <c>N</c> handles.
            </summary>
        <returns>
              1-D.  The handles of the <c>SparseTensor</c> now stored in the
              <c>SparseTensorsMap</c>.  Shape: <c>[N]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A <c>SparseTensor</c> of rank <c>R</c> is represented by three tensors: <c>sparse_indices</c>,
              <c>sparse_values</c>, and <c>sparse_shape</c>, where
              
               <code>
               sparse_indices.shape[1] == sparse_shape.shape[0] == R
               </code>
              
              An <c>N</c>-minibatch of <c>SparseTensor</c> objects is represented as a <c>SparseTensor</c>
              having a first <c>sparse_indices</c> column taking values between <c>[0, N)</c>, where
              the minibatch size <c>N == sparse_shape[0]</c>.
              
              The input <c>SparseTensor</c> must have rank <c>R</c> greater than 1, and the first
              dimension is treated as the minibatch dimension.  Elements of the <c>SparseTensor</c>
              must be sorted in increasing order of this first dimension.  The stored
              <c>SparseTensor</c> objects pointed to by each row of the output <c>sparse_handles</c>
              will have rank <c>R-1</c>.
              
              The <c>SparseTensor</c> values can then be read out as part of a minibatch by passing
              the given keys as vector elements to <c>TakeManySparseFromTensorsMap</c>.  To ensure
              the correct <c>SparseTensorsMap</c> is accessed, ensure that the same
              <c>container</c> and <c>shared_name</c> are passed to that Op.  If no <c>shared_name</c>
              is provided here, instead use the *name* of the Operation created by calling
              <c>AddManySparseToTensorsMap</c> as the <c>shared_name</c> passed to
              <c>TakeManySparseFromTensorsMap</c>.  Ensure the Operations are colocated.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AddN (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AddN(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              Must all be the same size and shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AddN'.
            </param>
        <summary>
              Add all input tensors element wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSparseToTensorsMap">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AddSparseToTensorsMap (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AddSparseToTensorsMap(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The <c>indices</c> of the <c>SparseTensor</c>.
            </param>
        <param name="sparse_values">
              1-D.  The <c>values</c> of the <c>SparseTensor</c>.
            </param>
        <param name="sparse_shape">
              1-D.  The <c>shape</c> of the <c>SparseTensor</c>.
            </param>
        <param name="container">
              Optional argument
              The container name for the <c>SparseTensorsMap</c> created by this op.
            </param>
        <param name="shared_name">
              Optional argument
              The shared name for the <c>SparseTensorsMap</c> created by this op.
              If blank, the new Operation's unique name is used.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AddSparseToTensorsMap'.
            </param>
        <summary>
              Add a <c>SparseTensor</c> to a <c>SparseTensorsMap</c> return its handle.
            </summary>
        <returns>
              0-D.  The handle of the <c>SparseTensor</c> now stored in the
              <c>SparseTensorsMap</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A <c>SparseTensor</c> is represented by three tensors: <c>sparse_indices</c>,
              <c>sparse_values</c>, and <c>sparse_shape</c>.
              
              This operator takes the given <c>SparseTensor</c> and adds it to a container
              object (a <c>SparseTensorsMap</c>).  A unique key within this container is generated
              in the form of an <c>int64</c>, and this is the value that is returned.
              
              The <c>SparseTensor</c> can then be read out as part of a minibatch by passing
              the key as a vector element to <c>TakeManySparseFromTensorsMap</c>.  To ensure
              the correct <c>SparseTensorsMap</c> is accessed, ensure that the same
              <c>container</c> and <c>shared_name</c> are passed to that Op.  If no <c>shared_name</c>
              is provided here, instead use the *name* of the Operation created by calling
              <c>AddSparseToTensorsMap</c> as the <c>shared_name</c> passed to
              <c>TakeManySparseFromTensorsMap</c>.  Ensure the Operations are colocated.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AddV2 (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AddV2(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AddV2'.
            </param>
        <summary>
              Returns x + y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Add</c> supports broadcasting. <c>AddN</c> does not. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustContrast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustContrast (TensorFlow.TFOutput images, TensorFlow.TFOutput contrast_factor, TensorFlow.TFOutput min_value, TensorFlow.TFOutput max_value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustContrast(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput contrast_factor, valuetype TensorFlow.TFOutput min_value, valuetype TensorFlow.TFOutput max_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="contrast_factor" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
        </param>
        <param name="contrast_factor">
        </param>
        <param name="min_value">
        </param>
        <param name="max_value">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustContrast'.
            </param>
        <summary>
              Deprecated. Disallowed in GraphDef version &amp;gt;= 2.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustContrastv2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustContrastv2 (TensorFlow.TFOutput images, TensorFlow.TFOutput contrast_factor, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustContrastv2(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput contrast_factor, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="contrast_factor" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              Images to adjust.  At least 3-D.
            </param>
        <param name="contrast_factor">
              A float multiplier for adjusting contrast.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustContrastv2'.
            </param>
        <summary>
              Adjust the contrast of one or more images.
            </summary>
        <returns>
              The contrast-adjusted image or images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>images</c> is a tensor of at least 3 dimensions.  The last 3 dimensions are
              interpreted as <c>[height, width, channels]</c>.  The other dimensions only
              represent a collection of images, such as <c>[batch, height, width, channels].</c>
              
              Contrast is adjusted independently for each channel of each image.
              
              For each channel, the Op first computes the mean of the image pixels in the
              channel and then adjusts each component of each pixel to
              <c>(x - mean) * contrast_factor + mean</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustHue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustHue (TensorFlow.TFOutput images, TensorFlow.TFOutput delta, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustHue(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput delta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              Images to adjust.  At least 3-D.
            </param>
        <param name="delta">
              A float delta to add to the hue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustHue'.
            </param>
        <summary>
              Adjust the hue of one or more images.
            </summary>
        <returns>
              The hue-adjusted image or images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>images</c> is a tensor of at least 3 dimensions.  The last dimension is
              interpretted as channels, and must be three.
              
              The input image is considered in the RGB colorspace. Conceptually, the RGB
              colors are first mapped into HSV. A delta is then applied all the hue values,
              and then remapped back to RGB colorspace.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustSaturation">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustSaturation (TensorFlow.TFOutput images, TensorFlow.TFOutput scale, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustSaturation(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput scale, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              Images to adjust.  At least 3-D.
            </param>
        <param name="scale">
              A float scale to add to the saturation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustSaturation'.
            </param>
        <summary>
              Adjust the saturation of one or more images.
            </summary>
        <returns>
              The hue-adjusted image or images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>images</c> is a tensor of at least 3 dimensions.  The last dimension is
              interpretted as channels, and must be three.
              
              The input image is considered in the RGB colorspace. Conceptually, the RGB
              colors are first mapped into HSV. A scale is then applied all the saturation
              values, and then remapped back to RGB colorspace.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput All (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput All(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce. Must be in the range
              <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'All'.
            </param>
        <summary>
              Computes the "logical and" of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces <c>input</c> along the dimensions given in <c>axis</c>. Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>axis</c>. If <c>keep_dims</c> is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; AllCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; AllCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to produce.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AllCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllToAll">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AllToAll (TensorFlow.TFOutput input, TensorFlow.TFOutput group_assignment, long concat_dimension, long split_dimension, long split_count, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AllToAll(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput group_assignment, int64 concat_dimension, int64 split_dimension, int64 split_count, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="group_assignment" Type="TensorFlow.TFOutput" />
        <Parameter Name="concat_dimension" Type="System.Int64" />
        <Parameter Name="split_dimension" Type="System.Int64" />
        <Parameter Name="split_count" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The local input to the sum.
            </param>
        <param name="group_assignment">
              An int32 tensor with shape
              [num_groups, num_replicas_per_group]. <c>group_assignment[i]</c> represents the
              replica ids in the ith subgroup.
            </param>
        <param name="concat_dimension">
              The dimension number to concatenate.
            </param>
        <param name="split_dimension">
              The dimension number to split.
            </param>
        <param name="split_count">
              The number of splits, this number must equal to the sub-group
              size(group_assignment.get_shape()[1])
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AllToAll'.
            </param>
        <summary>
              An Op to exchange data across TPU replicas. On each replica, the input is
            </summary>
        <returns>
              The exchanged result.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              split into <c>split_count</c> blocks along <c>split_dimension</c> and send to the other
              replicas given group_assignment. After receiving <c>split_count</c> - 1 blocks from
              other replicas, we concatenate the blocks along <c>concat_dimension</c> as the
              output.
              
              For example, suppose there are 2 TPU replicas:
              replica 0 receives input: <c>[[A, B]]</c>
              replica 1 receives input: <c>[[C, D]]</c>
              
              group_assignment=<c>[[0, 1]]</c>
              concat_dimension=0
              split_dimension=1
              split_count=2
              
              replica 0's output: <c>[[A], [C]]</c>
              replica 1's output: <c>[[B], [D]]</c></remarks>
      </Docs>
    </Member>
    <Member MemberName="Angle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Angle (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Angle(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Angle'.
            </param>
        <summary>
              Returns the argument of a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>input</c> of complex numbers, this operation returns a tensor of
              type <c>float</c> that is the argument of each element in <c>input</c>. All elements in
              <c>input</c> must be complex numbers of the form \\(a + bj\\), where *a*
              is the real part and *b* is the imaginary part.
              
              The argument returned by this operation is of the form \\(atan2(b, a)\\).
              
              For example:
              
               <code>
              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
              tf.angle(input) ==&amp;gt; [2.0132, 1.056]
               </code>
              
              @compatibility(numpy)
              Equivalent to np.angle.
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousIterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AnonymousIterator (TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AnonymousIterator(valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AnonymousIterator'.
            </param>
        <summary>
              A container for an iterator resource.
            </summary>
        <returns>
              A handle to the iterator that can be passed to a "MakeIterator" or
              "IteratorGetNext" op. In contrast to Iterator, AnonymousIterator prevents
              resource sharing by name, and does not keep a reference to the resource
              container.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Any (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Any(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce. Must be in the range
              <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Any'.
            </param>
        <summary>
              Computes the "logical or" of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces <c>input</c> along the dimensions given in <c>axis</c>. Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>axis</c>. If <c>keep_dims</c> is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAdadelta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyAdadelta(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput accum_update, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum_update" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="accum_update">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Constant factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var, accum and update_accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyAdadelta'.
            </param>
        <summary>
              Update '*var' according to the adadelta scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              accum = rho() * accum + (1 - rho()) * grad.square();
              update = (update_accum + epsilon).sqrt() * (accum + epsilon()).rsqrt() * grad;
              update_accum = rho() * update_accum + (1 - rho()) * update.square();
              var -= update;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; update_slots = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; update_slots, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="update_slots" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="update_slots">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyAdagrad'.
            </param>
        <summary>
              Update '*var' according to the adagrad scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              accum += grad * grad
              var -= lr * grad * (1 / sqrt(accum))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAdagradDA">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyAdagradDA(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput gradient_accumulator, valuetype TensorFlow.TFOutput gradient_squared_accumulator, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput global_step, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_squared_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="global_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="gradient_accumulator">
              Should be from a Variable().
            </param>
        <param name="gradient_squared_accumulator">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="global_step">
              Training step number. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyAdagradDA'.
            </param>
        <summary>
              Update '*var' according to the proximal adagrad scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAdam">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyAdam (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta1_power, TensorFlow.TFOutput beta2_power, TensorFlow.TFOutput lr, TensorFlow.TFOutput beta1, TensorFlow.TFOutput beta2, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyAdam(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput beta1_power, valuetype TensorFlow.TFOutput beta2_power, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput beta1, valuetype TensorFlow.TFOutput beta2, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="v">
              Should be from a Variable().
            </param>
        <param name="beta1_power">
              Must be a scalar.
            </param>
        <param name="beta2_power">
              Must be a scalar.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="beta1">
              Momentum factor. Must be a scalar.
            </param>
        <param name="beta2">
              Momentum factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, m, and v tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If <c>True</c>, uses the nesterov update.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyAdam'.
            </param>
        <summary>
              Update '*var' according to the Adam algorithm.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              $$lr_t := \text{learning\_rate} * \sqrt{1 - beta_2^t} / (1 - beta_1^t)$$
              $$m_t := beta_1 * m_{t-1} + (1 - beta_1) * g$$
              $$v_t := beta_2 * v_{t-1} + (1 - beta_2) * g * g$$
              $$variable := variable - lr_t * m_t / (\sqrt{v_t} + \epsilon)$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAdaMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyAdaMax (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta1_power, TensorFlow.TFOutput lr, TensorFlow.TFOutput beta1, TensorFlow.TFOutput beta2, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyAdaMax(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput beta1_power, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput beta1, valuetype TensorFlow.TFOutput beta2, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="v">
              Should be from a Variable().
            </param>
        <param name="beta1_power">
              Must be a scalar.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="beta1">
              Momentum factor. Must be a scalar.
            </param>
        <param name="beta2">
              Momentum factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, m, and v tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyAdaMax'.
            </param>
        <summary>
              Update '*var' according to the AdaMax algorithm.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              m_t &amp;lt;- beta1 * m_{t-1} + (1 - beta1) * g
              v_t &amp;lt;- max(beta2 * v_{t-1}, abs(g))
              variable &amp;lt;- variable - learning_rate / (1 - beta1^t) * m_t / (v_t + epsilon)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAddSign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyAddSign (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput lr, TensorFlow.TFOutput alpha, TensorFlow.TFOutput sign_decay, TensorFlow.TFOutput beta, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyAddSign(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput sign_decay, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="sign_decay" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="alpha">
              Must be a scalar.
            </param>
        <param name="sign_decay">
              Must be a scalar.
            </param>
        <param name="beta">
              Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and m tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyAddSign'.
            </param>
        <summary>
              Update '*var' according to the AddSign update.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              m_t &amp;lt;- beta1 * m_{t-1} + (1 - beta1) * g
              update &amp;lt;- (alpha + sign_decay * sign(g) *sign(m)) * g
              variable &amp;lt;- variable - lr_t * update
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyCenteredRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyCenteredRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput mg, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="mg" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="mg">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, mg, ms, and mom tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyCenteredRMSProp'.
            </param>
        <summary>
              Update '*var' according to the centered RMSProp algorithm.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The centered RMSProp algorithm uses an estimate of the centered second moment
              (i.e., the variance) for normalization, as opposed to regular RMSProp, which
              uses the (uncentered) second moment. This often helps with training, but is
              slightly more expensive in terms of computation and memory.
              
              Note that in dense implementation of this algorithm, mg, ms, and mom will
              update even if the grad is zero, but in this sparse implementation, mg, ms,
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              mean_grad = decay * mean_grad + (1-decay) * gradient
              
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)
              
              mg &amp;lt;- rho * mg_{t-1} + (1-rho) * grad
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms - mg * mg + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFtrl">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyFtrl(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regulariation. Must be a scalar.
            </param>
        <param name="l2">
              L2 regulariation. Must be a scalar.
            </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyFtrl'.
            </param>
        <summary>
              Update '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              accum_new = accum + grad * grad
              linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFtrlV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyFtrlV2 (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput l2_shrinkage, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyFtrlV2(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput l2_shrinkage, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2_shrinkage" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regulariation. Must be a scalar.
            </param>
        <param name="l2">
              L2 shrinkage regulariation. Must be a scalar.
            </param>
        <param name="l2_shrinkage">
        </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyFtrlV2'.
            </param>
        <summary>
              Update '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              grad_with_shrinkage = grad + 2 * l2_shrinkage * var
              accum_new = accum + grad_with_shrinkage * grad_with_shrinkage
              linear += grad_with_shrinkage +
              (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput delta, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput delta, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="delta">
              The change.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyGradientDescent'.
            </param>
        <summary>
              Update '*var' by subtracting 'alpha' * 'delta' from it.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyMomentum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput momentum, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyMomentum(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput momentum, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="momentum">
              Momentum. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If <c>True</c>, the tensor passed to compute grad will be
              var - lr * momentum * accum, so in the end, the var you get is actually
              var - lr * momentum * accum.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyMomentum'.
            </param>
        <summary>
              Update '*var' according to the momentum scheme. Set use_nesterov = True if you
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              want to use Nesterov momentum.
              
              accum = accum * momentum + grad
              var -= lr * accum
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyPowerSign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyPowerSign (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput lr, TensorFlow.TFOutput logbase, TensorFlow.TFOutput sign_decay, TensorFlow.TFOutput beta, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyPowerSign(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput logbase, valuetype TensorFlow.TFOutput sign_decay, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="logbase" Type="TensorFlow.TFOutput" />
        <Parameter Name="sign_decay" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="logbase">
              Must be a scalar.
            </param>
        <param name="sign_decay">
              Must be a scalar.
            </param>
        <param name="beta">
              Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and m tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyPowerSign'.
            </param>
        <summary>
              Update '*var' according to the AddSign update.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              m_t &amp;lt;- beta1 * m_{t-1} + (1 - beta1) * g
              update &amp;lt;- exp(logbase * sign_decay * sign(g) * sign(m_t)) * g
              variable &amp;lt;- variable - lr_t * update
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyProximalAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyProximalAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyProximalAdagrad'.
            </param>
        <summary>
              Update '*var' and '*accum' according to FOBOS with Adagrad learning rate.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              accum += grad * grad
              prox_v = var - lr * grad * (1 / sqrt(accum))
              var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyProximalGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput delta, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyProximalGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput delta, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="delta">
              The change.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyProximalGradientDescent'.
            </param>
        <summary>
              Update '*var' as FOBOS algorithm with fixed learning rate.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              prox_v = var - alpha * delta
              var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApplyRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, ms, and mom tensors is protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyRMSProp'.
            </param>
        <summary>
              Update '*var' according to the RMSProp algorithm.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that in dense implementation of this algorithm, ms and mom will
              update even if the grad is zero, but in this sparse implementation, ms
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)
              
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApproximateEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApproximateEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable&lt;float&gt; tolerance = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApproximateEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype System.Nullable`1&lt;float32&gt; tolerance, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="tolerance" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="tolerance">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApproximateEqual'.
            </param>
        <summary>
              Returns the truth value of abs(x-y) &amp;lt; tolerance element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ArgMax (TensorFlow.TFOutput input, TensorFlow.TFOutput dimension, Nullable&lt;TensorFlow.TFDataType&gt; output_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ArgMax(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput dimension, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; output_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="dimension" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="dimension">
              int32 or int64, must be in the range <c>[-rank(input), rank(input))</c>.
              Describes which dimension of the input Tensor to reduce across. For vectors,
              use dimension = 0.
            </param>
        <param name="output_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ArgMax'.
            </param>
        <summary>
              Returns the index with the largest value across dimensions of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that in case of ties the identity of the return value is not guaranteed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgMin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ArgMin (TensorFlow.TFOutput input, TensorFlow.TFOutput dimension, Nullable&lt;TensorFlow.TFDataType&gt; output_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ArgMin(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput dimension, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; output_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="dimension" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="dimension">
              int32 or int64, must be in the range <c>[-rank(input), rank(input))</c>.
              Describes which dimension of the input Tensor to reduce across. For vectors,
              use dimension = 0.
            </param>
        <param name="output_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ArgMin'.
            </param>
        <summary>
              Returns the index with the smallest value across dimensions of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that in case of ties the identity of the return value is not guaranteed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Asin (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Asin(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Asin'.
            </param>
        <summary>
              Computes asin of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Asinh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Asinh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Asinh'.
            </param>
        <summary>
              Computes inverse hyperbolic sine of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Assert (TensorFlow.TFOutput condition, TensorFlow.TFOutput[] data, Nullable&lt;long&gt; summarize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Assert(valuetype TensorFlow.TFOutput condition, valuetype TensorFlow.TFOutput[] data, valuetype System.Nullable`1&lt;int64&gt; summarize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="summarize" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
              The condition to evaluate.
            </param>
        <param name="data">
              The tensors to print out when condition is false.
            </param>
        <param name="summarize">
              Optional argument
              Print this many entries of each tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Assert'.
            </param>
        <summary>
              Asserts that the given condition is true.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              If <c>condition</c> evaluates to false, print the list of tensors in <c>data</c>.
              <c>summarize</c> determines how many entries of the tensors to print.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Assign (TensorFlow.TFOutput reference, TensorFlow.TFOutput value, Nullable&lt;bool&gt; validate_shape = null, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Assign(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;bool&gt; validate_shape, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="validate_shape" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node. May be uninitialized.
            </param>
        <param name="value">
              The value to be assigned to the variable.
            </param>
        <param name="validate_shape">
              Optional argument
              If true, the operation will validate that the shape
              of 'value' matches the shape of the Tensor being assigned to.  If false,
              'ref' will take on the shape of 'value'.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the assignment will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Assign'.
            </param>
        <summary>
              Update 'ref' by assigning 'value' to it.
            </summary>
        <returns>
              = Same as "ref".  Returned as a convenience for operations that want
              to use the new value after the variable has been reset.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation outputs "ref" after the assignment is done.
              This makes it easier to chain operations that need to use the reset value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AssignAdd (TensorFlow.TFOutput reference, TensorFlow.TFOutput value, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AssignAdd(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="value">
              The value to be added to the variable.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the addition will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignAdd'.
            </param>
        <summary>
              Update 'ref' by adding 'value' to it.
            </summary>
        <returns>
              = Same as "ref".  Returned as a convenience for operations that want
              to use the new value after the variable has been updated.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation outputs "ref" after the update is done.
              This makes it easier to chain operations that need to use the reset value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignAddVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AssignAddVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AssignAddVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="value">
              the value by which the variable will be incremented.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignAddVariableOp'.
            </param>
        <summary>
              Adds a value to the current value of a variable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Any ReadVariableOp with a control dependency on this op is guaranteed to
              see the incremented value or a subsequent newer one.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignSub">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AssignSub (TensorFlow.TFOutput reference, TensorFlow.TFOutput value, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AssignSub(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="value">
              The value to be subtracted to the variable.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignSub'.
            </param>
        <summary>
              Update 'ref' by subtracting 'value' from it.
            </summary>
        <returns>
              = Same as "ref".  Returned as a convenience for operations that want
              to use the new value after the variable has been updated.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation outputs "ref" after the update is done.
              This makes it easier to chain operations that need to use the reset value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignSubVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AssignSubVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AssignSubVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="value">
              the value by which the variable will be incremented.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignSubVariableOp'.
            </param>
        <summary>
              Subtracts a value from the current value of a variable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Any ReadVariableOp with a control dependency on this op is guaranteed to
              see the decremented value or a subsequent newer one.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AssignVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AssignVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="value">
              the value to set the new tensor to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignVariableOp'.
            </param>
        <summary>
              Assigns a new value to a variable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Any ReadVariableOp with a control dependency on this op is guaranteed to return
              this value or a subsequent newer value of the variable.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsString">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AsString (TensorFlow.TFOutput input, Nullable&lt;long&gt; precision = null, Nullable&lt;bool&gt; scientific = null, Nullable&lt;bool&gt; shortest = null, Nullable&lt;long&gt; width = null, string fill = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AsString(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;int64&gt; precision, valuetype System.Nullable`1&lt;bool&gt; scientific, valuetype System.Nullable`1&lt;bool&gt; shortest, valuetype System.Nullable`1&lt;int64&gt; width, string fill, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="scientific" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="shortest" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="width" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="fill" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="precision">
              Optional argument
              The post-decimal precision to use for floating point numbers.
              Only used if precision &amp;gt; -1.
            </param>
        <param name="scientific">
              Optional argument
              Use scientific notation for floating point numbers.
            </param>
        <param name="shortest">
              Optional argument
              Use shortest representation (either scientific or standard) for
              floating point numbers.
            </param>
        <param name="width">
              Optional argument
              Pad pre-decimal numbers to this width.
              Applies to both floating point and integer numbers.
              Only used if width &amp;gt; -1.
            </param>
        <param name="fill">
              Optional argument
              The value to pad if width &amp;gt; -1.  If empty, pads with spaces.
              Another typical value is '0'.  String cannot be longer than 1 character.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AsString'.
            </param>
        <summary>
              Converts each entry in the given tensor to strings.  Supports many numeric
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              types and boolean.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Atan (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Atan(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Atan'.
            </param>
        <summary>
              Computes atan of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Atan2 (TensorFlow.TFOutput y, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Atan2(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Atan2'.
            </param>
        <summary>
              Computes arctangent of <c>y/x</c> element-wise, respecting signs of the arguments.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is the angle \( \theta \in [-\pi, \pi] \) such that
              \[ x = r \cos(\theta) \]
              and
              \[ y = r \sin(\theta) \]
              where \(r = \sqrt(x^2 + y^2) \).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Atanh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Atanh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Atanh'.
            </param>
        <summary>
              Computes inverse hyperbolic tangent of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioSpectrogram">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AudioSpectrogram (TensorFlow.TFOutput input, long window_size, long stride, Nullable&lt;bool&gt; magnitude_squared = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AudioSpectrogram(valuetype TensorFlow.TFOutput input, int64 window_size, int64 stride, valuetype System.Nullable`1&lt;bool&gt; magnitude_squared, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="window_size" Type="System.Int64" />
        <Parameter Name="stride" Type="System.Int64" />
        <Parameter Name="magnitude_squared" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Float representation of audio data.
            </param>
        <param name="window_size">
              How wide the input window is in samples. For the highest efficiency
              this should be a power of two, but other values are accepted.
            </param>
        <param name="stride">
              How widely apart the center of adjacent sample windows should be.
            </param>
        <param name="magnitude_squared">
              Optional argument
              Whether to return the squared magnitude or just the
              magnitude. Using squared magnitude can avoid extra calculations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSpectrogram'.
            </param>
        <summary>
              Produces a visualization of audio data over time.
            </summary>
        <returns>
              3D representation of the audio frequencies as an image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Spectrograms are a standard way of representing audio information as a series of
              slices of frequency information, one slice for each window of time. By joining
              these together into a sequence, they form a distinctive fingerprint of the sound
              over time.
              
              This op expects to receive audio data as an input, stored as floats in the range
              -1 to 1, together with a window width in samples, and a stride specifying how
              far to move the window between slices. From this it generates a three
              dimensional output. The lowest dimension has an amplitude value for each
              frequency during that time slice. The next dimension is time, with successive
              frequency slices. The final dimension is for the channels in the input, so a
              stereo audio input would have two here for example.
              
              This means the layout when converted and saved as an image is rotated 90 degrees
              clockwise from a typical spectrogram. Time is descending down the Y axis, and
              the frequency decreases from left to right.
              
              Each value in the result represents the square root of the sum of the real and
              imaginary parts of an FFT on the current window of samples. In this way, the
              lowest dimension represents the power of each frequency in the current window,
              and adjacent windows are concatenated in the next dimension.
              
              To get a more intuitive and visual look at what this operation does, you can run
              tensorflow/examples/wav_to_spectrogram to read in an audio file and save out the
              resulting spectrogram as a PNG image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AudioSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, float sample_rate, Nullable&lt;long&gt; max_outputs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AudioSummary(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, float32 sample_rate, valuetype System.Nullable`1&lt;int64&gt; max_outputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="System.Single" />
        <Parameter Name="max_outputs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar. Used to build the <c>tag</c> attribute of the summary values.
            </param>
        <param name="tensor">
              2-D of shape <c>[batch_size, frames]</c>.
            </param>
        <param name="sample_rate">
              The sample rate of the signal in hertz.
            </param>
        <param name="max_outputs">
              Optional argument
              Max number of batch elements to generate audio for.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSummary'.
            </param>
        <summary>
              Outputs a <c>Summary</c> protocol buffer with audio.
            </summary>
        <returns>
              Scalar. Serialized <c>Summary</c> protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The summary has up to <c>max_outputs</c> summary values containing audio. The
              audio is built from <c>tensor</c> which must be 3-D with shape <c>[batch_size,
              frames, channels]</c> or 2-D with shape <c>[batch_size, frames]</c>. The values are
              assumed to be in the range of <c>[-1.0, 1.0]</c> with a sample rate of <c>sample_rate</c>.
              
              The <c>tag</c> argument is a scalar <c>Tensor</c> of type <c>string</c>.  It is used to
              build the <c>tag</c> of the summary values:
              
              *  If <c>max_outputs</c> is 1, the summary value tag is '*tag*/audio'.
              *  If <c>max_outputs</c> is greater than 1, the summary value tags are
              generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioSummaryV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AudioSummaryV2 (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, TensorFlow.TFOutput sample_rate, Nullable&lt;long&gt; max_outputs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AudioSummaryV2(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput sample_rate, valuetype System.Nullable`1&lt;int64&gt; max_outputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_outputs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar. Used to build the <c>tag</c> attribute of the summary values.
            </param>
        <param name="tensor">
              2-D of shape <c>[batch_size, frames]</c>.
            </param>
        <param name="sample_rate">
              The sample rate of the signal in hertz.
            </param>
        <param name="max_outputs">
              Optional argument
              Max number of batch elements to generate audio for.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSummaryV2'.
            </param>
        <summary>
              Outputs a <c>Summary</c> protocol buffer with audio.
            </summary>
        <returns>
              Scalar. Serialized <c>Summary</c> protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The summary has up to <c>max_outputs</c> summary values containing audio. The
              audio is built from <c>tensor</c> which must be 3-D with shape <c>[batch_size,
              frames, channels]</c> or 2-D with shape <c>[batch_size, frames]</c>. The values are
              assumed to be in the range of <c>[-1.0, 1.0]</c> with a sample rate of <c>sample_rate</c>.
              
              The <c>tag</c> argument is a scalar <c>Tensor</c> of type <c>string</c>.  It is used to
              build the <c>tag</c> of the summary values:
              
              *  If <c>max_outputs</c> is 1, the summary value tag is '*tag*/audio'.
              *  If <c>max_outputs</c> is greater than 1, the summary value tags are
              generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPool">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPool (TensorFlow.TFOutput value, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPool(valuetype TensorFlow.TFOutput value, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="ksize">
              The size of the sliding window for each dimension of <c>value</c>.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of <c>value</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool'.
            </param>
        <summary>
              Performs average pooling on the input.
            </summary>
        <returns>
              The average pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each entry in <c>output</c> is the mean of the corresponding size <c>ksize</c>
              window in <c>value</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPool3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPool3D (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPool3D(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape <c>[batch, depth, rows, cols, channels]</c> tensor to pool over.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have <c>ksize[0] = ksize[4] = 1</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool3D'.
            </param>
        <summary>
              Performs 3D average pooling on the input.
            </summary>
        <returns>
              The average pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPool3DGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPool3DGrad (TensorFlow.TFOutput orig_input_shape, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPool3DGrad(valuetype TensorFlow.TFOutput orig_input_shape, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input_shape">
              The original input dimensions.
            </param>
        <param name="grad">
              Output backprop of shape <c>[batch, depth, rows, cols, channels]</c>.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have <c>ksize[0] = ksize[4] = 1</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool3DGrad'.
            </param>
        <summary>
              Computes gradients of average pooling function.
            </summary>
        <returns>
              The backprop for input.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPoolGrad (TensorFlow.TFOutput orig_input_shape, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPoolGrad(valuetype TensorFlow.TFOutput orig_input_shape, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input_shape">
              1-D.  Shape of the original input to <c>avg_pool</c>.
            </param>
        <param name="grad">
              4-D with shape <c>[batch, height, width, channels]</c>.  Gradients w.r.t.
              the output of <c>avg_pool</c>.
            </param>
        <param name="ksize">
              The size of the sliding window for each dimension of the input.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPoolGrad'.
            </param>
        <summary>
              Computes gradients of the average pooling function.
            </summary>
        <returns>
              4-D.  Gradients w.r.t. the input of <c>avg_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Barrier">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Barrier (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Barrier(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. Each shape must be 1 in the
              first dimension. The length of this attr must be the same as the length of
              component_types.
            </param>
        <param name="capacity">
              Optional argument
              The capacity of the barrier.  The default capacity is MAX_INT32,
              which is the largest capacity of the underlying queue.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this barrier is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this barrier will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Barrier'.
            </param>
        <summary>
              Defines a barrier that persists across different graph executions.
            </summary>
        <returns>
              The handle to the barrier.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A barrier represents a key-value map, where each key is a string, and
              each value is a tuple of tensors.
              
              At runtime, the barrier contains 'complete' and 'incomplete'
              elements. A complete element has defined tensors for all components of
              its value tuple, and may be accessed using BarrierTakeMany. An
              incomplete element has some undefined components in its value tuple,
              and may be updated using BarrierInsertMany.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BarrierClose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BarrierClose (TensorFlow.TFOutput handle, Nullable&lt;bool&gt; cancel_pending_enqueues = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BarrierClose(valuetype TensorFlow.TFOutput handle, valuetype System.Nullable`1&lt;bool&gt; cancel_pending_enqueues, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="cancel_pending_enqueues" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a barrier.
            </param>
        <param name="cancel_pending_enqueues">
              Optional argument
              If true, all pending enqueue requests that are
              blocked on the barrier's queue will be canceled. InsertMany will fail, even
              if no new key is introduced.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BarrierClose'.
            </param>
        <summary>
              Closes the given barrier.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation signals that no more new elements will be inserted in the
              given barrier. Subsequent InsertMany that try to introduce a new key will fail.
              Subsequent InsertMany operations that just add missing components to already
              existing elements will continue to succeed. Subsequent TakeMany operations will
              continue to succeed if sufficient completed elements remain in the barrier.
              Subsequent TakeMany operations that would block will fail immediately.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BarrierIncompleteSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BarrierIncompleteSize (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BarrierIncompleteSize(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a barrier.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BarrierIncompleteSize'.
            </param>
        <summary>
              Computes the number of incomplete elements in the given barrier.
            </summary>
        <returns>
              The number of incomplete elements (i.e. those with some of their value
              components not set) in the barrier.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BarrierInsertMany">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BarrierInsertMany (TensorFlow.TFOutput handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, long component_index, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BarrierInsertMany(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, int64 component_index, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_index" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a barrier.
            </param>
        <param name="keys">
              A one-dimensional tensor of keys, with length n.
            </param>
        <param name="values">
              An any-dimensional tensor of values, which are associated with the
              respective keys. The 0th dimension must have length n.
            </param>
        <param name="component_index">
              The component of the barrier elements that is being assigned.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BarrierInsertMany'.
            </param>
        <summary>
              For each key, assigns the respective value to the specified component.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              If a key is not found in the barrier, this operation will create a new
              incomplete element. If a key is found in the barrier, and the element
              already has a value at component_index, this operation will fail with
              INVALID_ARGUMENT, and leave the barrier in an undefined state.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BarrierReadySize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BarrierReadySize (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BarrierReadySize(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a barrier.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BarrierReadySize'.
            </param>
        <summary>
              Computes the number of complete elements in the given barrier.
            </summary>
        <returns>
              The number of complete elements (i.e. those with all of their value
              components set) in the barrier.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BarrierTakeMany">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt; BarrierTakeMany (TensorFlow.TFOutput handle, TensorFlow.TFOutput num_elements, TensorFlow.TFDataType[] component_types, Nullable&lt;bool&gt; allow_small_batch = null, Nullable&lt;bool&gt; wait_for_incomplete = null, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[]&gt; BarrierTakeMany(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput num_elements, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;bool&gt; allow_small_batch, valuetype System.Nullable`1&lt;bool&gt; wait_for_incomplete, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_elements" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="allow_small_batch" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="wait_for_incomplete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a barrier.
            </param>
        <param name="num_elements">
              A single-element tensor containing the number of elements to
              take.
            </param>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="allow_small_batch">
              Optional argument
              Allow to return less than num_elements items if barrier is
              already closed.
            </param>
        <param name="wait_for_incomplete">
              Optional argument
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is empty, this operation will block for up to
              timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BarrierTakeMany'.
            </param>
        <summary>
              Takes the given number of completed elements from a barrier.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              indices: A one-dimensional tensor of indices, with length num_elems.
              These indices refer to the batch in which the values were placed into the
              barrier (starting with MIN_LONG and increasing with each BarrierInsertMany).
              keys: A one-dimensional tensor of keys, with length num_elements.
              values: One any-dimensional tensor per component in a barrier element. All
              values have length num_elements in the 0th dimension.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This operation concatenates completed-element component tensors along
              the 0th dimension to make a single component tensor.
              
              Elements come out of the barrier when they are complete, and in the order
              in which they were placed into the barrier.  The indices output provides
              information about the batch in which each element was originally inserted
              into the barrier.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Batch">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Batch (TensorFlow.TFOutput[] in_tensors, long num_batch_threads, long max_batch_size, long batch_timeout_micros, long grad_timeout_micros, Nullable&lt;long&gt; max_enqueued_batches = null, long[] allowed_batch_sizes = null, string container = null, string shared_name = null, string batching_queue = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Batch(valuetype TensorFlow.TFOutput[] in_tensors, int64 num_batch_threads, int64 max_batch_size, int64 batch_timeout_micros, int64 grad_timeout_micros, valuetype System.Nullable`1&lt;int64&gt; max_enqueued_batches, int64[] allowed_batch_sizes, string container, string shared_name, string batching_queue, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in_tensors" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="num_batch_threads" Type="System.Int64" />
        <Parameter Name="max_batch_size" Type="System.Int64" />
        <Parameter Name="batch_timeout_micros" Type="System.Int64" />
        <Parameter Name="grad_timeout_micros" Type="System.Int64" />
        <Parameter Name="max_enqueued_batches" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="allowed_batch_sizes" Type="System.Int64[]" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="batching_queue" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="in_tensors">
        </param>
        <param name="num_batch_threads">
        </param>
        <param name="max_batch_size">
        </param>
        <param name="batch_timeout_micros">
        </param>
        <param name="grad_timeout_micros">
        </param>
        <param name="max_enqueued_batches">
              Optional argument
            </param>
        <param name="allowed_batch_sizes">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="batching_queue">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Batch'.
            </param>
        <summary>
              Batches all input tensors nondeterministically.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              batched_tensors:
              batch_index:
              id:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              When many instances of this Op are being run concurrently with the same
              container/shared_name in the same device, some will output zero-shaped Tensors
              and others will output Tensors of size up to max_batch_size.
              
              All Tensors in in_tensors are batched together (so, for example, labels and
              features should be batched with a single instance of this operation.
              
              Each invocation of batch emits an <c>id</c> scalar which will be used to identify
              this particular invocation when doing unbatch or its gradient.
              
              Each op which emits a non-empty batch will also emit a non-empty batch_index
              Tensor, which, is a [K, 3] matrix where each row contains the invocation's id,
              start, and length of elements of each set of Tensors present in batched_tensors.
              
              Batched tensors are concatenated along the first dimension, and all tensors in
              in_tensors must have the first dimension of the same size.
              
              in_tensors: The tensors to be batched.
              num_batch_threads: Number of scheduling threads for processing batches of work.
              Determines the number of batches processed in parallel.
              max_batch_size: Batch sizes will never be bigger than this.
              batch_timeout_micros: Maximum number of microseconds to wait before outputting
              an incomplete batch.
              allowed_batch_sizes: Optional list of allowed batch sizes. If left empty, does
              nothing. Otherwise, supplies a list of batch sizes, causing the op to pad
              batches up to one of those sizes. The entries must increase monotonically, and
              the final entry must equal max_batch_size.
              grad_timeout_micros: The timeout to use for the gradient. See Unbatch.
              batched_tensors: Either empty tensors or a batch of concatenated Tensors.
              batch_index: If out_tensors is non-empty, has information to invert it.
              container: Controls the scope of sharing of this batch.
              id: always contains a scalar with a unique ID for this invocation of Batch.
              shared_name: Concurrently running instances of batch in the same device with the
              same container and shared_name will batch their elements together. If left
              empty, the op name will be used as the shared name.
              T: the types of tensors to be batched.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput batch_size, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="batch_size">
              A scalar representing the number of elements to accumulate in a
              batch.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchDataset'.
            </param>
        <summary>
              Creates a dataset that batches <c>batch_size</c> elements from <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchDatasetV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchDatasetV2 (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFOutput drop_remainder, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchDatasetV2(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput batch_size, valuetype TensorFlow.TFOutput drop_remainder, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="drop_remainder" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="batch_size">
              A scalar representing the number of elements to accumulate in a batch.
            </param>
        <param name="drop_remainder">
              A scalar representing whether the last batch should be dropped in case its size
              is smaller than desired.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchDatasetV2'.
            </param>
        <summary>
              Creates a dataset that batches <c>batch_size</c> elements from <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchMatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchMatMul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable&lt;bool&gt; adj_x = null, Nullable&lt;bool&gt; adj_y = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchMatMul(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype System.Nullable`1&lt;bool&gt; adj_x, valuetype System.Nullable`1&lt;bool&gt; adj_y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="adj_x" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="adj_y" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              2-D or higher with shape <c>[..., r_x, c_x]</c>.
            </param>
        <param name="y">
              2-D or higher with shape <c>[..., r_y, c_y]</c>.
            </param>
        <param name="adj_x">
              Optional argument
              If <c>True</c>, adjoint the slices of <c>x</c>. Defaults to <c>False</c>.
            </param>
        <param name="adj_y">
              Optional argument
              If <c>True</c>, adjoint the slices of <c>y</c>. Defaults to <c>False</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchMatMul'.
            </param>
        <summary>
              Multiplies slices of two tensors in batches.
            </summary>
        <returns>
              3-D or higher with shape <c>[..., r_o, c_o]</c>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Multiplies all slices of <c>Tensor</c><c>x</c> and <c>y</c> (each slice can be
              viewed as an element of a batch), and arranges the individual results
              in a single output tensor of the same batch size. Each of the
              individual slices can optionally be adjointed (to adjoint a matrix
              means to transpose and conjugate it) before multiplication by setting
              the <c>adj_x</c> or <c>adj_y</c> flag to <c>True</c>, which are by default <c>False</c>.
              
              The input tensors <c>x</c> and <c>y</c> are 2-D or higher with shape <c>[..., r_x, c_x]</c>
              and <c>[..., r_y, c_y]</c>.
              
              The output tensor is 2-D or higher with shape <c>[..., r_o, c_o]</c>, where:
              
              r_o = c_x if adj_x else r_x
              c_o = r_y if adj_y else c_y
              
              It is computed as:
              
              output[..., :, :] = matrix(x[..., :, :]) * matrix(y[..., :, :])
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNormWithGlobalNormalization">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchNormWithGlobalNormalization (TensorFlow.TFOutput t, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta, TensorFlow.TFOutput gamma, float variance_epsilon, bool scale_after_normalization, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchNormWithGlobalNormalization(valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput gamma, float32 variance_epsilon, bool scale_after_normalization, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma" Type="TensorFlow.TFOutput" />
        <Parameter Name="variance_epsilon" Type="System.Single" />
        <Parameter Name="scale_after_normalization" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              A 4D input Tensor.
            </param>
        <param name="m">
              A 1D mean Tensor with size matching the last dimension of t.
              This is the first output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="v">
              A 1D variance Tensor with size matching the last dimension of t.
              This is the second output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="beta">
              A 1D beta Tensor with size matching the last dimension of t.
              An offset to be added to the normalized tensor.
            </param>
        <param name="gamma">
              A 1D gamma Tensor with size matching the last dimension of t.
              If "scale_after_normalization" is true, this tensor will be multiplied
              with the normalized tensor.
            </param>
        <param name="variance_epsilon">
              A small float number to avoid dividing by 0.
            </param>
        <param name="scale_after_normalization">
              A bool indicating whether the resulted tensor
              needs to be multiplied with gamma.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchNormWithGlobalNormalization'.
            </param>
        <summary>
              Batch normalization.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is deprecated. Prefer <c>tf.nn.batch_normalization</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNormWithGlobalNormalizationGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; BatchNormWithGlobalNormalizationGrad (TensorFlow.TFOutput t, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput gamma, TensorFlow.TFOutput backprop, float variance_epsilon, bool scale_after_normalization, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; BatchNormWithGlobalNormalizationGrad(valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput gamma, valuetype TensorFlow.TFOutput backprop, float32 variance_epsilon, bool scale_after_normalization, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma" Type="TensorFlow.TFOutput" />
        <Parameter Name="backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="variance_epsilon" Type="System.Single" />
        <Parameter Name="scale_after_normalization" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              A 4D input Tensor.
            </param>
        <param name="m">
              A 1D mean Tensor with size matching the last dimension of t.
              This is the first output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="v">
              A 1D variance Tensor with size matching the last dimension of t.
              This is the second output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="gamma">
              A 1D gamma Tensor with size matching the last dimension of t.
              If "scale_after_normalization" is true, this Tensor will be multiplied
              with the normalized Tensor.
            </param>
        <param name="backprop">
              4D backprop Tensor.
            </param>
        <param name="variance_epsilon">
              A small float number to avoid dividing by 0.
            </param>
        <param name="scale_after_normalization">
              A bool indicating whether the resulted tensor
              needs to be multiplied with gamma.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchNormWithGlobalNormalizationGrad'.
            </param>
        <summary>
              Gradients for batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              dx: 4D backprop tensor for input.
              dm: 1D backprop tensor for mean.
              dv: 1D backprop tensor for variance.
              db: 1D backprop tensor for beta.
              dg: 1D backprop tensor for gamma.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This op is deprecated. See <c>tf.nn.batch_normalization</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchToSpace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchToSpace (TensorFlow.TFOutput input, TensorFlow.TFOutput crops, long block_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchToSpace(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput crops, int64 block_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="crops" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D tensor with shape
              <c>[batch*block_size*block_size, height_pad/block_size, width_pad/block_size,
              depth]</c>. Note that the batch size of the input tensor must be divisible by
              <c>block_size * block_size</c>.
            </param>
        <param name="crops">
              2-D tensor of non-negative integers with shape <c>[2, 2]</c>. It specifies
              how many elements to crop from the intermediate result across the spatial
              dimensions as follows:
              
              crops = [[crop_top, crop_bottom], [crop_left, crop_right]]
            </param>
        <param name="block_size">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchToSpace'.
            </param>
        <summary>
              BatchToSpace for 4-D tensors of type T.
            </summary>
        <returns>
              4-D with shape <c>[batch, height, width, depth]</c>, where:
              
              height = height_pad - crop_top - crop_bottom
              width = width_pad - crop_left - crop_right
              
              The attr <c>block_size</c> must be greater than one. It indicates the block size.
              
              Some examples:
              
              (1) For the following input of shape <c>[4, 1, 1, 1]</c> and block_size of 2:
              
               <code>
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
               </code>
              
              The output tensor has shape <c>[1, 2, 2, 1]</c> and value:
              
               <code>
              x = [[[[1], [2]], [[3], [4]]]]
               </code>
              
              (2) For the following input of shape <c>[4, 1, 1, 3]</c> and block_size of 2:
              
               <code>
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
               </code>
              
              The output tensor has shape <c>[1, 2, 2, 3]</c> and value:
              
               <code>
              x = [[[[1, 2, 3], [4, 5, 6]],
              [[7, 8, 9], [10, 11, 12]]]]
               </code>
              
              (3) For the following input of shape <c>[4, 2, 2, 1]</c> and block_size of 2:
              
               <code>
              x = [[[[1], [3]], [[9], [11]]],
              [[[2], [4]], [[10], [12]]],
              [[[5], [7]], [[13], [15]]],
              [[[6], [8]], [[14], [16]]]]
               </code>
              
              The output tensor has shape <c>[1, 4, 4, 1]</c> and value:
              
               <code>
              x = [[[1],   [2],  [3],  [4]],
              [[5],   [6],  [7],  [8]],
              [[9],  [10], [11],  [12]],
              [[13], [14], [15],  [16]]]
               </code>
              
              (4) For the following input of shape <c>[8, 1, 2, 1]</c> and block_size of 2:
              
               <code>
              x = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],
              [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]
               </code>
              
              The output tensor has shape <c>[2, 2, 4, 1]</c> and value:
              
               <code>
              x = [[[[1], [3]], [[5], [7]]],
              [[[2], [4]], [[10], [12]]],
              [[[5], [7]], [[13], [15]]],
              [[[6], [8]], [[14], [16]]]]
               </code>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a legacy version of the more general BatchToSpaceND.
              
              Rearranges (permutes) data from batch into blocks of spatial data, followed by
              cropping. This is the reverse transformation of SpaceToBatch. More specifically,
              this op outputs a copy of the input tensor where values from the <c>batch</c>
              dimension are moved in spatial blocks to the <c>height</c> and <c>width</c> dimensions,
              followed by cropping along the <c>height</c> and <c>width</c> dimensions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchToSpaceND">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchToSpaceND (TensorFlow.TFOutput input, TensorFlow.TFOutput block_shape, TensorFlow.TFOutput crops, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchToSpaceND(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput block_shape, valuetype TensorFlow.TFOutput crops, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="crops" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              N-D with shape <c>input_shape = [batch] + spatial_shape + remaining_shape</c>,
              where spatial_shape has M dimensions.
            </param>
        <param name="block_shape">
              1-D with shape <c>[M]</c>, all values must be &amp;gt;= 1.
            </param>
        <param name="crops">
              2-D with shape <c>[M, 2]</c>, all values must be &amp;gt;= 0.
              <c>crops[i] = [crop_start, crop_end]</c> specifies the amount to crop from input
              dimension <c>i + 1</c>, which corresponds to spatial dimension <c>i</c>.  It is
              required that
              <c>crop_start[i] + crop_end[i] &amp;lt;= block_shape[i] * input_shape[i + 1]</c>.
              
              This operation is equivalent to the following steps:
              
              1. Reshape <c>input</c> to <c>reshaped</c> of shape:
              [block_shape[0], ..., block_shape[M-1],
              batch / prod(block_shape),
              input_shape[1], ..., input_shape[N-1]]
              
              2. Permute dimensions of <c>reshaped</c> to produce <c>permuted</c> of shape
              [batch / prod(block_shape),
              
              input_shape[1], block_shape[0],
              ...,
              input_shape[M], block_shape[M-1],
              
              input_shape[M+1], ..., input_shape[N-1]]
              
              3. Reshape <c>permuted</c> to produce <c>reshaped_permuted</c> of shape
              [batch / prod(block_shape),
              
              input_shape[1] * block_shape[0],
              ...,
              input_shape[M] * block_shape[M-1],
              
              input_shape[M+1],
              ...,
              input_shape[N-1]]
              
              4. Crop the start and end of dimensions <c>[1, ..., M]</c> of
              <c>reshaped_permuted</c> according to <c>crops</c> to produce the output of shape:
              [batch / prod(block_shape),
              
              input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1],
              ...,
              input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],
              
              input_shape[M+1], ..., input_shape[N-1]]
              
              Some examples:
              
              (1) For the following input of shape <c>[4, 1, 1, 1]</c>, <c>block_shape = [2, 2]</c>, and
              <c>crops = [[0, 0], [0, 0]]</c>:
              
               <code>
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
               </code>
              
              The output tensor has shape <c>[1, 2, 2, 1]</c> and value:
              
               <code>
              x = [[[[1], [2]], [[3], [4]]]]
               </code>
              
              (2) For the following input of shape <c>[4, 1, 1, 3]</c>, <c>block_shape = [2, 2]</c>, and
              <c>crops = [[0, 0], [0, 0]]</c>:
              
               <code>
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
               </code>
              
              The output tensor has shape <c>[1, 2, 2, 3]</c> and value:
              
               <code>
              x = [[[[1, 2, 3], [4, 5, 6]],
              [[7, 8, 9], [10, 11, 12]]]]
               </code>
              
              (3) For the following input of shape <c>[4, 2, 2, 1]</c>, <c>block_shape = [2, 2]</c>, and
              <c>crops = [[0, 0], [0, 0]]</c>:
              
               <code>
              x = [[[[1], [3]], [[9], [11]]],
              [[[2], [4]], [[10], [12]]],
              [[[5], [7]], [[13], [15]]],
              [[[6], [8]], [[14], [16]]]]
               </code>
              
              The output tensor has shape <c>[1, 4, 4, 1]</c> and value:
              
               <code>
              x = [[[1],   [2],  [3],  [4]],
              [[5],   [6],  [7],  [8]],
              [[9],  [10], [11],  [12]],
              [[13], [14], [15],  [16]]]
               </code>
              
              (4) For the following input of shape <c>[8, 1, 3, 1]</c>, <c>block_shape = [2, 2]</c>, and
              <c>crops = [[0, 0], [2, 0]]</c>:
              
               <code>
              x = [[[[0], [1], [3]]], [[[0], [9], [11]]],
              [[[0], [2], [4]]], [[[0], [10], [12]]],
              [[[0], [5], [7]]], [[[0], [13], [15]]],
              [[[0], [6], [8]]], [[[0], [14], [16]]]]
               </code>
              
              The output tensor has shape <c>[2, 2, 4, 1]</c> and value:
              
               <code>
              x = [[[[1],   [2],  [3],  [4]],
              [[5],   [6],  [7],  [8]]],
              [[[9],  [10], [11],  [12]],
              [[13], [14], [15],  [16]]]]
               </code></param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchToSpaceND'.
            </param>
        <summary>
              BatchToSpace for N-D tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation reshapes the "batch" dimension 0 into <c>M + 1</c> dimensions of shape
              <c>block_shape + [batch]</c>, interleaves these blocks back into the grid defined by
              the spatial dimensions <c>[1, ..., M]</c>, to obtain a result with the same rank as
              the input.  The spatial dimensions of this intermediate result are then
              optionally cropped according to <c>crops</c> to produce the output.  This is the
              reverse of SpaceToBatch.  See below for a precise description.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI0e">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BesselI0e (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BesselI0e(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BesselI0e'.
            </param>
        <summary>
              Computes the Bessel i0e function of <c>x</c> element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Exponentially scaled modified Bessel function of order 0 defined as
              <c>bessel_i0e(x) = exp(-abs(x)) bessel_i0(x)</c>.
              
              This function is faster and numerically stabler than <c>bessel_i0(x)</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI1e">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BesselI1e (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BesselI1e(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BesselI1e'.
            </param>
        <summary>
              Computes the Bessel i1e function of <c>x</c> element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Exponentially scaled modified Bessel function of order 0 defined as
              <c>bessel_i1e(x) = exp(-abs(x)) bessel_i1(x)</c>.
              
              This function is faster and numerically stabler than <c>bessel_i1(x)</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Betainc">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Betainc (TensorFlow.TFOutput a, TensorFlow.TFOutput b, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Betainc(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Betainc'.
            </param>
        <summary>
              Compute the regularized incomplete beta integral \\(I_x(a, b)\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The regularized incomplete beta integral is defined as:
              
              
              \\(I_x(a, b) = \frac{B(x; a, b)}{B(a, b)}\\)
              
              where
              
              
              \\(B(x; a, b) = \int_0^x t^{a-1} (1 - t)^{b-1} dt\\)
              
              
              is the incomplete beta function and \\(B(a, b)\\) is the *complete*
              beta function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BiasAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BiasAdd (TensorFlow.TFOutput value, TensorFlow.TFOutput bias, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BiasAdd(valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput bias, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              Any number of dimensions.
            </param>
        <param name="bias">
              1-D with size the last dimension of <c>value</c>.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the bias tensor will be added to the last dimension
              of the value tensor.
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
              The tensor will be added to "in_channels", the third-to-the-last
              dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAdd'.
            </param>
        <summary>
              Adds <c>bias</c> to <c>value</c>.
            </summary>
        <returns>
              Broadcasted sum of <c>value</c> and <c>bias</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a special case of <c>tf.add</c> where <c>bias</c> is restricted to be 1-D.
              Broadcasting is supported, so <c>value</c> may have any number of dimensions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BiasAddGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BiasAddGrad (TensorFlow.TFOutput out_backprop, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BiasAddGrad(valuetype TensorFlow.TFOutput out_backprop, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="out_backprop">
              Any number of dimensions.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the bias tensor will be added to the last dimension
              of the value tensor.
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
              The tensor will be added to "in_channels", the third-to-the-last
              dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAddGrad'.
            </param>
        <summary>
              The backward operation for "BiasAdd" on the "bias" tensor.
            </summary>
        <returns>
              1-D with size the feature dimension of <c>out_backprop</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It accumulates all the values from out_backprop into the feature dimension.
              For NHWC data format, the feature dimension is the last. For NCHW data format,
              the feature dimension is the third-to-last.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BiasAddV1">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BiasAddV1 (TensorFlow.TFOutput value, TensorFlow.TFOutput bias, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BiasAddV1(valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput bias, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              Any number of dimensions.
            </param>
        <param name="bias">
              1-D with size the last dimension of <c>value</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAddV1'.
            </param>
        <summary>
              Adds <c>bias</c> to <c>value</c>.
            </summary>
        <returns>
              Broadcasted sum of <c>value</c> and <c>bias</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a deprecated version of BiasAdd and will be soon removed.
              
              This is a special case of <c>tf.add</c> where <c>bias</c> is restricted to be 1-D.
              Broadcasting is supported, so <c>value</c> may have any number of dimensions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BigQueryReader">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BigQueryReader (string project_id, string dataset_id, string table_id, string[] columns, long timestamp_millis, string container = null, string shared_name = null, string test_end_point = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BigQueryReader(string project_id, string dataset_id, string table_id, string[] columns, int64 timestamp_millis, string container, string shared_name, string test_end_point, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project_id" Type="System.String" />
        <Parameter Name="dataset_id" Type="System.String" />
        <Parameter Name="table_id" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="timestamp_millis" Type="System.Int64" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="test_end_point" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="project_id">
              GCP project ID.
            </param>
        <param name="dataset_id">
              BigQuery Dataset ID.
            </param>
        <param name="table_id">
              Table to read.
            </param>
        <param name="columns">
              List of columns to read. Leave empty to read all columns.
            </param>
        <param name="timestamp_millis">
              Table snapshot timestamp in millis since epoch. Relative
              (negative or zero) snapshot times are not allowed. For more details, see
              'Table Decorators' in BigQuery docs.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="test_end_point">
              Optional argument
              Do not use. For testing purposes only.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BigQueryReader'.
            </param>
        <summary>
              A Reader that outputs rows from a BigQuery table as tensorflow Examples.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bincount">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Bincount (TensorFlow.TFOutput arr, TensorFlow.TFOutput size, TensorFlow.TFOutput weights, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Bincount(valuetype TensorFlow.TFOutput arr, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput weights, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="weights" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arr">
              int32 <c>Tensor</c>.
            </param>
        <param name="size">
              non-negative int32 scalar <c>Tensor</c>.
            </param>
        <param name="weights">
              is an int32, int64, float32, or float64 <c>Tensor</c> with the same
              shape as <c>arr</c>, or a length-0 <c>Tensor</c>, in which case it acts as all weights
              equal to 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Bincount'.
            </param>
        <summary>
              Counts the number of occurrences of each value in an integer array.
            </summary>
        <returns>
              1D <c>Tensor</c> with length equal to <c>size</c>. The counts or summed weights for
              each value in the range [0, size).
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a vector with length <c>size</c> and the same dtype as <c>weights</c>. If
              <c>weights</c> are empty, then index <c>i</c> stores the number of times the value <c>i</c> is
              counted in <c>arr</c>. If <c>weights</c> are non-empty, then index <c>i</c> stores the sum of
              the value in <c>weights</c> at each index where the corresponding value in <c>arr</c> is
              <c>i</c>.
              
              Values in <c>arr</c> outside of the range [0, size) are ignored.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitcast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Bitcast (TensorFlow.TFOutput input, TensorFlow.TFDataType type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Bitcast(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFDataType type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Bitcast'.
            </param>
        <summary>
              Bitcasts a tensor from one type to another without copying data.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>input</c>, this operation returns a tensor that has the same buffer
              data as <c>input</c> with datatype <c>type</c>.
              
              If the input datatype <c>T</c> is larger than the output datatype <c>type</c> then the
              shape changes from [...] to [..., sizeof(<c>T</c>)/sizeof(<c>type</c>)].
              
              If <c>T</c> is smaller than <c>type</c>, the operator requires that the rightmost
              dimension be equal to sizeof(<c>type</c>)/sizeof(<c>T</c>). The shape then goes from
              [..., sizeof(<c>type</c>)/sizeof(<c>T</c>)] to [...].
              
              *NOTE*: Bitcast is implemented as a low-level cast, so machines with different
              endian orderings will give different results.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAnd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BitwiseAnd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BitwiseAnd(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseAnd'.
            </param>
        <summary>
              Elementwise computes the bitwise AND of <c>x</c> and <c>y</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have those bits set, that are set in both <c>x</c> and <c>y</c>. The
              computation is performed on the underlying representations of <c>x</c> and <c>y</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOr">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BitwiseOr (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BitwiseOr(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseOr'.
            </param>
        <summary>
              Elementwise computes the bitwise OR of <c>x</c> and <c>y</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have those bits set, that are set in <c>x</c>, <c>y</c> or both. The
              computation is performed on the underlying representations of <c>x</c> and <c>y</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseXor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BitwiseXor (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BitwiseXor(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseXor'.
            </param>
        <summary>
              Elementwise computes the bitwise XOR of <c>x</c> and <c>y</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have those bits set, that are different in <c>x</c> and <c>y</c>. The
              computation is performed on the underlying representations of <c>x</c> and <c>y</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesBucketize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] BoostedTreesBucketize (TensorFlow.TFOutput[] float_values, TensorFlow.TFOutput[] bucket_boundaries, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] BoostedTreesBucketize(valuetype TensorFlow.TFOutput[] float_values, valuetype TensorFlow.TFOutput[] bucket_boundaries, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="float_values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="bucket_boundaries" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="float_values">
              float; List of Rank 1 Tensor each containing float values for a single feature.
            </param>
        <param name="bucket_boundaries">
              float; List of Rank 1 Tensors each containing the bucket boundaries for a single
              feature.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesBucketize'.
            </param>
        <summary>
              Bucketize each feature based on bucket boundaries.
            </summary>
        <returns>
              int; List of Rank 1 Tensors each containing the bucketized values for a single feature.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              An op that returns a list of float tensors, where each tensor represents the
              bucketized values for a single feature.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesCalculateBestGainsPerFeature">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; BoostedTreesCalculateBestGainsPerFeature (TensorFlow.TFOutput node_id_range, TensorFlow.TFOutput[] stats_summary_list, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput tree_complexity, TensorFlow.TFOutput min_node_weight, long max_splits, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; BoostedTreesCalculateBestGainsPerFeature(valuetype TensorFlow.TFOutput node_id_range, valuetype TensorFlow.TFOutput[] stats_summary_list, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput tree_complexity, valuetype TensorFlow.TFOutput min_node_weight, int64 max_splits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node_id_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="stats_summary_list" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="tree_complexity" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_node_weight" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_splits" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="node_id_range">
              A Rank 1 tensor (shape=[2]) to specify the range [first, last) of node ids to process within <c>stats_summary_list</c>. The nodes are iterated between the two nodes specified by the tensor, as like <c>for node_id in range(node_id_range[0], node_id_range[1])</c> (Note that the last index node_id_range[1] is exclusive).
            </param>
        <param name="stats_summary_list">
              A list of Rank 3 tensor (#shape=[max_splits, bucket, 2]) for accumulated stats summary (gradient/hessian) per node per buckets for each feature. The first dimension of the tensor is the maximum number of splits, and thus not all elements of it will be used, but only the indexes specified by node_ids will be used.
            </param>
        <param name="l1">
              l1 regularization factor on leaf weights, per instance based.
            </param>
        <param name="l2">
              l2 regularization factor on leaf weights, per instance based.
            </param>
        <param name="tree_complexity">
              adjustment to the gain, per leaf based.
            </param>
        <param name="min_node_weight">
              mininum avg of hessians in a node before required for the node to be considered for splitting.
            </param>
        <param name="max_splits">
              the number of nodes that can be split in the whole tree. Used as a dimension of output tensors.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesCalculateBestGainsPerFeature'.
            </param>
        <summary>
              Calculates gains for each feature and returns the best possible split information for the feature.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              node_ids_list: An output list of Rank 1 tensors indicating possible split node ids for each feature. The length of the list is num_features, but each tensor has different size as each feature provides different possible nodes. See above for details like shapes and sizes.
              gains_list: An output list of Rank 1 tensors indicating the best gains for each feature to split for certain nodes. See above for details like shapes and sizes.
              thresholds_list: An output list of Rank 1 tensors indicating the bucket id to compare with (as a threshold) for split in each node. See above for details like shapes and sizes.
              left_node_contribs_list: A list of Rank 2 tensors indicating the contribution of the left nodes when branching from parent nodes (given by the tensor element in the output node_ids_list) to the left direction by the given threshold for each feature. This value will be used to make the left node value by adding to the parent node value. Second dimension size is 1 for 1-dimensional logits, but would be larger for multi-class problems. See above for details like shapes and sizes.
              right_node_contribs_list: A list of Rank 2 tensors, with the same shape/conditions as left_node_contribs_list, but just that the value is for the right node.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The split information is the best threshold (bucket id), gains and left/right node contributions per node for each feature.
              
              It is possible that not all nodes can be split on each feature. Hence, the list of possible nodes can differ between the features. Therefore, we return <c>node_ids_list</c> for each feature, containing the list of nodes that this feature can be used to split.
              
              In this manner, the output is the best split per features and per node, so that it needs to be combined later to produce the best split for each node (among all possible features).
              
              The length of output lists are all of the same length, <c>num_features</c>.
              The output shapes are compatible in a way that the first dimension of all tensors of all lists are the same and equal to the number of possible split nodes for each feature.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesCenterBias">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BoostedTreesCenterBias (TensorFlow.TFOutput tree_ensemble_handle, TensorFlow.TFOutput mean_gradients, TensorFlow.TFOutput mean_hessians, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BoostedTreesCenterBias(valuetype TensorFlow.TFOutput tree_ensemble_handle, valuetype TensorFlow.TFOutput mean_gradients, valuetype TensorFlow.TFOutput mean_hessians, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="mean_gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="mean_hessians" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
              Handle to the tree ensemble.
            </param>
        <param name="mean_gradients">
              A tensor with shape=[logits_dimension] with mean of gradients for a first node.
            </param>
        <param name="mean_hessians">
              A tensor with shape=[logits_dimension] mean of hessians for a first node.
            </param>
        <param name="l1">
              l1 regularization factor on leaf weights, per instance based.
            </param>
        <param name="l2">
              l2 regularization factor on leaf weights, per instance based.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesCenterBias'.
            </param>
        <summary>
              Calculates the prior from the training data (the bias) and fills in the first node with the logits' prior. Returns a boolean indicating whether to continue centering.
            </summary>
        <returns>
              Bool, whether to continue bias centering.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesCreateEnsemble">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BoostedTreesCreateEnsemble (TensorFlow.TFOutput tree_ensemble_handle, TensorFlow.TFOutput stamp_token, TensorFlow.TFOutput tree_ensemble_serialized, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BoostedTreesCreateEnsemble(valuetype TensorFlow.TFOutput tree_ensemble_handle, valuetype TensorFlow.TFOutput stamp_token, valuetype TensorFlow.TFOutput tree_ensemble_serialized, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="stamp_token" Type="TensorFlow.TFOutput" />
        <Parameter Name="tree_ensemble_serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
              Handle to the tree ensemble resource to be created.
            </param>
        <param name="stamp_token">
              Token to use as the initial value of the resource stamp.
            </param>
        <param name="tree_ensemble_serialized">
              Serialized proto of the tree ensemble.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesCreateEnsemble'.
            </param>
        <summary>
              Creates a tree ensemble model and returns a handle to it.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesCreateQuantileStreamResource">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BoostedTreesCreateQuantileStreamResource (TensorFlow.TFOutput quantile_stream_resource_handle, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput num_streams, Nullable&lt;long&gt; max_elements = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BoostedTreesCreateQuantileStreamResource(valuetype TensorFlow.TFOutput quantile_stream_resource_handle, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput num_streams, valuetype System.Nullable`1&lt;int64&gt; max_elements, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantile_stream_resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_streams" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_elements" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quantile_stream_resource_handle">
              resource; Handle to quantile stream resource.
            </param>
        <param name="epsilon">
              float; The required approximation error of the stream resource.
            </param>
        <param name="num_streams">
              int; The number of streams managed by the resource that shares the same epsilon.
            </param>
        <param name="max_elements">
              Optional argument
              int; The maximum number of data points that can be fed to the stream.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesCreateQuantileStreamResource'.
            </param>
        <summary>
              Create the Resource for Quantile Streams.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesDeserializeEnsemble">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BoostedTreesDeserializeEnsemble (TensorFlow.TFOutput tree_ensemble_handle, TensorFlow.TFOutput stamp_token, TensorFlow.TFOutput tree_ensemble_serialized, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BoostedTreesDeserializeEnsemble(valuetype TensorFlow.TFOutput tree_ensemble_handle, valuetype TensorFlow.TFOutput stamp_token, valuetype TensorFlow.TFOutput tree_ensemble_serialized, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="stamp_token" Type="TensorFlow.TFOutput" />
        <Parameter Name="tree_ensemble_serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
              Handle to the tree ensemble.
            </param>
        <param name="stamp_token">
              Token to use as the new value of the resource stamp.
            </param>
        <param name="tree_ensemble_serialized">
              Serialized proto of the ensemble.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesDeserializeEnsemble'.
            </param>
        <summary>
              Deserializes a serialized tree ensemble config and replaces current tree
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              ensemble.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesEnsembleResourceHandleOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BoostedTreesEnsembleResourceHandleOp (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BoostedTreesEnsembleResourceHandleOp(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesEnsembleResourceHandleOp'.
            </param>
        <summary>
              Creates a handle to a BoostedTreesEnsembleResource
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesExampleDebugOutputs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BoostedTreesExampleDebugOutputs (TensorFlow.TFOutput tree_ensemble_handle, TensorFlow.TFOutput[] bucketized_features, long logits_dimension, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BoostedTreesExampleDebugOutputs(valuetype TensorFlow.TFOutput tree_ensemble_handle, valuetype TensorFlow.TFOutput[] bucketized_features, int64 logits_dimension, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="bucketized_features" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="logits_dimension" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
        </param>
        <param name="bucketized_features">
              A list of rank 1 Tensors containing bucket id for each
              feature.
            </param>
        <param name="logits_dimension">
              scalar, dimension of the logits, to be used for constructing the protos in
              examples_debug_outputs_serialized.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesExampleDebugOutputs'.
            </param>
        <summary>
              Debugging/model interpretability outputs for each example.
            </summary>
        <returns>
              Output rank 1 Tensor containing a proto serialized as a string for each example.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It traverses all the trees and computes debug metrics for individual examples,
              such as getting split feature ids and logits after each split along the decision
              path used to compute directional feature contributions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesGetEnsembleStates">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; BoostedTreesGetEnsembleStates (TensorFlow.TFOutput tree_ensemble_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; BoostedTreesGetEnsembleStates(valuetype TensorFlow.TFOutput tree_ensemble_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
              Handle to the tree ensemble.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesGetEnsembleStates'.
            </param>
        <summary>
              Retrieves the tree ensemble resource stamp token, number of trees and growing statistics.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              stamp_token: Stamp token of the tree ensemble resource.
              num_trees: The number of trees in the tree ensemble resource.
              num_finalized_trees: The number of trees that were finished successfully.
              num_attempted_layers: The number of layers we attempted to build (but not necessarily succeeded).
              last_layer_nodes_range: Rank size 2 tensor that contains start and end ids of the nodes in the latest
              layer.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesMakeQuantileSummaries">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] BoostedTreesMakeQuantileSummaries (TensorFlow.TFOutput[] float_values, TensorFlow.TFOutput example_weights, TensorFlow.TFOutput epsilon, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] BoostedTreesMakeQuantileSummaries(valuetype TensorFlow.TFOutput[] float_values, valuetype TensorFlow.TFOutput example_weights, valuetype TensorFlow.TFOutput epsilon, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="float_values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="example_weights" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="float_values">
              float; List of Rank 1 Tensors each containing values for a single feature.
            </param>
        <param name="example_weights">
              float; Rank 1 Tensor with weights per instance.
            </param>
        <param name="epsilon">
              float; The required maximum approximation error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesMakeQuantileSummaries'.
            </param>
        <summary>
              Makes the summary of quantiles for the batch.
            </summary>
        <returns>
              float; List of Rank 2 Tensors each containing the quantile summary
              (value, weight, min_rank, max_rank) of a single feature.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              An op that takes a list of tensors (one tensor per feature) and outputs the
              quantile summaries for each tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesMakeStatsSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BoostedTreesMakeStatsSummary (TensorFlow.TFOutput node_ids, TensorFlow.TFOutput gradients, TensorFlow.TFOutput hessians, TensorFlow.TFOutput[] bucketized_features_list, long max_splits, long num_buckets, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BoostedTreesMakeStatsSummary(valuetype TensorFlow.TFOutput node_ids, valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput hessians, valuetype TensorFlow.TFOutput[] bucketized_features_list, int64 max_splits, int64 num_buckets, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="hessians" Type="TensorFlow.TFOutput" />
        <Parameter Name="bucketized_features_list" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="max_splits" Type="System.Int64" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="node_ids">
              int32 Rank 1 Tensor containing node ids, which each example falls into for the requested layer.
            </param>
        <param name="gradients">
              float32; Rank 2 Tensor (shape=[#examples, 1]) for gradients.
            </param>
        <param name="hessians">
              float32; Rank 2 Tensor (shape=[#examples, 1]) for hessians.
            </param>
        <param name="bucketized_features_list">
              int32 list of Rank 1 Tensors, each containing the bucketized feature (for each feature column).
            </param>
        <param name="max_splits">
              int; the maximum number of splits possible in the whole tree.
            </param>
        <param name="num_buckets">
              int; equals to the maximum possible value of bucketized feature.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesMakeStatsSummary'.
            </param>
        <summary>
              Makes the summary of accumulated stats for the batch.
            </summary>
        <returns>
              output Rank 4 Tensor (shape=[#features, #splits, #buckets, 2]) containing accumulated stats put into the corresponding node and bucket. The first index of 4th dimension refers to gradients, and the second to hessians.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The summary stats contains gradients and hessians accumulated into the corresponding node and bucket for each example.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesPredict">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BoostedTreesPredict (TensorFlow.TFOutput tree_ensemble_handle, TensorFlow.TFOutput[] bucketized_features, long logits_dimension, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BoostedTreesPredict(valuetype TensorFlow.TFOutput tree_ensemble_handle, valuetype TensorFlow.TFOutput[] bucketized_features, int64 logits_dimension, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="bucketized_features" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="logits_dimension" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
        </param>
        <param name="bucketized_features">
              A list of rank 1 Tensors containing bucket id for each
              feature.
            </param>
        <param name="logits_dimension">
              scalar, dimension of the logits, to be used for partial logits
              shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesPredict'.
            </param>
        <summary>
              Runs multiple additive regression ensemble predictors on input instances and
            </summary>
        <returns>
              Output rank 2 Tensor containing logits for each example.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              computes the logits. It is designed to be used during prediction.
              It traverses all the trees and calculates the final score for each instance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesQuantileStreamResourceAddSummaries">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BoostedTreesQuantileStreamResourceAddSummaries (TensorFlow.TFOutput quantile_stream_resource_handle, TensorFlow.TFOutput[] summaries, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BoostedTreesQuantileStreamResourceAddSummaries(valuetype TensorFlow.TFOutput quantile_stream_resource_handle, valuetype TensorFlow.TFOutput[] summaries, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantile_stream_resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="summaries" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quantile_stream_resource_handle">
              resource handle referring to a QuantileStreamResource.
            </param>
        <param name="summaries">
              string; List of Rank 2 Tensor each containing the summaries for a single feature.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesQuantileStreamResourceAddSummaries'.
            </param>
        <summary>
              Add the quantile summaries to each quantile stream resource.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              An op that adds a list of quantile summaries to a quantile stream resource. Each
              summary Tensor is rank 2, containing summaries (value, weight, min_rank, max_rank)
              for a single feature.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesQuantileStreamResourceFlush">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BoostedTreesQuantileStreamResourceFlush (TensorFlow.TFOutput quantile_stream_resource_handle, TensorFlow.TFOutput num_buckets, Nullable&lt;bool&gt; generate_quantiles = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BoostedTreesQuantileStreamResourceFlush(valuetype TensorFlow.TFOutput quantile_stream_resource_handle, valuetype TensorFlow.TFOutput num_buckets, valuetype System.Nullable`1&lt;bool&gt; generate_quantiles, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantile_stream_resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_buckets" Type="TensorFlow.TFOutput" />
        <Parameter Name="generate_quantiles" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quantile_stream_resource_handle">
              resource handle referring to a QuantileStreamResource.
            </param>
        <param name="num_buckets">
              int; approximate number of buckets unless using generate_quantiles.
            </param>
        <param name="generate_quantiles">
              Optional argument
              bool; If True, the output will be the num_quantiles for each stream where the ith
              entry is the ith quantile of the input with an approximation error of epsilon.
              Duplicate values may be present.
              If False, the output will be the points in the histogram that we got which roughly
              translates to 1/epsilon boundaries and without any duplicates.
              Default to False.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesQuantileStreamResourceFlush'.
            </param>
        <summary>
              Flush the summaries for a quantile stream resource.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              An op that flushes the summaries for a quantile stream resource.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesQuantileStreamResourceGetBucketBoundaries">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] BoostedTreesQuantileStreamResourceGetBucketBoundaries (TensorFlow.TFOutput quantile_stream_resource_handle, long num_features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] BoostedTreesQuantileStreamResourceGetBucketBoundaries(valuetype TensorFlow.TFOutput quantile_stream_resource_handle, int64 num_features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantile_stream_resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_features" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quantile_stream_resource_handle">
              resource handle referring to a QuantileStreamResource.
            </param>
        <param name="num_features">
              inferred int; number of features to get bucket boundaries for.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesQuantileStreamResourceGetBucketBoundaries'.
            </param>
        <summary>
              Generate the bucket boundaries for each feature based on accumulated summaries.
            </summary>
        <returns>
              float; List of Rank 1 Tensors each containing the bucket boundaries for a feature.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              An op that returns a list of float tensors for a quantile stream resource. Each
              tensor is Rank 1 containing bucket boundaries for a single feature.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesQuantileStreamResourceHandleOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BoostedTreesQuantileStreamResourceHandleOp (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BoostedTreesQuantileStreamResourceHandleOp(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesQuantileStreamResourceHandleOp'.
            </param>
        <summary>
              Creates a handle to a BoostedTreesQuantileStreamResource.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesSerializeEnsemble">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; BoostedTreesSerializeEnsemble (TensorFlow.TFOutput tree_ensemble_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; BoostedTreesSerializeEnsemble(valuetype TensorFlow.TFOutput tree_ensemble_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
              Handle to the tree ensemble.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesSerializeEnsemble'.
            </param>
        <summary>
              Serializes the tree ensemble to a proto.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              stamp_token: Stamp token of the tree ensemble resource.
              tree_ensemble_serialized: Serialized proto of the ensemble.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesTrainingPredict">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; BoostedTreesTrainingPredict (TensorFlow.TFOutput tree_ensemble_handle, TensorFlow.TFOutput cached_tree_ids, TensorFlow.TFOutput cached_node_ids, TensorFlow.TFOutput[] bucketized_features, long logits_dimension, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; BoostedTreesTrainingPredict(valuetype TensorFlow.TFOutput tree_ensemble_handle, valuetype TensorFlow.TFOutput cached_tree_ids, valuetype TensorFlow.TFOutput cached_node_ids, valuetype TensorFlow.TFOutput[] bucketized_features, int64 logits_dimension, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="cached_tree_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="cached_node_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="bucketized_features" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="logits_dimension" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
        </param>
        <param name="cached_tree_ids">
              Rank 1 Tensor containing cached tree ids which is the starting
              tree of prediction.
            </param>
        <param name="cached_node_ids">
              Rank 1 Tensor containing cached node id which is the starting
              node of prediction.
            </param>
        <param name="bucketized_features">
              A list of rank 1 Tensors containing bucket id for each
              feature.
            </param>
        <param name="logits_dimension">
              scalar, dimension of the logits, to be used for partial logits
              shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesTrainingPredict'.
            </param>
        <summary>
              Runs multiple additive regression ensemble predictors on input instances and
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              partial_logits: Rank 2 Tensor containing logits update (with respect to cached
              values stored) for each example.
              tree_ids: Rank 1 Tensor containing new tree ids for each example.
              node_ids: Rank 1 Tensor containing new node ids in the new tree_ids.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              computes the update to cached logits. It is designed to be used during training.
              It traverses the trees starting from cached tree id and cached node id and
              calculates the updates to be pushed to the cache.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoostedTreesUpdateEnsemble">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation BoostedTreesUpdateEnsemble (TensorFlow.TFOutput tree_ensemble_handle, TensorFlow.TFOutput feature_ids, TensorFlow.TFOutput[] node_ids, TensorFlow.TFOutput[] gains, TensorFlow.TFOutput[] thresholds, TensorFlow.TFOutput[] left_node_contribs, TensorFlow.TFOutput[] right_node_contribs, TensorFlow.TFOutput max_depth, TensorFlow.TFOutput learning_rate, long pruning_mode, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation BoostedTreesUpdateEnsemble(valuetype TensorFlow.TFOutput tree_ensemble_handle, valuetype TensorFlow.TFOutput feature_ids, valuetype TensorFlow.TFOutput[] node_ids, valuetype TensorFlow.TFOutput[] gains, valuetype TensorFlow.TFOutput[] thresholds, valuetype TensorFlow.TFOutput[] left_node_contribs, valuetype TensorFlow.TFOutput[] right_node_contribs, valuetype TensorFlow.TFOutput max_depth, valuetype TensorFlow.TFOutput learning_rate, int64 pruning_mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="feature_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="node_ids" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="gains" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="thresholds" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="left_node_contribs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="right_node_contribs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="max_depth" Type="TensorFlow.TFOutput" />
        <Parameter Name="learning_rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="pruning_mode" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
              Handle to the ensemble variable.
            </param>
        <param name="feature_ids">
              Rank 1 tensor with ids for each feature. This is the real id of
              the feature that will be used in the split.
            </param>
        <param name="node_ids">
              List of rank 1 tensors representing the nodes for which this feature
              has a split.
            </param>
        <param name="gains">
              List of rank 1 tensors representing the gains for each of the feature's
              split.
            </param>
        <param name="thresholds">
              List of rank 1 tensors representing the thesholds for each of the
              feature's split.
            </param>
        <param name="left_node_contribs">
              List of rank 2 tensors with left leaf contribs for each of
              the feature's splits. Will be added to the previous node values to constitute
              the values of the left nodes.
            </param>
        <param name="right_node_contribs">
              List of rank 2 tensors with right leaf contribs for each
              of the feature's splits. Will be added to the previous node values to constitute
              the values of the right nodes.
            </param>
        <param name="max_depth">
              Max depth of the tree to build.
            </param>
        <param name="learning_rate">
              shrinkage const for each new tree.
            </param>
        <param name="pruning_mode">
              0-No pruning, 1-Pre-pruning, 2-Post-pruning.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BoostedTreesUpdateEnsemble'.
            </param>
        <summary>
              Updates the tree ensemble by either adding a layer to the last tree being grown
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              or by starting a new tree.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BroadcastArgs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BroadcastArgs (TensorFlow.TFOutput s0, TensorFlow.TFOutput s1, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BroadcastArgs(valuetype TensorFlow.TFOutput s0, valuetype TensorFlow.TFOutput s1, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s0" Type="TensorFlow.TFOutput" />
        <Parameter Name="s1" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s0">
        </param>
        <param name="s1">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BroadcastArgs'.
            </param>
        <summary>
              Return the shape of s0 op s1 with broadcast.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given <c>s0</c> and <c>s1</c>, tensors that represent shapes, compute <c>r0</c>, the
              broadcasted shape. <c>s0</c>, <c>s1</c> and <c>r0</c> are all integer vectors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BroadcastGradientArgs">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; BroadcastGradientArgs (TensorFlow.TFOutput s0, TensorFlow.TFOutput s1, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; BroadcastGradientArgs(valuetype TensorFlow.TFOutput s0, valuetype TensorFlow.TFOutput s1, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s0" Type="TensorFlow.TFOutput" />
        <Parameter Name="s1" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s0">
        </param>
        <param name="s1">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BroadcastGradientArgs'.
            </param>
        <summary>
              Return the reduction indices for computing gradients of s0 op s1 with broadcast.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              r0:
              r1:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This is typically used by gradient computations for a broadcasting operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BroadcastTo">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BroadcastTo (TensorFlow.TFOutput input, TensorFlow.TFOutput shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BroadcastTo(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A Tensor to broadcast.
            </param>
        <param name="shape">
              An 1-D <c>int</c> Tensor. The shape of the desired output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BroadcastTo'.
            </param>
        <summary>
              Broadcast an array for a compatible shape.
            </summary>
        <returns>
              A Tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Broadcasting is the process of making arrays to have compatible shapes
              for arithmetic operations. Two shapes are compatible if for each
              dimension pair they are either equal or one of them is one. When trying
              to broadcast a Tensor to a shape, it starts with the trailing dimensions,
              and works its way forward.
              
              For example,
               <code>
              &amp;gt;&amp;gt;&amp;gt; x = tf.constant([1, 2, 3])
              &amp;gt;&amp;gt;&amp;gt; y = tf.broadcast_to(x, [3, 3])
              &amp;gt;&amp;gt;&amp;gt; sess.run(y)
              array([[1, 2, 3],
              [1, 2, 3],
              [1, 2, 3]], dtype=int32)
               </code>
              In the above example, the input Tensor with the shape of <c>[1, 3]</c>
              is broadcasted to output Tensor with shape of <c>[3, 3]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bucketize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Bucketize (TensorFlow.TFOutput input, float[] boundaries, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Bucketize(valuetype TensorFlow.TFOutput input, float32[] boundaries, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="boundaries" Type="System.Single[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Any shape of Tensor contains with int or float type.
            </param>
        <param name="boundaries">
              A sorted list of floats gives the boundary of the buckets.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Bucketize'.
            </param>
        <summary>
              Bucketizes 'input' based on 'boundaries'.
            </summary>
        <returns>
              Same shape with 'input', each value of input replaced with bucket index.
              
              @compatibility(numpy)
              Equivalent to np.digitize.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For example, if the inputs are
              boundaries = [0, 10, 100]
              input = [[-5, 10000]
              [150,   10]
              [5,    100]]
              
              then the output will be
              output = [[0, 3]
              [3, 2]
              [1, 3]]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CacheDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput filename, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CacheDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="filename">
              A path on the filesystem where we should cache the dataset. Note: this
              will be a directory.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CacheDataset'.
            </param>
        <summary>
              Creates a dataset that caches elements from <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A CacheDataset will iterate over the input_dataset, and store tensors. If the
              cache already exists, the cache will be used. If the cache is inappropriate
              (e.g. cannot be opened, contains tensors of the wrong shape / size), an error
              will the returned when used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cast (TensorFlow.TFOutput x, TensorFlow.TFDataType DstT, Nullable&lt;bool&gt; Truncate = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cast(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFDataType DstT, valuetype System.Nullable`1&lt;bool&gt; Truncate, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="DstT" Type="TensorFlow.TFDataType" />
        <Parameter Name="Truncate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="DstT">
        </param>
        <param name="Truncate">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cast'.
            </param>
        <summary>
              Cast x of type SrcT to y of DstT.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceil">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Ceil (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Ceil(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Ceil'.
            </param>
        <summary>
              Returns element-wise smallest integer not less than x.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckNumerics">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CheckNumerics (TensorFlow.TFOutput tensor, string message, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CheckNumerics(valuetype TensorFlow.TFOutput tensor, string message, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
        </param>
        <param name="message">
              Prefix of the error message.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CheckNumerics'.
            </param>
        <summary>
              Checks a tensor for NaN and Inf values.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              When run, reports an <c>InvalidArgument</c> error if <c>tensor</c> has any values
              that are not a number (NaN) or infinity (Inf). Otherwise, passes <c>tensor</c> as-is.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cholesky">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cholesky (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cholesky(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is <c>[..., M, M]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cholesky'.
            </param>
        <summary>
              Computes the Cholesky decomposition of one or more square matrices.
            </summary>
        <returns>
              Shape is <c>[..., M, M]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a tensor of shape <c>[..., M, M]</c> whose inner-most 2 dimensions
              form square matrices.
              
              The input has to be symmetric and positive definite. Only the lower-triangular
              part of the input will be used for this operation. The upper-triangular part
              will not be read.
              
              The output is a tensor of the same shape as the input
              containing the Cholesky decompositions for all input submatrices <c>[..., :, :]</c>.
              
              **Note**: The gradient computation on GPU is faster for large matrices but
              not for large batch dimensions when the submatrices are small. In this
              case it might be faster to use the CPU.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CholeskyGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CholeskyGrad (TensorFlow.TFOutput l, TensorFlow.TFOutput grad, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CholeskyGrad(valuetype TensorFlow.TFOutput l, valuetype TensorFlow.TFOutput grad, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="l">
              Output of batch Cholesky algorithm l = cholesky(A). Shape is <c>[..., M, M]</c>.
              Algorithm depends only on lower triangular part of the innermost matrices of
              this tensor.
            </param>
        <param name="grad">
              df/dl where f is some scalar function. Shape is <c>[..., M, M]</c>.
              Algorithm depends only on lower triangular part of the innermost matrices of
              this tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CholeskyGrad'.
            </param>
        <summary>
              Computes the reverse mode backpropagated gradient of the Cholesky algorithm.
            </summary>
        <returns>
              Symmetrized version of df/dA . Shape is <c>[..., M, M]</c>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For an explanation see "Differentiation of the Cholesky algorithm" by
              Iain Murray http://arxiv.org/abs/1602.07527.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipByAverageNorm">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ClipByAverageNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput clip_norm, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ClipByAverageNorm(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput clip_norm, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="clip_norm" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">The input tensor.</param>
        <param name="clip_norm">A maximum clipping value.</param>
        <param name="operName">Name of the oper.</param>
        <summary>
            Clips tensor values to a maximum average L2-norm.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Given a tensor <paramref name="x" />, and a maximum clip value <paramref name="clip_norm" />, this operation 
            normalizes <paramref name="x" /> so that its its average L2-norm is less than or equal to <paramref name="clip_norm" />.
            Specifically, if the average L2-norm is already less than or equal to <paramref name="clip_norm" />, then <paramref name="x" />
            is not modified. If the average L2-norm is greater than <paramref name="clip_norm" />, then this operation returns a tensor of the same
            type and shape as <paramref name="x" /> with its values set to: <c>t* clip_norm / l2norm_avg(t)</c>. In this case, 
            the average L2-norm of the output tensor is <paramref name="clip_norm" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipByNorm">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ClipByNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput clip_norm, Nullable&lt;TensorFlow.TFOutput&gt; axes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ClipByNorm(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput clip_norm, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; axes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="clip_norm" Type="TensorFlow.TFOutput" />
        <Parameter Name="axes" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">The tensor.</param>
        <param name="clip_norm">The minimum value to clip by. A 0 - D(scalar) tensor, or a tensor with the same shape as <paramref name="x" />.</param>
        <param name="axes">The minimum value to clip by. A 0 - D(scalar) tensor, or a tensor with the same shape as <paramref name="x" />.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Clips tensor values to a maximum L2-norm.
            </summary>
        <returns>A clipped <see cref="T:TensorFlow.TFOutput">tensor</see>.</returns>
        <remarks>
          <para>
            Given a tensor <paramref name="x" />, and a maximum clip value <paramref name="clip_norm" />, this operation normalizes 
            <paramref name="x" /> so that its L2-norm is less than or equal to <paramref name="clip_norm" />, along the dimensions 
            given in <paramref name="axes" />. Specifically, in the default case where all dimensions are used for calculation, if
            the L2-norm of <paramref name="x" /> is already less than or equal to <paramref name="clip_norm" />, then <paramref name="x" />
            is not modified. If the L2-norm is greater than <paramref name="clip_norm" />, then this operation returns a tensor of 
            the same type and shape as <paramref name="x" /> with its values set to: <c>t* clip_norm / l2norm(t)</c></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipByValue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ClipByValue (TensorFlow.TFOutput t, TensorFlow.TFOutput clip_value_min, TensorFlow.TFOutput clip_value_max, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ClipByValue(valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput clip_value_min, valuetype TensorFlow.TFOutput clip_value_max, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="clip_value_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="clip_value_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              A <c>Tensor</c>.
            </param>
        <param name="clip_value_min">
              A 0-D (scalar) <c>Tensor</c>, or a <c>Tensor</c> with the same shape
              as <c>t</c>. The minimum value to clip by.
            </param>
        <param name="clip_value_max">
              A 0-D (scalar) <c>Tensor</c>, or a <c>Tensor</c> with the same shape
              as <c>t</c>. The maximum value to clip by.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ClipByValue'.
            </param>
        <summary>
              Clips tensor values to a specified min and max.
            </summary>
        <returns>
              A clipped <c>Tensor</c> with the same shape as input 't'.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>t</c>, this operation returns a tensor of the same type and
              shape as <c>t</c> with its values clipped to <c>clip_value_min</c> and <c>clip_value_max</c>.
              Any values less than <c>clip_value_min</c> are set to <c>clip_value_min</c>. Any values
              greater than <c>clip_value_max</c> are set to <c>clip_value_max</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectiveBcastRecv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CollectiveBcastRecv (TensorFlow.TFDataType T, long group_size, long group_key, long instance_key, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CollectiveBcastRecv(valuetype TensorFlow.TFDataType T, int64 group_size, int64 group_key, int64 instance_key, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="T" Type="TensorFlow.TFDataType" />
        <Parameter Name="group_size" Type="System.Int64" />
        <Parameter Name="group_key" Type="System.Int64" />
        <Parameter Name="instance_key" Type="System.Int64" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="T">
        </param>
        <param name="group_size">
        </param>
        <param name="group_key">
        </param>
        <param name="instance_key">
        </param>
        <param name="shape">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CollectiveBcastRecv'.
            </param>
        <summary>
              Receives a tensor value broadcast from another device.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectiveBcastSend">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CollectiveBcastSend (TensorFlow.TFOutput input, long group_size, long group_key, long instance_key, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CollectiveBcastSend(valuetype TensorFlow.TFOutput input, int64 group_size, int64 group_key, int64 instance_key, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="group_size" Type="System.Int64" />
        <Parameter Name="group_key" Type="System.Int64" />
        <Parameter Name="instance_key" Type="System.Int64" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="group_size">
        </param>
        <param name="group_key">
        </param>
        <param name="instance_key">
        </param>
        <param name="shape">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CollectiveBcastSend'.
            </param>
        <summary>
              Broadcasts a tensor value to one or more other devices.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectivePermute">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CollectivePermute (TensorFlow.TFOutput input, TensorFlow.TFOutput source_target_pairs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CollectivePermute(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput source_target_pairs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="source_target_pairs" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The local input to be permuted. Currently only supports float and
              bfloat16.
            </param>
        <param name="source_target_pairs">
              A tensor with shape [num_pairs, 2].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CollectivePermute'.
            </param>
        <summary>
              An Op to permute tensors across replicated TPU instances. Each instance
            </summary>
        <returns>
              The permuted input.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              supplies its own input.
              
              For example, suppose there are 4 TPU instances: <c>[A, B, C, D]</c>. Passing
              source_target_pairs=<c>[[0,1],[1,2],[2,3],[3,0]]</c> gets the outputs:
              <c>[D, A, B, C]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectiveReduce">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CollectiveReduce (TensorFlow.TFOutput input, long group_size, long group_key, long instance_key, string merge_op, string final_op, long[] subdiv_offsets, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CollectiveReduce(valuetype TensorFlow.TFOutput input, int64 group_size, int64 group_key, int64 instance_key, string merge_op, string final_op, int64[] subdiv_offsets, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="group_size" Type="System.Int64" />
        <Parameter Name="group_key" Type="System.Int64" />
        <Parameter Name="instance_key" Type="System.Int64" />
        <Parameter Name="merge_op" Type="System.String" />
        <Parameter Name="final_op" Type="System.String" />
        <Parameter Name="subdiv_offsets" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="group_size">
        </param>
        <param name="group_key">
        </param>
        <param name="instance_key">
        </param>
        <param name="merge_op">
        </param>
        <param name="final_op">
        </param>
        <param name="subdiv_offsets">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CollectiveReduce'.
            </param>
        <summary>
              Mutually reduces multiple tensors of identical type and shape.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareAndBitpack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CompareAndBitpack (TensorFlow.TFOutput input, TensorFlow.TFOutput threshold, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CompareAndBitpack(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput threshold, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Values to compare against <c>threshold</c> and bitpack.
            </param>
        <param name="threshold">
              Threshold to compare against.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CompareAndBitpack'.
            </param>
        <summary>
              Compare values of <c>input</c> to <c>threshold</c> and pack resulting bits into a <c>uint8</c>.
            </summary>
        <returns>
              The bitpacked comparisons.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each comparison returns a boolean <c>true</c> (if <c>input_value &amp;gt; threshold</c>)
              or and <c>false</c> otherwise.
              
              This operation is useful for Locality-Sensitive-Hashing (LSH) and other
              algorithms that use hashing approximations of cosine and <c>L2</c> distances;
              codes can be generated from an input via:
              
               <code>
              codebook_size = 50
              codebook_bits = codebook_size * 32
              codebook = tf.get_variable('codebook', [x.shape[-1].value, codebook_bits],
              dtype=x.dtype,
              initializer=tf.orthogonal_initializer())
              codes = compare_and_threshold(tf.matmul(x, codebook), threshold=0.)
              codes = tf.bitcast(codes, tf.int32)  # go from uint8 to int32
              # now codes has shape x.shape[:-1] + [codebook_size]
               </code>
              
              **NOTE**: Currently, the innermost dimension of the tensor must be divisible
              by 8.
              
              Given an <c>input</c> shaped <c>[s0, s1, ..., s_n]</c>, the output is
              a <c>uint8</c> tensor shaped <c>[s0, s1, ..., s_n / 8]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Complex (TensorFlow.TFOutput real, TensorFlow.TFOutput imag, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Complex(valuetype TensorFlow.TFOutput real, valuetype TensorFlow.TFOutput imag, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="real" Type="TensorFlow.TFOutput" />
        <Parameter Name="imag" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="real">
        </param>
        <param name="imag">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Complex'.
            </param>
        <summary>
              Converts two real numbers to a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>real</c> representing the real part of a complex number, and a
              tensor <c>imag</c> representing the imaginary part of a complex number, this
              operation returns complex numbers elementwise of the form \\(a + bj\\), where
              *a* represents the <c>real</c> part and *b* represents the <c>imag</c> part.
              
              The input tensors <c>real</c> and <c>imag</c> must have the same shape.
              
              For example:
              
               <code>
              # tensor 'real' is [2.25, 3.25]
              # tensor <c>imag</c> is [4.75, 5.75]
              tf.complex(real, imag) ==&amp;gt; [[2.25 + 4.75j], [3.25 + 5.75j]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexAbs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ComplexAbs (TensorFlow.TFOutput x, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ComplexAbs(valuetype TensorFlow.TFOutput x, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ComplexAbs'.
            </param>
        <summary>
              Computes the complex absolute value of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>x</c> of complex numbers, this operation returns a tensor of type
              <c>float</c> or <c>double</c> that is the absolute value of each element in <c>x</c>. All
              elements in <c>x</c> must be complex numbers of the form \\(a + bj\\). The absolute
              value is computed as \\( \sqrt{a^2 + b^2}\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeAccidentalHits">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ComputeAccidentalHits (TensorFlow.TFOutput true_classes, TensorFlow.TFOutput sampled_candidates, long num_true, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ComputeAccidentalHits(valuetype TensorFlow.TFOutput true_classes, valuetype TensorFlow.TFOutput sampled_candidates, int64 num_true, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="sampled_candidates" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              The true_classes output of UnpackSparseLabels.
            </param>
        <param name="sampled_candidates">
              The sampled_candidates output of CandidateSampler.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ComputeAccidentalHits'.
            </param>
        <summary>
              Computes the ids of the positions in sampled_candidates that match true_labels.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              indices: A vector of indices corresponding to rows of true_candidates.
              ids: A vector of IDs of positions in sampled_candidates that match a true_label
              for the row with the corresponding index in indices.
              weights: A vector of the same length as indices and ids, in which each element
              is -FLOAT_MAX.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              When doing log-odds NCE, the result of this op should be passed through a
              SparseToDense op, then added to the logits of the sampled candidates. This has
              the effect of 'removing' the sampled labels that match the true labels by
              making the classifier sure that they are sampled labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Concat (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Concat(valuetype TensorFlow.TFOutput concat_dim, valuetype TensorFlow.TFOutput[] values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concat_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="concat_dim">
              0-D.  The dimension along which to concatenate.  Must be in the
              range [0, rank(values)).
            </param>
        <param name="values">
              The <c>N</c> Tensors to concatenate. Their ranks and types must match,
              and their sizes must match in all dimensions except <c>concat_dim</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Concat'.
            </param>
        <summary>
              Concatenates tensors along one dimension.
            </summary>
        <returns>
              A <c>Tensor</c> with the concatenation of values stacked along the
              <c>concat_dim</c> dimension.  This tensor's shape matches that of <c>values</c> except
              in <c>concat_dim</c> where it has the sum of the sizes.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatenateDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ConcatenateDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput another_dataset, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ConcatenateDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput another_dataset, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="another_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="another_dataset">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConcatenateDataset'.
            </param>
        <summary>
              Creates a dataset that concatenates <c>input_dataset</c> with <c>another_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatOffset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] ConcatOffset (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] ConcatOffset(valuetype TensorFlow.TFOutput concat_dim, valuetype TensorFlow.TFOutput[] shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concat_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="concat_dim">
              The dimension along which to concatenate.
            </param>
        <param name="shape">
              The <c>N</c> int32 vectors representing shape of tensors being concatenated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConcatOffset'.
            </param>
        <summary>
              Computes offsets of concat inputs within its output.
            </summary>
        <returns>
              The <c>N</c> int32 vectors representing the starting offset
              of input tensors within the concatenated output.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For example:
              
               <code>
              # 'x' is [2, 2, 7]
              # 'y' is [2, 3, 7]
              # 'z' is [2, 5, 7]
              concat_offset(2, [x, y, z]) =&amp;gt; [0, 0, 0], [0, 2, 0], [0, 5, 0]
               </code>
              
              This is typically used by gradient computations for a concat operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ConcatV2 (TensorFlow.TFOutput[] values, TensorFlow.TFOutput axis, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ConcatV2(valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              List of <c>N</c> Tensors to concatenate. Their ranks and types must match,
              and their sizes must match in all dimensions except <c>concat_dim</c>.
            </param>
        <param name="axis">
              0-D.  The dimension along which to concatenate.  Must be in the
              range [-rank(values), rank(values)).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConcatV2'.
            </param>
        <summary>
              Concatenates tensors along one dimension.
            </summary>
        <returns>
              A <c>Tensor</c> with the concatenation of values stacked along the
              <c>concat_dim</c> dimension.  This tensor's shape matches that of <c>values</c> except
              in <c>concat_dim</c> where it has the sum of the sizes.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cond">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cond (TensorFlow.TFOutput pred, Func&lt;TensorFlow.TFOutput&gt; true_fn, Func&lt;TensorFlow.TFOutput&gt; false_fn, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cond(valuetype TensorFlow.TFOutput pred, class System.Func`1&lt;valuetype TensorFlow.TFOutput&gt; true_fn, class System.Func`1&lt;valuetype TensorFlow.TFOutput&gt; false_fn, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pred" Type="TensorFlow.TFOutput" />
        <Parameter Name="true_fn" Type="System.Func&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="false_fn" Type="System.Func&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pred">A scalar determining whether to return the result of true_fn or false_fn.</param>
        <param name="true_fn">The callable to be performed if pred is true.</param>
        <param name="false_fn">The callable to be performed if pred is false.</param>
        <param name="operName">Optional name prefix for the returned tensors.</param>
        <summary>
              Returns <paramref name="true_fn" /> if the predicate <paramref name="pred" /> is <c>true</c> else <paramref name="false_fn" />.
            </summary>
        <returns>TFOutput.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalAccumulator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ConditionalAccumulator (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string container = null, string shared_name = null, string reduction_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ConditionalAccumulator(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string container, string shared_name, string reduction_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="reduction_type" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of the value being accumulated.
            </param>
        <param name="shape">
              The shape of the values, can be [], in which case shape is unknown.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this accumulator is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this accumulator will be shared under the
              given name across multiple sessions.
            </param>
        <param name="reduction_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConditionalAccumulator'.
            </param>
        <summary>
              A conditional accumulator for aggregating gradients.
            </summary>
        <returns>
              The handle to the accumulator.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The accumulator accepts gradients marked with local_step greater or
              equal to the most recent global_step known to the accumulator. The
              average can be extracted from the accumulator, provided sufficient
              gradients have been accumulated. Extracting the average automatically
              resets the aggregate to 0, and increments the global_step recorded by
              the accumulator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureDistributedTPU">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ConfigureDistributedTPU (string embedding_config = null, string tpu_embedding_config = null, Nullable&lt;bool&gt; is_global_init = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ConfigureDistributedTPU(string embedding_config, string tpu_embedding_config, valuetype System.Nullable`1&lt;bool&gt; is_global_init, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="embedding_config" Type="System.String" />
        <Parameter Name="tpu_embedding_config" Type="System.String" />
        <Parameter Name="is_global_init" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="embedding_config">
              Optional argument
              Reserved. Do not use.
            </param>
        <param name="tpu_embedding_config">
              Optional argument
              Serialized tensorflow.tpu.TPUEmbeddingConfiguration that
              describes the embedding lookups of the program.
            </param>
        <param name="is_global_init">
              Optional argument
              Reserved. Do not use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConfigureDistributedTPU'.
            </param>
        <summary>
              An op that sets up the centralized structures for a distributed TPU
            </summary>
        <returns>
              A serialized tensorflow.tpu.TopologyProto that describes the TPU
              topology.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              system.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conj">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conj (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conj(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conj'.
            </param>
        <summary>
              Returns the complex conjugate of a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>input</c> of complex numbers, this operation returns a tensor of
              complex numbers that are the complex conjugate of each element in <c>input</c>. The
              complex numbers in <c>input</c> must be of the form \\(a + bj\\), where *a* is the
              real part and *b* is the imaginary part.
              
              The complex conjugate returned by this operation is of the form \\(a - bj\\).
              
              For example:
              
               <code>
              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
              tf.conj(input) ==&amp;gt; [-2.25 - 4.75j, 3.25 - 5.75j]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ConjugateTranspose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ConjugateTranspose (TensorFlow.TFOutput x, TensorFlow.TFOutput perm, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ConjugateTranspose(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput perm, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="perm" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="perm">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConjugateTranspose'.
            </param>
        <summary>
              Shuffle dimensions of x according to a permutation and conjugate the result.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output <c>y</c> has the same rank as <c>x</c>. The shapes of <c>x</c> and <c>y</c> satisfy:
              <c>y.shape[i] == x.shape[perm[i]] for i in [0, 1, ..., rank(x) - 1]</c><c>y[i,j,k,...,s,t,u] == conj(x[perm[i], perm[j], perm[k],...,perm[s], perm[t], perm[u]])</c></remarks>
      </Docs>
    </Member>
    <Member MemberName="Const">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Const (TensorFlow.TFTensor value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Const(class TensorFlow.TFTensor value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFTensor" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Value.</param>
        <param name="operName">Oper name.</param>
        <summary>
            Creates a constant operation from a TFTensor or constant
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Since TFTensor have implicit conversion operators, you can call this method with
            a constant like this: graph.Const (23)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Const">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Const (TensorFlow.TFTensor value, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Const(class TensorFlow.TFTensor value, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFTensor" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              Attr <c>value</c> is the tensor to return.
            </param>
        <param name="dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Const'.
            </param>
        <summary>
              Returns a constant tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Constant (object value, TensorFlow.TFShape tfshape, TensorFlow.TFDataType dtype = TensorFlow.TFDataType.Double, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Constant(object value, class TensorFlow.TFShape tfshape, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="tfshape" Type="TensorFlow.TFShape" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Value for tensor</param>
        <param name="tfshape">Shape of the tensor</param>
        <param name="dtype">Optional Type of the Zero value. Default: Double</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Create a constant tensor based on a shape
            Used by Zeros and Ones
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsumeMutexLock">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ConsumeMutexLock (TensorFlow.TFOutput mutex_lock, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ConsumeMutexLock(valuetype TensorFlow.TFOutput mutex_lock, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutex_lock" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mutex_lock">
              A tensor returned by <c>MutexLock</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConsumeMutexLock'.
            </param>
        <summary>
              This op consumes a lock created by <c>MutexLock</c>.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This op exists to consume a tensor created by <c>MutexLock</c> (other than
              direct control dependencies).  It should be the only that consumes the tensor,
              and will raise an error if it is not.  Its only purpose is to keep the
              mutex lock tensor alive until it is consumed by this op.
              
              **NOTE**: This operation must run on the same device as its input.  This may
              be enforced via the <c>colocate_with</c> mechanism.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlTrigger">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ControlTrigger (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ControlTrigger(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ControlTrigger'.
            </param>
        <summary>
              Does nothing. Serves as a control trigger for scheduling.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Only useful as a placeholder for control edges.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, Nullable&lt;bool&gt; use_cudnn_on_gpu = null, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; use_cudnn_on_gpu, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="use_cudnn_on_gpu" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A 4-D tensor. The dimension order is interpreted according to the value
              of <c>data_format</c>, see below for details.
            </param>
        <param name="filter">
              A 4-D tensor of shape
              <c>[filter_height, filter_width, in_channels, out_channels]</c></param>
        <param name="strides">
              1-D tensor of length 4.  The stride of the sliding window for each
              dimension of <c>input</c>. The dimension order is determined by the value of
              <c>data_format</c>, see below for details.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="use_cudnn_on_gpu">
              Optional argument
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, channels, height, width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 4.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each
              filter element on that dimension. The dimension order is determined by the
              value of <c>data_format</c>, see above for details. Dilations in the batch and
              depth dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2D'.
            </param>
        <summary>
              Computes a 2-D convolution given 4-D <c>input</c> and <c>filter</c> tensors.
            </summary>
        <returns>
              A 4-D tensor. The dimension order is determined by the value of
              <c>data_format</c>, see below for details.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given an input tensor of shape <c>[batch, in_height, in_width, in_channels]</c>
              and a filter / kernel tensor of shape
              <c>[filter_height, filter_width, in_channels, out_channels]</c>, this op
              performs the following:
              
              1. Flattens the filter to a 2-D matrix with shape
              <c>[filter_height * filter_width * in_channels, output_channels]</c>.
              2. Extracts image patches from the input tensor to form a *virtual*
              tensor of shape <c>[batch, out_height, out_width,
              filter_height * filter_width * in_channels]</c>.
              3. For each patch, right-multiplies the filter matrix and the image patch
              vector.
              
              In detail, with the default NHWC format,
              
              output[b, i, j, k] =
              sum_{di, dj, q} input[b, strides[1] * i + di, strides[2] * j + dj, q] *
              filter[di, dj, q, k]
              
              Must have <c>strides[0] = strides[3] = 1</c>.  For the most common case of the same
              horizontal and vertices strides, <c>strides = [1, stride, stride, 1]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv2DBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv2DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, Nullable&lt;bool&gt; use_cudnn_on_gpu = null, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv2DBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter_sizes, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; use_cudnn_on_gpu, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="use_cudnn_on_gpu" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, in_height, in_width, in_channels]</c>.
            </param>
        <param name="filter_sizes">
              An integer vector representing the tensor shape of <c>filter</c>,
              where <c>filter</c> is a 4-D
              <c>[filter_height, filter_width, in_channels, out_channels]</c> tensor.
            </param>
        <param name="out_backprop">
              4-D with shape <c>[batch, out_height, out_width, out_channels]</c>.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution. Must be in the same order as the dimension specified with
              format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="use_cudnn_on_gpu">
              Optional argument
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 4.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each filter
              element on that dimension. The dimension order is determined by the value of
              <c>data_format</c>, see above for details. Dilations in the batch and depth
              dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2DBackpropFilter'.
            </param>
        <summary>
              Computes the gradients of convolution with respect to the filter.
            </summary>
        <returns>
              4-D with shape
              <c>[filter_height, filter_width, in_channels, out_channels]</c>.  Gradient w.r.t.
              the <c>filter</c> input of the convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv2DBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv2DBackpropInput (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, Nullable&lt;bool&gt; use_cudnn_on_gpu = null, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv2DBackpropInput(valuetype TensorFlow.TFOutput input_sizes, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; use_cudnn_on_gpu, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="use_cudnn_on_gpu" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_sizes">
              An integer vector representing the shape of <c>input</c>,
              where <c>input</c> is a 4-D <c>[batch, height, width, channels]</c> tensor.
            </param>
        <param name="filter">
              4-D with shape
              <c>[filter_height, filter_width, in_channels, out_channels]</c>.
            </param>
        <param name="out_backprop">
              4-D with shape <c>[batch, out_height, out_width, out_channels]</c>.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution. Must be in the same order as the dimension specified with
              format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="use_cudnn_on_gpu">
              Optional argument
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 4.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each filter
              element on that dimension. The dimension order is determined by the value of
              <c>data_format</c>, see above for details. Dilations in the batch and depth
              dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2DBackpropInput'.
            </param>
        <summary>
              Computes the gradients of convolution with respect to the input.
            </summary>
        <returns>
              4-D with shape <c>[batch, in_height, in_width, in_channels]</c>.  Gradient
              w.r.t. the input of the convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, string padding, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape <c>[batch, in_depth, in_height, in_width, in_channels]</c>.
            </param>
        <param name="filter">
              Shape <c>[filter_depth, filter_height, filter_width, in_channels,
              out_channels]</c>. <c>in_channels</c> must match between <c>input</c> and <c>filter</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 5.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each
              filter element on that dimension. The dimension order is determined by the
              value of <c>data_format</c>, see above for details. Dilations in the batch and
              depth dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3D'.
            </param>
        <summary>
              Computes a 3-D convolution given 5-D <c>input</c> and <c>filter</c> tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              In signal processing, cross-correlation is a measure of similarity of
              two waveforms as a function of a time-lag applied to one of them. This
              is also known as a sliding dot product or sliding inner-product.
              
              Our Conv3D implements a form of cross-correlation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape <c>[batch, depth, rows, cols, in_channels]</c>.
            </param>
        <param name="filter">
              Shape <c>[depth, rows, cols, in_channels, out_channels]</c>.
              <c>in_channels</c> must match between <c>input</c> and <c>filter</c>.
            </param>
        <param name="out_backprop">
              Backprop signal of shape <c>[batch, out_depth, out_rows, out_cols,
              out_channels]</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="dilations">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropFilter'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the filter.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropFilterV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropFilterV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropFilterV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter_sizes, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape <c>[batch, depth, rows, cols, in_channels]</c>.
            </param>
        <param name="filter_sizes">
              An integer vector representing the tensor shape of <c>filter</c>,
              where <c>filter</c> is a 5-D
              <c>[filter_depth, filter_height, filter_width, in_channels, out_channels]</c>
              tensor.
            </param>
        <param name="out_backprop">
              Backprop signal of shape <c>[batch, out_depth, out_rows, out_cols,
              out_channels]</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 5.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each
              filter element on that dimension. The dimension order is determined by the
              value of <c>data_format</c>, see above for details. Dilations in the batch and
              depth dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropFilterV2'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the filter.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropInput (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropInput(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape <c>[batch, depth, rows, cols, in_channels]</c>.
            </param>
        <param name="filter">
              Shape <c>[depth, rows, cols, in_channels, out_channels]</c>.
              <c>in_channels</c> must match between <c>input</c> and <c>filter</c>.
            </param>
        <param name="out_backprop">
              Backprop signal of shape <c>[batch, out_depth, out_rows, out_cols,
              out_channels]</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="dilations">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropInput'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropInputV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropInputV2 (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropInputV2(valuetype TensorFlow.TFOutput input_sizes, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_sizes">
              An integer vector representing the tensor shape of <c>input</c>,
              where <c>input</c> is a 5-D
              <c>[batch, depth, rows, cols, in_channels]</c> tensor.
            </param>
        <param name="filter">
              Shape <c>[depth, rows, cols, in_channels, out_channels]</c>.
              <c>in_channels</c> must match between <c>input</c> and <c>filter</c>.
            </param>
        <param name="out_backprop">
              Backprop signal of shape <c>[batch, out_depth, out_rows, out_cols,
              out_channels]</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 5.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each
              filter element on that dimension. The dimension order is determined by the
              value of <c>data_format</c>, see above for details. Dilations in the batch and
              depth dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropInputV2'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Copy (TensorFlow.TFOutput input, string tensor_name = null, string[] debug_ops_spec = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Copy(valuetype TensorFlow.TFOutput input, string tensor_name, string[] debug_ops_spec, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_name" Type="System.String" />
        <Parameter Name="debug_ops_spec" Type="System.String[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Input tensor.
            </param>
        <param name="tensor_name">
              Optional argument
              The name of the input tensor.
            </param>
        <param name="debug_ops_spec">
              Optional argument
              A list of debug op spec (op, url, gated_grpc) for attached debug
              ops. Each element of the list has the format
              &amp;lt;debug_op&amp;gt;;&amp;lt;grpc_url&amp;gt;;&amp;lt;gated_grpc&amp;gt;, wherein gated_grpc is boolean represented
              as 0/1. E.g., "DebugIdentity;grpc://foo:3333;1",
              "DebugIdentity;file:///tmp/tfdbg_1;0".
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Copy'.
            </param>
        <summary>
              Copy Op.
            </summary>
        <returns>
              Output tensor, deep-copied from input.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Performs CPU-to-CPU or GPU-to-GPU deep-copying of tensor, depending on the
              device on which the tensor is allocated.
              N.B.: If the all downstream attached debug ops are disabled given the current
              gRPC gating status, the output will simply forward the input tensor without
              deep-copying. See the documentation of Debug* ops for more details.
              
              Unlike the CopyHost Op, this op does not have HostMemory constraint on its
              input or output.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyHost">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CopyHost (TensorFlow.TFOutput input, string tensor_name = null, string[] debug_ops_spec = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CopyHost(valuetype TensorFlow.TFOutput input, string tensor_name, string[] debug_ops_spec, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_name" Type="System.String" />
        <Parameter Name="debug_ops_spec" Type="System.String[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Input tensor.
            </param>
        <param name="tensor_name">
              Optional argument
              The name of the input tensor.
            </param>
        <param name="debug_ops_spec">
              Optional argument
              A list of debug op spec (op, url, gated_grpc) for attached debug
              ops. Each element of the list has the format
              &amp;lt;debug_op&amp;gt;;&amp;lt;grpc_url&amp;gt;;&amp;lt;gated_grpc&amp;gt;, wherein gated_grpc is boolean represented
              as 0/1. E.g., "DebugIdentity;grpc://foo:3333;1",
              "DebugIdentity;file:///tmp/tfdbg_1;0".
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CopyHost'.
            </param>
        <summary>
              Copy Host Op.
            </summary>
        <returns>
              Output tensor, deep-copied from input.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Performs CPU-to-CPU deep-copying of tensor.
              N.B.: If the all downstream attached debug ops are disabled given the current
              gRPC gating status, the output will simply forward the input tensor without
              deep-copying. See the documentation of Debug* ops for more details.
              
              Unlike the Copy Op, this op has HostMemory constraint on its input or output.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cos (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cos(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cos'.
            </param>
        <summary>
              Computes cos of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cosh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cosh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cosh'.
            </param>
        <summary>
              Computes hyperbolic cosine of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountUpTo">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CountUpTo (TensorFlow.TFOutput reference, long limit, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CountUpTo(valuetype TensorFlow.TFOutput reference, int64 limit, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="limit" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a scalar <c>Variable</c> node.
            </param>
        <param name="limit">
              If incrementing ref would bring it above limit, instead generates an
              'OutOfRange' error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CountUpTo'.
            </param>
        <summary>
              Increments 'ref' until it reaches 'limit'.
            </summary>
        <returns>
              A copy of the input before increment. If nothing else modifies the
              input, the values produced will all be distinct.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CropAndResize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CropAndResize (TensorFlow.TFOutput image, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, TensorFlow.TFOutput crop_size, string method = null, Nullable&lt;float&gt; extrapolation_value = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CropAndResize(valuetype TensorFlow.TFOutput image, valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput box_ind, valuetype TensorFlow.TFOutput crop_size, string method, valuetype System.Nullable`1&lt;float32&gt; extrapolation_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="box_ind" Type="TensorFlow.TFOutput" />
        <Parameter Name="crop_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="extrapolation_value" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              A 4-D tensor of shape <c>[batch, image_height, image_width, depth]</c>.
              Both <c>image_height</c> and <c>image_width</c> need to be positive.
            </param>
        <param name="boxes">
              A 2-D tensor of shape <c>[num_boxes, 4]</c>. The <c>i</c>-th row of the tensor
              specifies the coordinates of a box in the <c>box_ind[i]</c> image and is specified
              in normalized coordinates <c>[y1, x1, y2, x2]</c>. A normalized coordinate value of
              <c>y</c> is mapped to the image coordinate at <c>y * (image_height - 1)</c>, so as the
              <c>[0, 1]</c> interval of normalized image height is mapped to
              <c>[0, image_height - 1]</c> in image height coordinates. We do allow <c>y1</c> &amp;gt; <c>y2</c>, in
              which case the sampled crop is an up-down flipped version of the original
              image. The width dimension is treated similarly. Normalized coordinates
              outside the <c>[0, 1]</c> range are allowed, in which case we use
              <c>extrapolation_value</c> to extrapolate the input image values.
            </param>
        <param name="box_ind">
              A 1-D tensor of shape <c>[num_boxes]</c> with int32 values in <c>[0, batch)</c>.
              The value of <c>box_ind[i]</c> specifies the image that the <c>i</c>-th box refers to.
            </param>
        <param name="crop_size">
              A 1-D tensor of 2 elements, <c>size = [crop_height, crop_width]</c>. All
              cropped image patches are resized to this size. The aspect ratio of the image
              content is not preserved. Both <c>crop_height</c> and <c>crop_width</c> need to be
              positive.
            </param>
        <param name="method">
              Optional argument
              A string specifying the sampling method for resizing. It can be either
              <c>"bilinear"</c> or <c>"nearest"</c> and default to <c>"bilinear"</c>. Currently two sampling
              methods are supported: Bilinear and Nearest Neighbor.
            </param>
        <param name="extrapolation_value">
              Optional argument
              Value used for extrapolation, when applicable.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CropAndResize'.
            </param>
        <summary>
              Extracts crops from the input image tensor and resizes them.
            </summary>
        <returns>
              A 4-D tensor of shape <c>[num_boxes, crop_height, crop_width, depth]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Extracts crops from the input image tensor and resizes them using bilinear
              sampling or nearest neighbor sampling (possibly with aspect ratio change) to a
              common output size specified by <c>crop_size</c>. This is more general than the
              <c>crop_to_bounding_box</c> op which extracts a fixed size slice from the input image
              and does not allow resizing or aspect ratio change.
              
              Returns a tensor with <c>crops</c> from the input <c>image</c> at positions defined at the
              bounding box locations in <c>boxes</c>. The cropped boxes are all resized (with
              bilinear or nearest neighbor interpolation) to a fixed
              <c>size = [crop_height, crop_width]</c>. The result is a 4-D tensor
              <c>[num_boxes, crop_height, crop_width, depth]</c>. The resizing is corner aligned.
              In particular, if <c>boxes = [[0, 0, 1, 1]]</c>, the method will give identical
              results to using <c>tf.image.resize_bilinear()</c> or
              <c>tf.image.resize_nearest_neighbor()</c>(depends on the <c>method</c> argument) with
              <c>align_corners=True</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CropAndResizeGradBoxes">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CropAndResizeGradBoxes (TensorFlow.TFOutput grads, TensorFlow.TFOutput image, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, string method = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CropAndResizeGradBoxes(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput image, valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput box_ind, string method, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="box_ind" Type="TensorFlow.TFOutput" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">To be added.</param>
        <param name="image">To be added.</param>
        <param name="boxes">To be added.</param>
        <param name="box_ind">To be added.</param>
        <param name="method">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CropAndResizeGradImage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CropAndResizeGradImage (TensorFlow.TFOutput grads, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, TensorFlow.TFOutput image_size, TensorFlow.TFDataType T, string method = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CropAndResizeGradImage(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput box_ind, valuetype TensorFlow.TFOutput image_size, valuetype TensorFlow.TFDataType T, string method, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="box_ind" Type="TensorFlow.TFOutput" />
        <Parameter Name="image_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="T" Type="TensorFlow.TFDataType" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">To be added.</param>
        <param name="boxes">To be added.</param>
        <param name="box_ind">To be added.</param>
        <param name="image_size">To be added.</param>
        <param name="T">To be added.</param>
        <param name="method">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cross">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cross (TensorFlow.TFOutput a, TensorFlow.TFOutput b, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cross(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
              A tensor containing 3-element vectors.
            </param>
        <param name="b">
              Another tensor, of same type and shape as <c>a</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cross'.
            </param>
        <summary>
              Compute the pairwise cross product.
            </summary>
        <returns>
              Pairwise cross product of the vectors in <c>a</c> and <c>b</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>a</c> and <c>b</c> must be the same shape; they can either be simple 3-element vectors,
              or any shape where the innermost dimension is 3. In the latter case, each pair
              of corresponding 3-element vectors is cross-multiplied independently.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossReplicaSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CrossReplicaSum (TensorFlow.TFOutput input, TensorFlow.TFOutput group_assignment, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CrossReplicaSum(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput group_assignment, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="group_assignment" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The local input to the sum.
            </param>
        <param name="group_assignment">
              An int32 tensor with shape
              [num_groups, num_replicas_per_group]. <c>group_assignment[i]</c> represents the
              replica ids in the ith subgroup.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CrossReplicaSum'.
            </param>
        <summary>
              An Op to sum inputs across replicated TPU instances. Each instance supplies its
            </summary>
        <returns>
              The sum of all the distributed inputs.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              own input.
              
              For example, suppose there are 8 TPU instances: <c>[A, B, C, D, E, F, G, H]</c>.
              Passing group_assignment=<c>[[0,2,4,6],[1,3,5,7]]</c> sets <c>A, C, E, G</c> as group 0,
              and <c>B, D, F, H</c> as group 1. Thus we get the outputs:
              <c>[A+C+E+G, B+D+F+H, A+C+E+G, B+D+F+H, A+C+E+G, B+D+F+H, A+C+E+G, B+D+F+H]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CTCBeamSearchDecoder">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput&gt; CTCBeamSearchDecoder (TensorFlow.TFOutput inputs, TensorFlow.TFOutput sequence_length, long beam_width, long top_paths, Nullable&lt;bool&gt; merge_repeated = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput&gt; CTCBeamSearchDecoder(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput sequence_length, int64 beam_width, int64 top_paths, valuetype System.Nullable`1&lt;bool&gt; merge_repeated, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="sequence_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="beam_width" Type="System.Int64" />
        <Parameter Name="top_paths" Type="System.Int64" />
        <Parameter Name="merge_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              3-D, shape: <c>(max_time x batch_size x num_classes)</c>, the logits.
            </param>
        <param name="sequence_length">
              A vector containing sequence lengths, size <c>(batch)</c>.
            </param>
        <param name="beam_width">
              A scalar &amp;gt;= 0 (beam search beam width).
            </param>
        <param name="top_paths">
              A scalar &amp;gt;= 0, &amp;lt;= beam_width (controls output size).
            </param>
        <param name="merge_repeated">
              Optional argument
              If true, merge repeated classes in output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCBeamSearchDecoder'.
            </param>
        <summary>
              Performs beam search decoding on the logits given in input.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              decoded_indices: A list (length: top_paths) of indices matrices.  Matrix j,
              size <c>(total_decoded_outputs[j] x 2)</c>, has indices of a
              <c>SparseTensor&amp;lt;int64, 2&amp;gt;</c>.  The rows store: [batch, time].
              decoded_values: A list (length: top_paths) of values vectors.  Vector j,
              size <c>(length total_decoded_outputs[j])</c>, has the values of a
              <c>SparseTensor&amp;lt;int64, 2&amp;gt;</c>.  The vector stores the decoded classes for beam j.
              decoded_shape: A list (length: top_paths) of shape vector.  Vector j,
              size <c>(2)</c>, stores the shape of the decoded <c>SparseTensor[j]</c>.
              Its values are: <c>[batch_size, max_decoded_length[j]]</c>.
              log_probability: A matrix, shaped: <c>(batch_size x top_paths)</c>.  The
              sequence log-probabilities.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              A note about the attribute merge_repeated: For the beam search decoder,
              this means that if consecutive entries in a beam are the same, only
              the first of these is emitted.  That is, when the top path is "A B B B B",
              "A B" is returned if merge_repeated = True but "A B B B B" is
              returned if merge_repeated = False.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CTCGreedyDecoder">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CTCGreedyDecoder (TensorFlow.TFOutput inputs, TensorFlow.TFOutput sequence_length, Nullable&lt;bool&gt; merge_repeated = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CTCGreedyDecoder(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput sequence_length, valuetype System.Nullable`1&lt;bool&gt; merge_repeated, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="sequence_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="merge_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              3-D, shape: <c>(max_time x batch_size x num_classes)</c>, the logits.
            </param>
        <param name="sequence_length">
              A vector containing sequence lengths, size <c>(batch_size)</c>.
            </param>
        <param name="merge_repeated">
              Optional argument
              If True, merge repeated classes in output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCGreedyDecoder'.
            </param>
        <summary>
              Performs greedy decoding on the logits given in inputs.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              decoded_indices: Indices matrix, size <c>(total_decoded_outputs x 2)</c>,
              of a <c>SparseTensor&amp;lt;int64, 2&amp;gt;</c>.  The rows store: [batch, time].
              decoded_values: Values vector, size: <c>(total_decoded_outputs)</c>,
              of a <c>SparseTensor&amp;lt;int64, 2&amp;gt;</c>.  The vector stores the decoded classes.
              decoded_shape: Shape vector, size <c>(2)</c>, of the decoded SparseTensor.
              Values are: <c>[batch_size, max_decoded_length]</c>.
              log_probability: Matrix, size <c>(batch_size x 1)</c>, containing sequence
              log-probabilities.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              A note about the attribute merge_repeated: if enabled, when
              consecutive logits' maximum indices are the same, only the first of
              these is emitted.  Labeling the blank '*', the sequence "A B B * B B"
              becomes "A B B" if merge_repeated = True and "A B B B B" if
              merge_repeated = False.
              
              Regardless of the value of merge_repeated, if the maximum index of a given
              time and batch corresponds to the blank, index <c>(num_classes - 1)</c>, no new
              element is emitted.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CTCLoss">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CTCLoss (TensorFlow.TFOutput inputs, TensorFlow.TFOutput labels_indices, TensorFlow.TFOutput labels_values, TensorFlow.TFOutput sequence_length, Nullable&lt;bool&gt; preprocess_collapse_repeated = null, Nullable&lt;bool&gt; ctc_merge_repeated = null, Nullable&lt;bool&gt; ignore_longer_outputs_than_inputs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CTCLoss(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput labels_indices, valuetype TensorFlow.TFOutput labels_values, valuetype TensorFlow.TFOutput sequence_length, valuetype System.Nullable`1&lt;bool&gt; preprocess_collapse_repeated, valuetype System.Nullable`1&lt;bool&gt; ctc_merge_repeated, valuetype System.Nullable`1&lt;bool&gt; ignore_longer_outputs_than_inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sequence_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="preprocess_collapse_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ctc_merge_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignore_longer_outputs_than_inputs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              3-D, shape: <c>(max_time x batch_size x num_classes)</c>, the logits.
            </param>
        <param name="labels_indices">
              The indices of a <c>SparseTensor&amp;lt;int32, 2&amp;gt;</c>.
              <c>labels_indices(i, :) == [b, t]</c> means <c>labels_values(i)</c> stores the id for
              <c>(batch b, time t)</c>.
            </param>
        <param name="labels_values">
              The values (labels) associated with the given batch and time.
            </param>
        <param name="sequence_length">
              A vector containing sequence lengths (batch).
            </param>
        <param name="preprocess_collapse_repeated">
              Optional argument
              Scalar, if true then repeated labels are
              collapsed prior to the CTC calculation.
            </param>
        <param name="ctc_merge_repeated">
              Optional argument
              Scalar.  If set to false, *during* CTC calculation
              repeated non-blank labels will not be merged and are interpreted as
              individual labels.  This is a simplified version of CTC.
            </param>
        <param name="ignore_longer_outputs_than_inputs">
              Optional argument
              Scalar. If set to true, during CTC
              calculation, items that have longer output sequences than input sequences
              are skipped: they don't contribute to the loss term and have zero-gradient.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCLoss'.
            </param>
        <summary>
              Calculates the CTC Loss (log probability) for each batch entry.  Also calculates
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              loss: A vector (batch) containing log-probabilities.
              gradient: The gradient of <c>loss</c>.  3-D, shape:
              <c>(max_time x batch_size x num_classes)</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              the gradient.  This class performs the softmax operation for you, so inputs
              should be e.g. linear projections of outputs by an LSTM.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CudnnRNN">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CudnnRNN (TensorFlow.TFOutput input, TensorFlow.TFOutput input_h, TensorFlow.TFOutput input_c, TensorFlow.TFOutput parameters, string rnn_mode = null, string input_mode = null, string direction = null, Nullable&lt;float&gt; dropout = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CudnnRNN(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_h, valuetype TensorFlow.TFOutput input_c, valuetype TensorFlow.TFOutput parameters, string rnn_mode, string input_mode, string direction, valuetype System.Nullable`1&lt;float32&gt; dropout, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_h" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_c" Type="TensorFlow.TFOutput" />
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="rnn_mode" Type="System.String" />
        <Parameter Name="input_mode" Type="System.String" />
        <Parameter Name="direction" Type="System.String" />
        <Parameter Name="dropout" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_h">
        </param>
        <param name="input_c">
        </param>
        <param name="parameters">
        </param>
        <param name="rnn_mode">
              Optional argument
            </param>
        <param name="input_mode">
              Optional argument
            </param>
        <param name="direction">
              Optional argument
            </param>
        <param name="dropout">
              Optional argument
            </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="is_training">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CudnnRNN'.
            </param>
        <summary>
              A RNN backed by cuDNN.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              output_h:
              output_c:
              reserve_space:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the RNN from the input and initial states, with respect to the params
              buffer.
              
              rnn_mode: Indicates the type of the RNN model.
              input_mode: Indicate whether there is a linear projection between the input and
              the actual computation before the first layer. 'skip_input' is only allowed
              when input_size == num_units; 'auto_select' implies 'skip_input' when
              input_size == num_units; otherwise, it implies 'linear_input'.
              direction: Indicates whether a bidirectional model will be used. Should be
              "unidirectional" or "bidirectional".
              dropout: Dropout probability. When set to 0., dropout is disabled.
              seed: The 1st part of a seed to initialize dropout.
              seed2: The 2nd part of a seed to initialize dropout.
              input: A 3-D tensor with the shape of [seq_length, batch_size, input_size].
              input_h: A 3-D tensor with the shape of [num_layer * dir, batch_size,
              num_units].
              input_c: For LSTM, a 3-D tensor with the shape of
              [num_layer * dir, batch, num_units]. For other models, it is ignored.
              params: A 1-D tensor that contains the weights and biases in an opaque layout.
              The size must be created through CudnnRNNParamsSize, and initialized
              separately. Note that they might not be compatible across different
              generations. So it is a good idea to save and restore
              output: A 3-D tensor with the shape of [seq_length, batch_size,
              dir * num_units].
              output_h: The same shape has input_h.
              output_c: The same shape as input_c for LSTM. An empty tensor for other models.
              is_training: Indicates whether this operation is used for inferenece or
              training.
              reserve_space: An opaque tensor that can be used in backprop calculation. It
              is only produced if is_training is false.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CudnnRNNBackprop">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CudnnRNNBackprop (TensorFlow.TFOutput input, TensorFlow.TFOutput input_h, TensorFlow.TFOutput input_c, TensorFlow.TFOutput parameters, TensorFlow.TFOutput output, TensorFlow.TFOutput output_h, TensorFlow.TFOutput output_c, TensorFlow.TFOutput output_backprop, TensorFlow.TFOutput output_h_backprop, TensorFlow.TFOutput output_c_backprop, TensorFlow.TFOutput reserve_space, string rnn_mode = null, string input_mode = null, string direction = null, Nullable&lt;float&gt; dropout = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CudnnRNNBackprop(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_h, valuetype TensorFlow.TFOutput input_c, valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput output, valuetype TensorFlow.TFOutput output_h, valuetype TensorFlow.TFOutput output_c, valuetype TensorFlow.TFOutput output_backprop, valuetype TensorFlow.TFOutput output_h_backprop, valuetype TensorFlow.TFOutput output_c_backprop, valuetype TensorFlow.TFOutput reserve_space, string rnn_mode, string input_mode, string direction, valuetype System.Nullable`1&lt;float32&gt; dropout, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_h" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_c" Type="TensorFlow.TFOutput" />
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_h" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_c" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_h_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_c_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space" Type="TensorFlow.TFOutput" />
        <Parameter Name="rnn_mode" Type="System.String" />
        <Parameter Name="input_mode" Type="System.String" />
        <Parameter Name="direction" Type="System.String" />
        <Parameter Name="dropout" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_h">
        </param>
        <param name="input_c">
        </param>
        <param name="parameters">
        </param>
        <param name="output">
        </param>
        <param name="output_h">
        </param>
        <param name="output_c">
        </param>
        <param name="output_backprop">
        </param>
        <param name="output_h_backprop">
        </param>
        <param name="output_c_backprop">
        </param>
        <param name="reserve_space">
        </param>
        <param name="rnn_mode">
              Optional argument
            </param>
        <param name="input_mode">
              Optional argument
            </param>
        <param name="direction">
              Optional argument
            </param>
        <param name="dropout">
              Optional argument
            </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CudnnRNNBackprop'.
            </param>
        <summary>
              Backprop step of CudnnRNN.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              input_backprop:
              input_h_backprop:
              input_c_backprop:
              params_backprop:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Compute the backprop of both data and weights in a RNN.
              
              rnn_mode: Indicates the type of the RNN model.
              input_mode: Indicate whether there is a linear projection between the input and
              the actual computation before the first layer. 'skip_input' is only allowed
              when input_size == num_units; 'auto_select' implies 'skip_input' when
              input_size == num_units; otherwise, it implies 'linear_input'.
              direction: Indicates whether a bidirectional model will be used. Should be
              "unidirectional" or "bidirectional".
              dropout: Dropout probability. When set to 0., dropout is disabled.
              seed: The 1st part of a seed to initialize dropout.
              seed2: The 2nd part of a seed to initialize dropout.
              input: A 3-D tensor with the shape of [seq_length, batch_size, input_size].
              input_h: A 3-D tensor with the shape of [num_layer * dir, batch_size,
              num_units].
              input_c: For LSTM, a 3-D tensor with the shape of
              [num_layer * dir, batch, num_units]. For other models, it is ignored.
              params: A 1-D tensor that contains the weights and biases in an opaque layout.
              The size must be created through CudnnRNNParamsSize, and initialized
              separately. Note that they might not be compatible across different
              generations. So it is a good idea to save and restore
              output: A 3-D tensor with the shape of [seq_length, batch_size,
              dir * num_units].
              output_h: The same shape has input_h.
              output_c: The same shape as input_c for LSTM. An empty tensor for other models.
              output_backprop: A 3-D tensor with the same shape as output in the forward pass.
              output_h_backprop: A 3-D tensor with the same shape as output_h in the forward
              pass.
              output_c_backprop: A 3-D tensor with the same shape as output_c in the forward
              pass.
              reserve_space: The same reserve_space produced in for forward operation.
              input_backprop: The backprop to input in the forward pass. Has the same shape
              as input.
              input_h_backprop: The backprop to input_h in the forward pass. Has the same
              shape as input_h.
              input_c_backprop: The backprop to input_c in the forward pass. Has the same
              shape as input_c.
              params_backprop: The backprop to the params buffer in the forward pass. Has the
              same shape as params.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CudnnRNNBackpropV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CudnnRNNBackpropV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput input_h, TensorFlow.TFOutput input_c, TensorFlow.TFOutput parameters, TensorFlow.TFOutput output, TensorFlow.TFOutput output_h, TensorFlow.TFOutput output_c, TensorFlow.TFOutput output_backprop, TensorFlow.TFOutput output_h_backprop, TensorFlow.TFOutput output_c_backprop, TensorFlow.TFOutput reserve_space, TensorFlow.TFOutput host_reserved, string rnn_mode = null, string input_mode = null, string direction = null, Nullable&lt;float&gt; dropout = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CudnnRNNBackpropV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_h, valuetype TensorFlow.TFOutput input_c, valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput output, valuetype TensorFlow.TFOutput output_h, valuetype TensorFlow.TFOutput output_c, valuetype TensorFlow.TFOutput output_backprop, valuetype TensorFlow.TFOutput output_h_backprop, valuetype TensorFlow.TFOutput output_c_backprop, valuetype TensorFlow.TFOutput reserve_space, valuetype TensorFlow.TFOutput host_reserved, string rnn_mode, string input_mode, string direction, valuetype System.Nullable`1&lt;float32&gt; dropout, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_h" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_c" Type="TensorFlow.TFOutput" />
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_h" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_c" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_h_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_c_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space" Type="TensorFlow.TFOutput" />
        <Parameter Name="host_reserved" Type="TensorFlow.TFOutput" />
        <Parameter Name="rnn_mode" Type="System.String" />
        <Parameter Name="input_mode" Type="System.String" />
        <Parameter Name="direction" Type="System.String" />
        <Parameter Name="dropout" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_h">
        </param>
        <param name="input_c">
        </param>
        <param name="parameters">
        </param>
        <param name="output">
        </param>
        <param name="output_h">
        </param>
        <param name="output_c">
        </param>
        <param name="output_backprop">
        </param>
        <param name="output_h_backprop">
        </param>
        <param name="output_c_backprop">
        </param>
        <param name="reserve_space">
        </param>
        <param name="host_reserved">
        </param>
        <param name="rnn_mode">
              Optional argument
            </param>
        <param name="input_mode">
              Optional argument
            </param>
        <param name="direction">
              Optional argument
            </param>
        <param name="dropout">
              Optional argument
            </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CudnnRNNBackpropV2'.
            </param>
        <summary>
              Backprop step of CudnnRNN.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              input_backprop:
              input_h_backprop:
              input_c_backprop:
              params_backprop:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Compute the backprop of both data and weights in a RNN. Takes an extra
              "host_reserved" inupt than CudnnRNNBackprop, which is used to determine RNN
              cudnnRNNAlgo_t and cudnnMathType_t.
              
              rnn_mode: Indicates the type of the RNN model.
              input_mode: Indicates whether there is a linear projection between the input and
              the actual computation before the first layer. 'skip_input' is only allowed
              when input_size == num_units; 'auto_select' implies 'skip_input' when
              input_size == num_units; otherwise, it implies 'linear_input'.
              direction: Indicates whether a bidirectional model will be used. Should be
              "unidirectional" or "bidirectional".
              dropout: Dropout probability. When set to 0., dropout is disabled.
              seed: The 1st part of a seed to initialize dropout.
              seed2: The 2nd part of a seed to initialize dropout.
              input: A 3-D tensor with the shape of [seq_length, batch_size, input_size].
              input_h: A 3-D tensor with the shape of [num_layer * dir, batch_size,
              num_units].
              input_c: For LSTM, a 3-D tensor with the shape of
              [num_layer * dir, batch, num_units]. For other models, it is ignored.
              params: A 1-D tensor that contains the weights and biases in an opaque layout.
              The size must be created through CudnnRNNParamsSize, and initialized
              separately. Note that they might not be compatible across different
              generations. So it is a good idea to save and restore
              output: A 3-D tensor with the shape of [seq_length, batch_size,
              dir * num_units].
              output_h: The same shape has input_h.
              output_c: The same shape as input_c for LSTM. An empty tensor for other models.
              output_backprop: A 3-D tensor with the same shape as output in the forward pass.
              output_h_backprop: A 3-D tensor with the same shape as output_h in the forward
              pass.
              output_c_backprop: A 3-D tensor with the same shape as output_c in the forward
              pass.
              reserve_space: The same reserve_space produced in the forward operation.
              host_reserved: The same host_reserved produced in the forward operation.
              input_backprop: The backprop to input in the forward pass. Has the same shape
              as input.
              input_h_backprop: The backprop to input_h in the forward pass. Has the same
              shape as input_h.
              input_c_backprop: The backprop to input_c in the forward pass. Has the same
              shape as input_c.
              params_backprop: The backprop to the params buffer in the forward pass. Has the
              same shape as params.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CudnnRNNCanonicalToParams">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CudnnRNNCanonicalToParams (TensorFlow.TFOutput num_layers, TensorFlow.TFOutput num_units, TensorFlow.TFOutput input_size, TensorFlow.TFOutput[] weights, TensorFlow.TFOutput[] biases, string rnn_mode = null, string input_mode = null, string direction = null, Nullable&lt;float&gt; dropout = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CudnnRNNCanonicalToParams(valuetype TensorFlow.TFOutput num_layers, valuetype TensorFlow.TFOutput num_units, valuetype TensorFlow.TFOutput input_size, valuetype TensorFlow.TFOutput[] weights, valuetype TensorFlow.TFOutput[] biases, string rnn_mode, string input_mode, string direction, valuetype System.Nullable`1&lt;float32&gt; dropout, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_layers" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_units" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="biases" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="rnn_mode" Type="System.String" />
        <Parameter Name="input_mode" Type="System.String" />
        <Parameter Name="direction" Type="System.String" />
        <Parameter Name="dropout" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_layers">
        </param>
        <param name="num_units">
        </param>
        <param name="input_size">
        </param>
        <param name="weights">
        </param>
        <param name="biases">
        </param>
        <param name="rnn_mode">
              Optional argument
            </param>
        <param name="input_mode">
              Optional argument
            </param>
        <param name="direction">
              Optional argument
            </param>
        <param name="dropout">
              Optional argument
            </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CudnnRNNCanonicalToParams'.
            </param>
        <summary>
              Converts CudnnRNN params from canonical form to usable form.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Writes a set of weights into the opaque params buffer so they can be used in
              upcoming training or inferences.
              
              Note that the params buffer may not be compatible across different GPUs. So any
              save and restoration should be converted to and from the canonical weights and
              biases.
              
              num_layers: Specifies the number of layers in the RNN model.
              num_units: Specifies the size of the hidden state.
              input_size: Specifies the size of the input state.
              weights: the canonical form of weights that can be used for saving
              and restoration. They are more likely to be compatible across different
              generations.
              biases: the canonical form of biases that can be used for saving
              and restoration. They are more likely to be compatible across different
              generations.
              num_params: number of parameter sets for all layers.
              Each layer may contain multiple parameter sets, with each set consisting of
              a weight matrix and a bias vector.
              rnn_mode: Indicates the type of the RNN model.
              input_mode: Indicate whether there is a linear projection between the input and
              The actual computation before the first layer. 'skip_input' is only allowed
              when input_size == num_units; 'auto_select' implies 'skip_input' when
              input_size == num_units; otherwise, it implies 'linear_input'.
              direction: Indicates whether a bidirectional model will be used.
              dir = (direction == bidirectional) ? 2 : 1
              dropout: dropout probability. When set to 0., dropout is disabled.
              seed: the 1st part of a seed to initialize dropout.
              seed2: the 2nd part of a seed to initialize dropout.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CudnnRNNParamsSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CudnnRNNParamsSize (TensorFlow.TFOutput num_layers, TensorFlow.TFOutput num_units, TensorFlow.TFOutput input_size, TensorFlow.TFDataType T, TensorFlow.TFDataType S, string rnn_mode = null, string input_mode = null, string direction = null, Nullable&lt;float&gt; dropout = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CudnnRNNParamsSize(valuetype TensorFlow.TFOutput num_layers, valuetype TensorFlow.TFOutput num_units, valuetype TensorFlow.TFOutput input_size, valuetype TensorFlow.TFDataType T, valuetype TensorFlow.TFDataType S, string rnn_mode, string input_mode, string direction, valuetype System.Nullable`1&lt;float32&gt; dropout, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_layers" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_units" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="T" Type="TensorFlow.TFDataType" />
        <Parameter Name="S" Type="TensorFlow.TFDataType" />
        <Parameter Name="rnn_mode" Type="System.String" />
        <Parameter Name="input_mode" Type="System.String" />
        <Parameter Name="direction" Type="System.String" />
        <Parameter Name="dropout" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_layers">
        </param>
        <param name="num_units">
        </param>
        <param name="input_size">
        </param>
        <param name="T">
        </param>
        <param name="S">
        </param>
        <param name="rnn_mode">
              Optional argument
            </param>
        <param name="input_mode">
              Optional argument
            </param>
        <param name="direction">
              Optional argument
            </param>
        <param name="dropout">
              Optional argument
            </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CudnnRNNParamsSize'.
            </param>
        <summary>
              Computes size of weights that can be used by a Cudnn RNN model.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Return the params size that can be used by the Cudnn RNN model. Subsequent
              weight allocation and initialization should use this size.
              
              num_layers: Specifies the number of layers in the RNN model.
              num_units: Specifies the size of the hidden state.
              input_size: Specifies the size of the input state.
              rnn_mode: Indicates the type of the RNN model.
              input_mode: Indicate whether there is a linear projection between the input and
              The actual computation before the first layer. 'skip_input' is only allowed
              when input_size == num_units; 'auto_select' implies 'skip_input' when
              input_size == num_units; otherwise, it implies 'linear_input'.
              direction: Indicates whether a bidirectional model will be used.
              dir = (direction == bidirectional) ? 2 : 1
              dropout: dropout probability. When set to 0., dropout is disabled.
              seed: the 1st part of a seed to initialize dropout.
              seed2: the 2nd part of a seed to initialize dropout.
              params_size: The size of the params buffer that should be allocated and
              initialized for this RNN model. Note that this params buffer may not be
              compatible across GPUs. Please use CudnnRNNParamsWeights and
              CudnnRNNParamsBiases to save and restore them in a way that is compatible
              across different runs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CudnnRNNParamsToCanonical">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; CudnnRNNParamsToCanonical (TensorFlow.TFOutput num_layers, TensorFlow.TFOutput num_units, TensorFlow.TFOutput input_size, TensorFlow.TFOutput parameters, long num_params, string rnn_mode = null, string input_mode = null, string direction = null, Nullable&lt;float&gt; dropout = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; CudnnRNNParamsToCanonical(valuetype TensorFlow.TFOutput num_layers, valuetype TensorFlow.TFOutput num_units, valuetype TensorFlow.TFOutput input_size, valuetype TensorFlow.TFOutput parameters, int64 num_params, string rnn_mode, string input_mode, string direction, valuetype System.Nullable`1&lt;float32&gt; dropout, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_layers" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_units" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_params" Type="System.Int64" />
        <Parameter Name="rnn_mode" Type="System.String" />
        <Parameter Name="input_mode" Type="System.String" />
        <Parameter Name="direction" Type="System.String" />
        <Parameter Name="dropout" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_layers">
        </param>
        <param name="num_units">
        </param>
        <param name="input_size">
        </param>
        <param name="parameters">
        </param>
        <param name="num_params">
        </param>
        <param name="rnn_mode">
              Optional argument
            </param>
        <param name="input_mode">
              Optional argument
            </param>
        <param name="direction">
              Optional argument
            </param>
        <param name="dropout">
              Optional argument
            </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CudnnRNNParamsToCanonical'.
            </param>
        <summary>
              Retrieves CudnnRNN params in canonical form.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              weights:
              biases:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Retrieves a set of weights from the opaque params buffer that can be saved and
              restored in a way compatible with future runs.
              
              Note that the params buffer may not be compatible across different GPUs. So any
              save and restoration should be converted to and from the canonical weights and
              biases.
              
              num_layers: Specifies the number of layers in the RNN model.
              num_units: Specifies the size of the hidden state.
              input_size: Specifies the size of the input state.
              num_params: number of parameter sets for all layers.
              Each layer may contain multiple parameter sets, with each set consisting of
              a weight matrix and a bias vector.
              weights: the canonical form of weights that can be used for saving
              and restoration. They are more likely to be compatible across different
              generations.
              biases: the canonical form of biases that can be used for saving
              and restoration. They are more likely to be compatible across different
              generations.
              rnn_mode: Indicates the type of the RNN model.
              input_mode: Indicate whether there is a linear projection between the input and
              The actual computation before the first layer. 'skip_input' is only allowed
              when input_size == num_units; 'auto_select' implies 'skip_input' when
              input_size == num_units; otherwise, it implies 'linear_input'.
              direction: Indicates whether a bidirectional model will be used.
              dir = (direction == bidirectional) ? 2 : 1
              dropout: dropout probability. When set to 0., dropout is disabled.
              seed: the 1st part of a seed to initialize dropout.
              seed2: the 2nd part of a seed to initialize dropout.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CudnnRNNV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CudnnRNNV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput input_h, TensorFlow.TFOutput input_c, TensorFlow.TFOutput parameters, string rnn_mode = null, string input_mode = null, string direction = null, Nullable&lt;float&gt; dropout = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CudnnRNNV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_h, valuetype TensorFlow.TFOutput input_c, valuetype TensorFlow.TFOutput parameters, string rnn_mode, string input_mode, string direction, valuetype System.Nullable`1&lt;float32&gt; dropout, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_h" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_c" Type="TensorFlow.TFOutput" />
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="rnn_mode" Type="System.String" />
        <Parameter Name="input_mode" Type="System.String" />
        <Parameter Name="direction" Type="System.String" />
        <Parameter Name="dropout" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_h">
        </param>
        <param name="input_c">
        </param>
        <param name="parameters">
        </param>
        <param name="rnn_mode">
              Optional argument
            </param>
        <param name="input_mode">
              Optional argument
            </param>
        <param name="direction">
              Optional argument
            </param>
        <param name="dropout">
              Optional argument
            </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="is_training">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CudnnRNNV2'.
            </param>
        <summary>
              A RNN backed by cuDNN.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              output_h:
              output_c:
              reserve_space:
              host_reserved:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the RNN from the input and initial states, with respect to the params
              buffer. Produces one extra output "host_reserved" than CudnnRNN.
              
              rnn_mode: Indicates the type of the RNN model.
              input_mode: Indicates whether there is a linear projection between the input and
              the actual computation before the first layer. 'skip_input' is only allowed
              when input_size == num_units; 'auto_select' implies 'skip_input' when
              input_size == num_units; otherwise, it implies 'linear_input'.
              direction: Indicates whether a bidirectional model will be used. Should be
              "unidirectional" or "bidirectional".
              dropout: Dropout probability. When set to 0., dropout is disabled.
              seed: The 1st part of a seed to initialize dropout.
              seed2: The 2nd part of a seed to initialize dropout.
              input: A 3-D tensor with the shape of [seq_length, batch_size, input_size].
              input_h: A 3-D tensor with the shape of [num_layer * dir, batch_size,
              num_units].
              input_c: For LSTM, a 3-D tensor with the shape of
              [num_layer * dir, batch, num_units]. For other models, it is ignored.
              params: A 1-D tensor that contains the weights and biases in an opaque layout.
              The size must be created through CudnnRNNParamsSize, and initialized
              separately. Note that they might not be compatible across different
              generations. So it is a good idea to save and restore
              output: A 3-D tensor with the shape of [seq_length, batch_size,
              dir * num_units].
              output_h: The same shape has input_h.
              output_c: The same shape as input_c for LSTM. An empty tensor for other models.
              is_training: Indicates whether this operation is used for inferenece or
              training.
              reserve_space: An opaque tensor that can be used in backprop calculation. It
              is only produced if is_training is true.
              host_reserved: An opaque tensor that can be used in backprop calculation. It is
              only produced if is_training is true. It is output on host memory rather than
              device memory.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cumprod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cumprod (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable&lt;bool&gt; exclusive = null, Nullable&lt;bool&gt; reverse = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cumprod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput axis, valuetype System.Nullable`1&lt;bool&gt; exclusive, valuetype System.Nullable`1&lt;bool&gt; reverse, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="exclusive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="reverse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A <c>Tensor</c>. Must be one of the following types: <c>float32</c>, <c>float64</c>,
              <c>int64</c>, <c>int32</c>, <c>uint8</c>, <c>uint16</c>, <c>int16</c>, <c>int8</c>, <c>complex64</c>,
              <c>complex128</c>, <c>qint8</c>, <c>quint8</c>, <c>qint32</c>, <c>half</c>.
            </param>
        <param name="axis">
              A <c>Tensor</c> of type <c>int32</c> (default: 0). Must be in the range
              <c>[-rank(x), rank(x))</c>.
            </param>
        <param name="exclusive">
              Optional argument
              If <c>True</c>, perform exclusive cumprod.
            </param>
        <param name="reverse">
              Optional argument
              A <c>bool</c> (default: False).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cumprod'.
            </param>
        <summary>
              Compute the cumulative product of the tensor <c>x</c> along <c>axis</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              By default, this op performs an inclusive cumprod, which means that the first
              element of the input is identical to the first element of the output:
              
               <code>
              tf.cumprod([a, b, c])  # =&amp;gt; [a, a * b, a * b * c]
               </code>
              
              By setting the <c>exclusive</c> kwarg to <c>True</c>, an exclusive cumprod is
              performed instead:
              
               <code>
              tf.cumprod([a, b, c], exclusive=True)  # =&amp;gt; [1, a, a * b]
               </code>
              
              By setting the <c>reverse</c> kwarg to <c>True</c>, the cumprod is performed in the
              opposite direction:
              
               <code>
              tf.cumprod([a, b, c], reverse=True)  # =&amp;gt; [a * b * c, b * c, c]
               </code>
              
              This is more efficient than using separate <c>tf.reverse</c> ops.
              
              The <c>reverse</c> and <c>exclusive</c> kwargs can also be combined:
              
               <code>
              tf.cumprod([a, b, c], exclusive=True, reverse=True)  # =&amp;gt; [b * c, c, 1]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cumsum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cumsum (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable&lt;bool&gt; exclusive = null, Nullable&lt;bool&gt; reverse = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cumsum(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput axis, valuetype System.Nullable`1&lt;bool&gt; exclusive, valuetype System.Nullable`1&lt;bool&gt; reverse, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="exclusive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="reverse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A <c>Tensor</c>. Must be one of the following types: <c>float32</c>, <c>float64</c>,
              <c>int64</c>, <c>int32</c>, <c>uint8</c>, <c>uint16</c>, <c>int16</c>, <c>int8</c>, <c>complex64</c>,
              <c>complex128</c>, <c>qint8</c>, <c>quint8</c>, <c>qint32</c>, <c>half</c>.
            </param>
        <param name="axis">
              A <c>Tensor</c> of type <c>int32</c> (default: 0). Must be in the range
              <c>[-rank(x), rank(x))</c>.
            </param>
        <param name="exclusive">
              Optional argument
              If <c>True</c>, perform exclusive cumsum.
            </param>
        <param name="reverse">
              Optional argument
              A <c>bool</c> (default: False).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cumsum'.
            </param>
        <summary>
              Compute the cumulative sum of the tensor <c>x</c> along <c>axis</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              By default, this op performs an inclusive cumsum, which means that the first
              element of the input is identical to the first element of the output:
              
               <code>
              tf.cumsum([a, b, c])  # =&amp;gt; [a, a + b, a + b + c]
               </code>
              
              By setting the <c>exclusive</c> kwarg to <c>True</c>, an exclusive cumsum is
              performed instead:
              
               <code>
              tf.cumsum([a, b, c], exclusive=True)  # =&amp;gt; [0, a, a + b]
               </code>
              
              By setting the <c>reverse</c> kwarg to <c>True</c>, the cumsum is performed in the
              opposite direction:
              
               <code>
              tf.cumsum([a, b, c], reverse=True)  # =&amp;gt; [a + b + c, b + c, c]
               </code>
              
              This is more efficient than using separate <c>tf.reverse</c> ops.
              
              The <c>reverse</c> and <c>exclusive</c> kwargs can also be combined:
              
               <code>
              tf.cumsum([a, b, c], exclusive=True, reverse=True)  # =&amp;gt; [b + c, c, 0]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDependencies">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation[] CurrentDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class TensorFlow.TFOperation[] CurrentDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the current variable dependencies in use. New tensors and operations will be created
            with an added input dependency to the operations specified in this property. To change this, 
            use the WithDependencies method.
            </summary>
        <value>The current input dependencies to be used for new tensors and operations.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentNameScope">
      <MemberSignature Language="C#" Value="public string CurrentNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the current name scope in use, to change this, use the WithScope method.
            </summary>
        <value>The current name scope.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataFormatDimMap">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DataFormatDimMap (TensorFlow.TFOutput x, string src_format = null, string dst_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DataFormatDimMap(valuetype TensorFlow.TFOutput x, string src_format, string dst_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="src_format" Type="System.String" />
        <Parameter Name="dst_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A Tensor with each element as a dimension index in source data format.
              Must be in the range [-4, 4).
            </param>
        <param name="src_format">
              Optional argument
              source data format.
            </param>
        <param name="dst_format">
              Optional argument
              destination data format.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DataFormatDimMap'.
            </param>
        <summary>
              Returns the dimension index in the destination data format given the one in
            </summary>
        <returns>
              A Tensor with each element as a dimension index in destination data format.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              the source data format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataFormatVecPermute">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DataFormatVecPermute (TensorFlow.TFOutput x, string src_format = null, string dst_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DataFormatVecPermute(valuetype TensorFlow.TFOutput x, string src_format, string dst_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="src_format" Type="System.String" />
        <Parameter Name="dst_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              Vector of size 4 or Tensor of shape (4, 2) in source data format.
            </param>
        <param name="src_format">
              Optional argument
              source data format.
            </param>
        <param name="dst_format">
              Optional argument
              destination data format.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DataFormatVecPermute'.
            </param>
        <summary>
              Returns the permuted vector/tensor in the destination data format given the
            </summary>
        <returns>
              Vector of size 4 or Tensor of shape (4, 2) in destination data format.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              one in the source data format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DatasetToGraph">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DatasetToGraph (TensorFlow.TFOutput input_dataset, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DatasetToGraph(valuetype TensorFlow.TFOutput input_dataset, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
              A variant tensor representing the dataset to return the graph representation for.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DatasetToGraph'.
            </param>
        <summary>
              Returns a serialized GraphDef representing <c>input_dataset</c>.
            </summary>
        <returns>
              The graph representation of the dataset (as serialized GraphDef).
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns a graph representation for <c>input_dataset</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DatasetToSingleElement">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] DatasetToSingleElement (TensorFlow.TFOutput dataset, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] DatasetToSingleElement(valuetype TensorFlow.TFOutput dataset, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataset">
              A handle to a dataset that contains a single element.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DatasetToSingleElement'.
            </param>
        <summary>
              Outputs the single element from the given dataset.
            </summary>
        <returns>
              The components of the single element of <c>input</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugGradientIdentity">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DebugGradientIdentity (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DebugGradientIdentity(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DebugGradientIdentity'.
            </param>
        <summary>
              Identity op for gradient debugging.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is hidden from public in Python. It is used by TensorFlow Debugger to
              register gradient tensors for gradient debugging.
              This op operates on non-reference-type tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugGradientRefIdentity">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DebugGradientRefIdentity (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DebugGradientRefIdentity(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DebugGradientRefIdentity'.
            </param>
        <summary>
              Identity op for gradient debugging.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is hidden from public in Python. It is used by TensorFlow Debugger to
              register gradient tensors for gradient debugging.
              This op operates on reference-type tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugIdentity">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DebugIdentity (TensorFlow.TFOutput input, string device_name = null, string tensor_name = null, string[] debug_urls = null, Nullable&lt;bool&gt; gated_grpc = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DebugIdentity(valuetype TensorFlow.TFOutput input, string device_name, string tensor_name, string[] debug_urls, valuetype System.Nullable`1&lt;bool&gt; gated_grpc, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="device_name" Type="System.String" />
        <Parameter Name="tensor_name" Type="System.String" />
        <Parameter Name="debug_urls" Type="System.String[]" />
        <Parameter Name="gated_grpc" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Input tensor, non-Reference type.
            </param>
        <param name="device_name">
              Optional argument
            </param>
        <param name="tensor_name">
              Optional argument
              Name of the input tensor.
            </param>
        <param name="debug_urls">
              Optional argument
              List of URLs to debug targets, e.g.,
              file:///foo/tfdbg_dump, grpc:://localhost:11011
            </param>
        <param name="gated_grpc">
              Optional argument
              Whether this op will be gated. If any of the debug_urls of this
              debug node is of the grpc:// scheme, when the value of this attribute is set
              to True, the data will not actually be sent via the grpc stream unless this
              debug op has been enabled at the debug_url. If all of the debug_urls of this
              debug node are of the grpc:// scheme and the debug op is enabled at none of
              them, the output will be an empty Tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DebugIdentity'.
            </param>
        <summary>
              Debug Identity Op.
            </summary>
        <returns>
              Output tensor that equals the input tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Provides an identity mapping of the non-Ref type input tensor for debugging.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugNanCount">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DebugNanCount (TensorFlow.TFOutput input, string device_name = null, string tensor_name = null, string[] debug_urls = null, Nullable&lt;bool&gt; gated_grpc = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DebugNanCount(valuetype TensorFlow.TFOutput input, string device_name, string tensor_name, string[] debug_urls, valuetype System.Nullable`1&lt;bool&gt; gated_grpc, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="device_name" Type="System.String" />
        <Parameter Name="tensor_name" Type="System.String" />
        <Parameter Name="debug_urls" Type="System.String[]" />
        <Parameter Name="gated_grpc" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Input tensor, non-Reference type.
            </param>
        <param name="device_name">
              Optional argument
            </param>
        <param name="tensor_name">
              Optional argument
              Name of the input tensor.
            </param>
        <param name="debug_urls">
              Optional argument
              List of URLs to debug targets, e.g.,
              file:///foo/tfdbg_dump, grpc:://localhost:11011.
            </param>
        <param name="gated_grpc">
              Optional argument
              Whether this op will be gated. If any of the debug_urls of this
              debug node is of the grpc:// scheme, when the value of this attribute is set
              to True, the data will not actually be sent via the grpc stream unless this
              debug op has been enabled at the debug_url. If all of the debug_urls of this
              debug node are of the grpc:// scheme and the debug op is enabled at none of
              them, the output will be an empty Tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DebugNanCount'.
            </param>
        <summary>
              Debug NaN Value Counter Op
            </summary>
        <returns>
              An integer output tensor that is the number of NaNs in the input.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Counts number of NaNs in the input tensor, for debugging.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugNumericSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DebugNumericSummary (TensorFlow.TFOutput input, string device_name = null, string tensor_name = null, string[] debug_urls = null, Nullable&lt;float&gt; lower_bound = null, Nullable&lt;float&gt; upper_bound = null, Nullable&lt;bool&gt; mute_if_healthy = null, Nullable&lt;bool&gt; gated_grpc = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DebugNumericSummary(valuetype TensorFlow.TFOutput input, string device_name, string tensor_name, string[] debug_urls, valuetype System.Nullable`1&lt;float32&gt; lower_bound, valuetype System.Nullable`1&lt;float32&gt; upper_bound, valuetype System.Nullable`1&lt;bool&gt; mute_if_healthy, valuetype System.Nullable`1&lt;bool&gt; gated_grpc, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="device_name" Type="System.String" />
        <Parameter Name="tensor_name" Type="System.String" />
        <Parameter Name="debug_urls" Type="System.String[]" />
        <Parameter Name="lower_bound" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="upper_bound" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="mute_if_healthy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="gated_grpc" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Input tensor, non-Reference type, float or double.
            </param>
        <param name="device_name">
              Optional argument
            </param>
        <param name="tensor_name">
              Optional argument
              Name of the input tensor.
            </param>
        <param name="debug_urls">
              Optional argument
              List of URLs to debug targets, e.g.,
              file:///foo/tfdbg_dump, grpc:://localhost:11011
            </param>
        <param name="lower_bound">
              Optional argument
              (float) The lower bound &amp;lt;= which values will be included in the
              generalized -inf count. Default: -inf.
            </param>
        <param name="upper_bound">
              Optional argument
              (float) The upper bound &amp;gt;= which values will be included in the
              generalized +inf count. Default: +inf.
            </param>
        <param name="mute_if_healthy">
              Optional argument
              (bool) Do not send data to the debug URLs unless at least one
              of elements [2], [3] and [7] (i.e., the nan count and the generalized -inf and
              inf counts) is non-zero.
            </param>
        <param name="gated_grpc">
              Optional argument
              Whether this op will be gated. If any of the debug_urls of this
              debug node is of the grpc:// scheme, when the value of this attribute is set
              to True, the data will not actually be sent via the grpc stream unless this
              debug op has been enabled at the debug_url. If all of the debug_urls of this
              debug node are of the grpc:// scheme and the debug op is enabled at none of
              them, the output will be an empty Tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DebugNumericSummary'.
            </param>
        <summary>
              Debug Numeric Summary Op.
            </summary>
        <returns>
              A double tensor of shape [14 + nDimensions], where nDimensions is the
              the number of dimensions of the tensor's shape. The elements of output are:
              [0]: is initialized (1.0) or not (0.0).
              [1]: total number of elements
              [2]: NaN element count
              [3]: generalized -inf count: elements &amp;lt;= lower_bound. lower_bound is -inf by
              default.
              [4]: negative element count (excluding -inf), if lower_bound is the default
              -inf. Otherwise, this is the count of elements &amp;gt; lower_bound and &amp;lt; 0.
              [5]: zero element count
              [6]: positive element count (excluding +inf), if upper_bound is the default
              -inf. Otherwise, this is the count of elements &amp;lt; upper_bound and &amp;gt; 0.
              [7]: generalized +inf count, elements &amp;gt;= upper_bound. upper_bound is +inf by
              default.
              Output elements [1:8] are all zero, if the tensor is uninitialized.
              [8]: minimum of all non-inf and non-NaN elements.
              If uninitialized or no such element exists: +inf.
              [9]: maximum of all non-inf and non-NaN elements.
              If uninitialized or no such element exists: -inf.
              [10]: mean of all non-inf and non-NaN elements.
              If uninitialized or no such element exists: NaN.
              [11]: variance of all non-inf and non-NaN elements.
              If uninitialized or no such element exists: NaN.
              [12]: Data type of the tensor encoded as an enum integer. See the DataType
              proto for more details.
              [13]: Number of dimensions of the tensor (ndims).
              [14+]: Sizes of the dimensions.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Provide a basic summary of numeric value types, range and distribution.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeAndCropJpeg">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeAndCropJpeg (TensorFlow.TFOutput contents, TensorFlow.TFOutput crop_window, Nullable&lt;long&gt; channels = null, Nullable&lt;long&gt; ratio = null, Nullable&lt;bool&gt; fancy_upscaling = null, Nullable&lt;bool&gt; try_recover_truncated = null, Nullable&lt;float&gt; acceptable_fraction = null, string dct_method = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeAndCropJpeg(valuetype TensorFlow.TFOutput contents, valuetype TensorFlow.TFOutput crop_window, valuetype System.Nullable`1&lt;int64&gt; channels, valuetype System.Nullable`1&lt;int64&gt; ratio, valuetype System.Nullable`1&lt;bool&gt; fancy_upscaling, valuetype System.Nullable`1&lt;bool&gt; try_recover_truncated, valuetype System.Nullable`1&lt;float32&gt; acceptable_fraction, string dct_method, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="crop_window" Type="TensorFlow.TFOutput" />
        <Parameter Name="channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ratio" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="fancy_upscaling" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="try_recover_truncated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="acceptable_fraction" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="dct_method" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The JPEG-encoded image.
            </param>
        <param name="crop_window">
              1-D.  The crop window: [crop_y, crop_x, crop_height, crop_width].
            </param>
        <param name="channels">
              Optional argument
              Number of color channels for the decoded image.
            </param>
        <param name="ratio">
              Optional argument
              Downscaling ratio.
            </param>
        <param name="fancy_upscaling">
              Optional argument
              If true use a slower but nicer upscaling of the
              chroma planes (yuv420/422 only).
            </param>
        <param name="try_recover_truncated">
              Optional argument
              If true try to recover an image from truncated input.
            </param>
        <param name="acceptable_fraction">
              Optional argument
              The minimum required fraction of lines before a truncated
              input is accepted.
            </param>
        <param name="dct_method">
              Optional argument
              string specifying a hint about the algorithm used for
              decompression.  Defaults to "" which maps to a system-specific
              default.  Currently valid values are ["INTEGER_FAST",
              "INTEGER_ACCURATE"].  The hint may be ignored (e.g., the internal
              jpeg library changes to a version that does not have that specific
              option.)
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeAndCropJpeg'.
            </param>
        <summary>
              Decode and Crop a JPEG-encoded image to a uint8 tensor.
            </summary>
        <returns>
              3-D with shape <c>[height, width, channels]</c>..
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The attr <c>channels</c> indicates the desired number of color channels for the
              decoded image.
              
              Accepted values are:
              
              *   0: Use the number of channels in the JPEG-encoded image.
              *   1: output a grayscale image.
              *   3: output an RGB image.
              
              If needed, the JPEG-encoded image is transformed to match the requested number
              of color channels.
              
              The attr <c>ratio</c> allows downscaling the image by an integer factor during
              decoding.  Allowed values are: 1, 2, 4, and 8.  This is much faster than
              downscaling the image later.
              
              
              It is equivalent to a combination of decode and crop, but much faster by only
              decoding partial jpeg image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeBase64">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeBase64 (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeBase64(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Base64 strings to decode.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeBase64'.
            </param>
        <summary>
              Decode web-safe base64-encoded strings.
            </summary>
        <returns>
              Decoded strings.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input may or may not have padding at the end. See EncodeBase64 for padding.
              Web-safe means that input must use - and _ instead of + and /.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeBmp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeBmp (TensorFlow.TFOutput contents, Nullable&lt;long&gt; channels = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeBmp(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; channels, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The BMP-encoded image.
            </param>
        <param name="channels">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeBmp'.
            </param>
        <summary>
              Decode the first frame of a BMP-encoded image to a uint8 tensor.
            </summary>
        <returns>
              3-D with shape <c>[height, width, channels]</c>. RGB order
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The attr <c>channels</c> indicates the desired number of color channels for the
              decoded image.
              
              Accepted values are:
              
              *   0: Use the number of channels in the BMP-encoded image.
              *   3: output an RGB image.
              *   4: output an RGBA image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeCompressed">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeCompressed (TensorFlow.TFOutput bytes, string compression_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeCompressed(valuetype TensorFlow.TFOutput bytes, string compression_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="compression_type" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bytes">
              A Tensor of string which is compressed.
            </param>
        <param name="compression_type">
              Optional argument
              A scalar containing either (i) the empty string (no
              compression), (ii) "ZLIB", or (iii) "GZIP".
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeCompressed'.
            </param>
        <summary>
              Decompress strings.
            </summary>
        <returns>
              A Tensor with the same shape as input <c>bytes</c>, uncompressed
              from bytes.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op decompresses each element of the <c>bytes</c> input <c>Tensor</c>, which
              is assumed to be compressed using the given <c>compression_type</c>.
              
              The <c>output</c> is a string <c>Tensor</c> of the same shape as <c>bytes</c>,
              each element containing the decompressed data from the corresponding
              element in <c>bytes</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeCSV">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] DecodeCSV (TensorFlow.TFOutput records, TensorFlow.TFOutput[] record_defaults, string field_delim = null, Nullable&lt;bool&gt; use_quote_delim = null, string na_value = null, long[] select_cols = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] DecodeCSV(valuetype TensorFlow.TFOutput records, valuetype TensorFlow.TFOutput[] record_defaults, string field_delim, valuetype System.Nullable`1&lt;bool&gt; use_quote_delim, string na_value, int64[] select_cols, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="records" Type="TensorFlow.TFOutput" />
        <Parameter Name="record_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="field_delim" Type="System.String" />
        <Parameter Name="use_quote_delim" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="na_value" Type="System.String" />
        <Parameter Name="select_cols" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="records">
              Each string is a record/row in the csv and all records should have
              the same format.
            </param>
        <param name="record_defaults">
              One tensor per column of the input record, with either a
              scalar default value for that column or an empty vector if the column is
              required.
            </param>
        <param name="field_delim">
              Optional argument
              char delimiter to separate fields in a record.
            </param>
        <param name="use_quote_delim">
              Optional argument
              If false, treats double quotation marks as regular
              characters inside of the string fields (ignoring RFC 4180, Section 2,
              Bullet 5).
            </param>
        <param name="na_value">
              Optional argument
              Additional string to recognize as NA/NaN.
            </param>
        <param name="select_cols">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeCSV'.
            </param>
        <summary>
              Convert CSV records to tensors. Each column maps to one tensor.
            </summary>
        <returns>
              Each tensor will have the same shape as records.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              RFC 4180 format is expected for the CSV records.
              (https://tools.ietf.org/html/rfc4180)
              Note that we allow leading and trailing spaces with int or float field.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeGif">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeGif (TensorFlow.TFOutput contents, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeGif(valuetype TensorFlow.TFOutput contents, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The GIF-encoded image.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeGif'.
            </param>
        <summary>
              Decode the first frame of a GIF-encoded image to a uint8 tensor.
            </summary>
        <returns>
              4-D with shape <c>[num_frames, height, width, 3]</c>. RGB order
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              GIF with frame or transparency compression are not supported
              convert animated GIF from compressed to uncompressed by:
              
              convert $src.gif -coalesce $dst.gif
              
              This op also supports decoding JPEGs and PNGs, though it is cleaner to use
              <c>tf.image.decode_image</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeJpeg">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeJpeg (TensorFlow.TFOutput contents, Nullable&lt;long&gt; channels = null, Nullable&lt;long&gt; ratio = null, Nullable&lt;bool&gt; fancy_upscaling = null, Nullable&lt;bool&gt; try_recover_truncated = null, Nullable&lt;float&gt; acceptable_fraction = null, string dct_method = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeJpeg(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; channels, valuetype System.Nullable`1&lt;int64&gt; ratio, valuetype System.Nullable`1&lt;bool&gt; fancy_upscaling, valuetype System.Nullable`1&lt;bool&gt; try_recover_truncated, valuetype System.Nullable`1&lt;float32&gt; acceptable_fraction, string dct_method, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ratio" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="fancy_upscaling" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="try_recover_truncated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="acceptable_fraction" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="dct_method" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The JPEG-encoded image.
            </param>
        <param name="channels">
              Optional argument
              Number of color channels for the decoded image.
            </param>
        <param name="ratio">
              Optional argument
              Downscaling ratio.
            </param>
        <param name="fancy_upscaling">
              Optional argument
              If true use a slower but nicer upscaling of the
              chroma planes (yuv420/422 only).
            </param>
        <param name="try_recover_truncated">
              Optional argument
              If true try to recover an image from truncated input.
            </param>
        <param name="acceptable_fraction">
              Optional argument
              The minimum required fraction of lines before a truncated
              input is accepted.
            </param>
        <param name="dct_method">
              Optional argument
              string specifying a hint about the algorithm used for
              decompression.  Defaults to "" which maps to a system-specific
              default.  Currently valid values are ["INTEGER_FAST",
              "INTEGER_ACCURATE"].  The hint may be ignored (e.g., the internal
              jpeg library changes to a version that does not have that specific
              option.)
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeJpeg'.
            </param>
        <summary>
              Decode a JPEG-encoded image to a uint8 tensor.
            </summary>
        <returns>
              3-D with shape <c>[height, width, channels]</c>..
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The attr <c>channels</c> indicates the desired number of color channels for the
              decoded image.
              
              Accepted values are:
              
              *   0: Use the number of channels in the JPEG-encoded image.
              *   1: output a grayscale image.
              *   3: output an RGB image.
              
              If needed, the JPEG-encoded image is transformed to match the requested number
              of color channels.
              
              The attr <c>ratio</c> allows downscaling the image by an integer factor during
              decoding.  Allowed values are: 1, 2, 4, and 8.  This is much faster than
              downscaling the image later.
              
              
              This op also supports decoding PNGs and non-animated GIFs since the interface is
              the same, though it is cleaner to use <c>tf.image.decode_image</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeJSONExample">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeJSONExample (TensorFlow.TFOutput json_examples, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeJSONExample(valuetype TensorFlow.TFOutput json_examples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json_examples" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="json_examples">
              Each string is a JSON object serialized according to the JSON
              mapping of the Example proto.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeJSONExample'.
            </param>
        <summary>
              Convert JSON-encoded Example records to binary protocol buffer strings.
            </summary>
        <returns>
              Each string is a binary Example protocol buffer corresponding
              to the respective element of <c>json_examples</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op translates a tensor containing Example records, encoded using
              the [standard JSON
              mapping](https://developers.google.com/protocol-buffers/docs/proto3#json),
              into a tensor containing the same records encoded as binary protocol
              buffers. The resulting tensor can then be fed to any of the other
              Example-parsing ops.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodePng">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodePng (TensorFlow.TFOutput contents, Nullable&lt;long&gt; channels = null, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodePng(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; channels, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The PNG-encoded image.
            </param>
        <param name="channels">
              Optional argument
              Number of color channels for the decoded image.
            </param>
        <param name="dtype">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodePng'.
            </param>
        <summary>
              Decode a PNG-encoded image to a uint8 or uint16 tensor.
            </summary>
        <returns>
              3-D with shape <c>[height, width, channels]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The attr <c>channels</c> indicates the desired number of color channels for the
              decoded image.
              
              Accepted values are:
              
              *   0: Use the number of channels in the PNG-encoded image.
              *   1: output a grayscale image.
              *   3: output an RGB image.
              *   4: output an RGBA image.
              
              If needed, the PNG-encoded image is transformed to match the requested number
              of color channels.
              
              This op also supports decoding JPEGs and non-animated GIFs since the interface
              is the same, though it is cleaner to use <c>tf.image.decode_image</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeProtoV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt; DecodeProtoV2 (TensorFlow.TFOutput bytes, string message_type, string[] field_names, TensorFlow.TFDataType[] output_types, string descriptor_source = null, string message_format = null, Nullable&lt;bool&gt; sanitize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[]&gt; DecodeProtoV2(valuetype TensorFlow.TFOutput bytes, string message_type, string[] field_names, valuetype TensorFlow.TFDataType[] output_types, string descriptor_source, string message_format, valuetype System.Nullable`1&lt;bool&gt; sanitize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="message_type" Type="System.String" />
        <Parameter Name="field_names" Type="System.String[]" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="descriptor_source" Type="System.String" />
        <Parameter Name="message_format" Type="System.String" />
        <Parameter Name="sanitize" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bytes">
              Tensor of serialized protos with shape <c>batch_shape</c>.
            </param>
        <param name="message_type">
              Name of the proto message type to decode.
            </param>
        <param name="field_names">
              List of strings containing proto field names.
            </param>
        <param name="output_types">
              List of TF types to use for the respective field in field_names.
            </param>
        <param name="descriptor_source">
              Optional argument
              Either the special value <c>local://</c> or a path to a file containing
              a serialized <c>FileDescriptorSet</c>.
            </param>
        <param name="message_format">
              Optional argument
              Either <c>binary</c> or <c>text</c>.
            </param>
        <param name="sanitize">
              Optional argument
              Whether to sanitize the result or not.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeProtoV2'.
            </param>
        <summary>
              The op extracts fields from a serialized protocol buffers message into tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sizes: Tensor of int32 with shape <c>[batch_shape, len(field_names)]</c>.
              Each entry is the number of values found for the corresponding field.
              Optional fields may have 0 or 1 values.
              values: List of tensors containing values for the corresponding field.
              <c>values[i]</c> has datatype <c>output_types[i]</c>
              and shape <c>[batch_shape, max(sizes[...,i])]</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The <c>decode_proto</c> op extracts fields from a serialized protocol buffers
              message into tensors.  The fields in <c>field_names</c> are decoded and converted
              to the corresponding <c>output_types</c> if possible.
              
              A <c>message_type</c> name must be provided to give context for the field
              names. The actual message descriptor can be looked up either in the
              linked-in descriptor pool or a filename provided by the caller using
              the <c>descriptor_source</c> attribute.
              
              Each output tensor is a dense tensor. This means that it is padded to
              hold the largest number of repeated elements seen in the input
              minibatch. (The shape is also padded by one to prevent zero-sized
              dimensions). The actual repeat counts for each example in the
              minibatch can be found in the <c>sizes</c> output. In many cases the output
              of <c>decode_proto</c> is fed immediately into tf.squeeze if missing values
              are not a concern. When using tf.squeeze, always pass the squeeze
              dimension explicitly to avoid surprises.
              
              For the most part, the mapping between Proto field types and
              TensorFlow dtypes is straightforward. However, there are a few
              special cases:
              
              - A proto field that contains a submessage or group can only be converted
              to <c>DT_STRING</c> (the serialized submessage). This is to reduce the
              complexity of the API. The resulting string can be used as input
              to another instance of the decode_proto op.
              
              - TensorFlow lacks support for unsigned integers. The ops represent uint64
              types as a <c>DT_INT64</c> with the same twos-complement bit pattern
              (the obvious way). Unsigned int32 values can be represented exactly by
              specifying type <c>DT_INT64</c>, or using twos-complement if the caller
              specifies <c>DT_INT32</c> in the <c>output_types</c> attribute.
              
              The <c>descriptor_source</c> attribute selects a source of protocol
              descriptors to consult when looking up <c>message_type</c>. This may be a
              filename containing a serialized <c>FileDescriptorSet</c> message,
              or the special value <c>local://</c>, in which case only descriptors linked
              into the code will be searched; the filename can be on any filesystem
              accessible to TensorFlow.
              
              You can build a <c>descriptor_source</c> file using the <c>--descriptor_set_out</c>
              and <c>--include_imports</c> options to the protocol compiler <c>protoc</c>.
              
              The <c>local://</c> database only covers descriptors linked into the
              code via C++ libraries, not Python imports. You can link in a proto descriptor
              by creating a cc_library target with alwayslink=1.
              
              Both binary and text proto serializations are supported, and can be
              chosen using the <c>format</c> attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeRaw">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeRaw (TensorFlow.TFOutput bytes, TensorFlow.TFDataType out_type, Nullable&lt;bool&gt; little_endian = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeRaw(valuetype TensorFlow.TFOutput bytes, valuetype TensorFlow.TFDataType out_type, valuetype System.Nullable`1&lt;bool&gt; little_endian, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="little_endian" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bytes">
              All the elements must have the same length.
            </param>
        <param name="out_type">
        </param>
        <param name="little_endian">
              Optional argument
              Whether the input <c>bytes</c> are in little-endian order.
              Ignored for <c>out_type</c> values that are stored in a single byte like
              <c>uint8</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeRaw'.
            </param>
        <summary>
              Reinterpret the bytes of a string as a vector of numbers.
            </summary>
        <returns>
              A Tensor with one more dimension than the input <c>bytes</c>.  The
              added dimension will have size equal to the length of the elements
              of <c>bytes</c> divided by the number of bytes to represent <c>out_type</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeWav">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DecodeWav (TensorFlow.TFOutput contents, Nullable&lt;long&gt; desired_channels = null, Nullable&lt;long&gt; desired_samples = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DecodeWav(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; desired_channels, valuetype System.Nullable`1&lt;int64&gt; desired_samples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="desired_channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="desired_samples" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              The WAV-encoded audio, usually from a file.
            </param>
        <param name="desired_channels">
              Optional argument
              Number of sample channels wanted.
            </param>
        <param name="desired_samples">
              Optional argument
              Length of audio requested.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeWav'.
            </param>
        <summary>
              Decode a 16-bit PCM WAV file to a float tensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              audio: 2-D with shape <c>[length, channels]</c>.
              sample_rate: Scalar holding the sample rate found in the WAV header.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The -32768 to 32767 signed 16-bit values will be scaled to -1.0 to 1.0 in float.
              
              When desired_channels is set, if the input contains fewer channels than this
              then the last channel will be duplicated to give the requested number, else if
              the input has more channels than requested then the additional channels will be
              ignored.
              
              If desired_samples is set, then the audio will be cropped or padded with zeroes
              to the requested length.
              
              The first output contains a Tensor with the content of the audio samples. The
              lowest dimension will be the number of channels, and the second will be the
              number of samples. For example, a ten-sample-long stereo WAV file should give an
              output shape of [10, 2].
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeepCopy">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DeepCopy (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DeepCopy(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              The source tensor of type <c>T</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DeepCopy'.
            </param>
        <summary>
              Makes a copy of <c>x</c>.
            </summary>
        <returns>
              y: A <c>Tensor</c> of type <c>T</c>. A copy of <c>x</c>. Guaranteed that <c>y</c>
              is not an alias of <c>x</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSessionTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation DeleteSessionTensor (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation DeleteSessionTensor(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle for a tensor stored in the session state.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DeleteSessionTensor'.
            </param>
        <summary>
              Delete the tensor specified by its handle in the session.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DenseToDenseSetOperation">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DenseToDenseSetOperation (TensorFlow.TFOutput set1, TensorFlow.TFOutput set2, string set_operation, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DenseToDenseSetOperation(valuetype TensorFlow.TFOutput set1, valuetype TensorFlow.TFOutput set2, string set_operation, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_operation" Type="System.String" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set1">
          <c>Tensor</c> with rank <c>n</c>. 1st <c>n-1</c> dimensions must be the same as <c>set2</c>.
              Dimension <c>n</c> contains values in a set, duplicates are allowed but ignored.
            </param>
        <param name="set2">
          <c>Tensor</c> with rank <c>n</c>. 1st <c>n-1</c> dimensions must be the same as <c>set1</c>.
              Dimension <c>n</c> contains values in a set, duplicates are allowed but ignored.
            </param>
        <param name="set_operation">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToDenseSetOperation'.
            </param>
        <summary>
              Applies set operation along last dimension of 2 <c>Tensor</c> inputs.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result_indices: 2D indices of a <c>SparseTensor</c>.
              result_values: 1D values of a <c>SparseTensor</c>.
              result_shape: 1D <c>Tensor</c> shape of a <c>SparseTensor</c>. <c>result_shape[0...n-1]</c> is
              the same as the 1st <c>n-1</c> dimensions of <c>set1</c> and <c>set2</c>, <c>result_shape[n]</c>
              is the max result set size across all <c>0...n-1</c> dimensions.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See SetOperationOp::SetOperationFromContext for values of <c>set_operation</c>.
              
              Output <c>result</c> is a <c>SparseTensor</c> represented by <c>result_indices</c>,
              <c>result_values</c>, and <c>result_shape</c>. For <c>set1</c> and <c>set2</c> ranked <c>n</c>, this
              has rank <c>n</c> and the same 1st <c>n-1</c> dimensions as <c>set1</c> and <c>set2</c>. The <c>nth</c>
              dimension contains the result of <c>set_operation</c> applied to the corresponding
              <c>[0...n-1]</c> dimension of <c>set</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DenseToSparseSetOperation">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DenseToSparseSetOperation (TensorFlow.TFOutput set1, TensorFlow.TFOutput set2_indices, TensorFlow.TFOutput set2_values, TensorFlow.TFOutput set2_shape, string set_operation, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DenseToSparseSetOperation(valuetype TensorFlow.TFOutput set1, valuetype TensorFlow.TFOutput set2_indices, valuetype TensorFlow.TFOutput set2_values, valuetype TensorFlow.TFOutput set2_shape, string set_operation, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_operation" Type="System.String" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set1">
          <c>Tensor</c> with rank <c>n</c>. 1st <c>n-1</c> dimensions must be the same as <c>set2</c>.
              Dimension <c>n</c> contains values in a set, duplicates are allowed but ignored.
            </param>
        <param name="set2_indices">
              2D <c>Tensor</c>, indices of a <c>SparseTensor</c>. Must be in row-major
              order.
            </param>
        <param name="set2_values">
              1D <c>Tensor</c>, values of a <c>SparseTensor</c>. Must be in row-major
              order.
            </param>
        <param name="set2_shape">
              1D <c>Tensor</c>, shape of a <c>SparseTensor</c>. <c>set2_shape[0...n-1]</c> must
              be the same as the 1st <c>n-1</c> dimensions of <c>set1</c>, <c>result_shape[n]</c> is the
              max set size across <c>n-1</c> dimensions.
            </param>
        <param name="set_operation">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToSparseSetOperation'.
            </param>
        <summary>
              Applies set operation along last dimension of <c>Tensor</c> and <c>SparseTensor</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result_indices: 2D indices of a <c>SparseTensor</c>.
              result_values: 1D values of a <c>SparseTensor</c>.
              result_shape: 1D <c>Tensor</c> shape of a <c>SparseTensor</c>. <c>result_shape[0...n-1]</c> is
              the same as the 1st <c>n-1</c> dimensions of <c>set1</c> and <c>set2</c>, <c>result_shape[n]</c>
              is the max result set size across all <c>0...n-1</c> dimensions.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See SetOperationOp::SetOperationFromContext for values of <c>set_operation</c>.
              
              Input <c>set2</c> is a <c>SparseTensor</c> represented by <c>set2_indices</c>, <c>set2_values</c>,
              and <c>set2_shape</c>. For <c>set2</c> ranked <c>n</c>, 1st <c>n-1</c> dimensions must be the same
              as <c>set1</c>. Dimension <c>n</c> contains values in a set, duplicates are allowed but
              ignored.
              
              If <c>validate_indices</c> is <c>True</c>, this op validates the order and range of <c>set2</c>
              indices.
              
              Output <c>result</c> is a <c>SparseTensor</c> represented by <c>result_indices</c>,
              <c>result_values</c>, and <c>result_shape</c>. For <c>set1</c> and <c>set2</c> ranked <c>n</c>, this
              has rank <c>n</c> and the same 1st <c>n-1</c> dimensions as <c>set1</c> and <c>set2</c>. The <c>nth</c>
              dimension contains the result of <c>set_operation</c> applied to the corresponding
              <c>[0...n-1]</c> dimension of <c>set</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthToSpace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthToSpace (TensorFlow.TFOutput input, long block_size, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthToSpace(valuetype TensorFlow.TFOutput input, int64 block_size, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="block_size">
              The size of the spatial block, same as in Space2Depth.
            </param>
        <param name="data_format">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthToSpace'.
            </param>
        <summary>
              DepthToSpace for tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Rearranges data from depth into blocks of spatial data.
              This is the reverse transformation of SpaceToDepth. More specifically,
              this op outputs a copy of the input tensor where values from the <c>depth</c>
              dimension are moved in spatial blocks to the <c>height</c> and <c>width</c> dimensions.
              The attr <c>block_size</c> indicates the input block size and how the data is moved.
              
              * Chunks of data of size <c>block_size * block_size</c> from depth are rearranged
              into non-overlapping blocks of size <c>block_size x block_size</c>
              * The width the output tensor is <c>input_depth * block_size</c>, whereas the
              height is <c>input_height * block_size</c>.
              * The Y, X coordinates within each block of the output image are determined
              by the high order component of the input channel index.
              * The depth of the input tensor must be divisible by
              <c>block_size * block_size</c>.
              
              The <c>data_format</c> attr specifies the layout of the input and output tensors
              with the following options:
              "NHWC": <c>[ batch, height, width, channels ]</c>
              "NCHW": <c>[ batch, channels, height, width ]</c>
              "NCHW_VECT_C":
              <c>qint8 [ batch, channels / 4, height, width, 4 ]</c>
              
              It is useful to consider the operation as transforming a 6-D Tensor.
              e.g. for data_format = NHWC,
              Each element in the input tensor can be specified via 6 coordinates,
              ordered by decreasing memory layout significance as:
              n,iY,iX,bY,bX,oC  (where n=batch index, iX, iY means X or Y coordinates
              within the input image, bX, bY means coordinates
              within the output block, oC means output channels).
              The output would be the input transposed to the following layout:
              n,iY,bY,iX,bX,oC
              
              This operation is useful for resizing the activations between convolutions
              (but keeping all data), e.g. instead of pooling. It is also useful for training
              purely convolutional models.
              
              For example, given an input of shape <c>[1, 1, 1, 4]</c>, data_format = "NHWC" and
              block_size = 2:
              
               <code>
              x = [[[[1, 2, 3, 4]]]]
              
               </code>
              
              This operation will output a tensor of shape <c>[1, 2, 2, 1]</c>:
              
               <code>
              [[[[1], [2]],
              [[3], [4]]]]
               </code>
              
              Here, the input has a batch of 1 and each batch element has shape <c>[1, 1, 4]</c>,
              the corresponding output will have 2x2 elements and will have a depth of
              1 channel (1 = <c>4 / (block_size * block_size)</c>).
              The output element shape is <c>[2, 2, 1]</c>.
              
              For an input tensor with larger depth, here of shape <c>[1, 1, 1, 12]</c>, e.g.
              
               <code>
              x = [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]
               </code>
              
              This operation, for block size of 2, will return the following tensor of shape
              <c>[1, 2, 2, 3]</c><code>
              [[[[1, 2, 3], [4, 5, 6]],
              [[7, 8, 9], [10, 11, 12]]]]
              
               </code>
              
              Similarly, for the following input of shape <c>[1 2 2 4]</c>, and a block size of 2:
              
               <code>
              x =  [[[[1, 2, 3, 4],
              [5, 6, 7, 8]],
              [[9, 10, 11, 12],
              [13, 14, 15, 16]]]]
               </code>
              
              the operator will return the following tensor of shape <c>[1 4 4 1]</c>:
              
               <code>
              x = [[[ [1],   [2],  [5],  [6]],
              [ [3],   [4],  [7],  [8]],
              [ [9],  [10], [13],  [14]],
              [ [11], [12], [15],  [16]]]]
              
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthwiseConv2dNative">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthwiseConv2dNative (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthwiseConv2dNative(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, string padding, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="filter">
        </param>
        <param name="strides">
              1-D of length 4.  The stride of the sliding window for each dimension
              of <c>input</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, channels, height, width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 4.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each filter
              element on that dimension. The dimension order is determined by the value of
              <c>data_format</c>, see above for details. Dilations in the batch and depth
              dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNative'.
            </param>
        <summary>
              Computes a 2-D depthwise convolution given 4-D <c>input</c> and <c>filter</c> tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given an input tensor of shape <c>[batch, in_height, in_width, in_channels]</c>
              and a filter / kernel tensor of shape
              <c>[filter_height, filter_width, in_channels, channel_multiplier]</c>, containing
              <c>in_channels</c> convolutional filters of depth 1, <c>depthwise_conv2d</c> applies
              a different filter to each input channel (expanding from 1 channel to
              <c>channel_multiplier</c> channels for each), then concatenates the results
              together. Thus, the output has <c>in_channels * channel_multiplier</c> channels.
              
               <code>
              for k in 0..in_channels-1
              for q in 0..channel_multiplier-1
              output[b, i, j, k * channel_multiplier + q] =
              sum_{di, dj} input[b, strides[1] * i + di, strides[2] * j + dj, k] *
              filter[di, dj, k, q]
               </code>
              
              Must have <c>strides[0] = strides[3] = 1</c>.  For the most common case of the same
              horizontal and vertices strides, <c>strides = [1, stride, stride, 1]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthwiseConv2dNativeBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthwiseConv2dNativeBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthwiseConv2dNativeBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter_sizes, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape based on <c>data_format</c>.  For example, if
              <c>data_format</c> is 'NHWC' then <c>input</c> is a 4-D <c>[batch, in_height,
              in_width, in_channels]</c> tensor.
            </param>
        <param name="filter_sizes">
              An integer vector representing the tensor shape of <c>filter</c>,
              where <c>filter</c> is a 4-D
              <c>[filter_height, filter_width, in_channels, depthwise_multiplier]</c> tensor.
            </param>
        <param name="out_backprop">
              4-D with shape  based on <c>data_format</c>.
              For example, if <c>data_format</c> is 'NHWC' then
              out_backprop shape is <c>[batch, out_height, out_width, out_channels]</c>.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, channels, height, width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 4.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each filter
              element on that dimension. The dimension order is determined by the value of
              <c>data_format</c>, see above for details. Dilations in the batch and depth
              dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNativeBackpropFilter'.
            </param>
        <summary>
              Computes the gradients of depthwise convolution with respect to the filter.
            </summary>
        <returns>
              4-D with shape
              <c>[filter_height, filter_width, in_channels, out_channels]</c>.  Gradient w.r.t.
              the <c>filter</c> input of the convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthwiseConv2dNativeBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthwiseConv2dNativeBackpropInput (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthwiseConv2dNativeBackpropInput(valuetype TensorFlow.TFOutput input_sizes, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_sizes">
              An integer vector representing the shape of <c>input</c>, based
              on <c>data_format</c>.  For example, if <c>data_format</c> is 'NHWC' then
              <c>input</c> is a 4-D <c>[batch, height, width, channels]</c> tensor.
            </param>
        <param name="filter">
              4-D with shape
              <c>[filter_height, filter_width, in_channels, depthwise_multiplier]</c>.
            </param>
        <param name="out_backprop">
              4-D with shape  based on <c>data_format</c>.
              For example, if <c>data_format</c> is 'NHWC' then
              out_backprop shape is <c>[batch, out_height, out_width, out_channels]</c>.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, channels, height, width].
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 4.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each filter
              element on that dimension. The dimension order is determined by the value of
              <c>data_format</c>, see above for details. Dilations in the batch and depth
              dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNativeBackpropInput'.
            </param>
        <summary>
              Computes the gradients of depthwise convolution with respect to the input.
            </summary>
        <returns>
              4-D with shape according to <c>data_format</c>.  For example, if
              <c>data_format</c> is 'NHWC', output shape is <c>[batch, in_height,
              in_width, in_channels]</c>.  Gradient w.r.t. the input of the
              convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequantize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dequantize (TensorFlow.TFOutput input, TensorFlow.TFOutput min_range, TensorFlow.TFOutput max_range, string mode = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dequantize(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_range, valuetype TensorFlow.TFOutput max_range, string mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="min_range">
              The minimum scalar value possibly produced for the input.
            </param>
        <param name="max_range">
              The maximum scalar value possibly produced for the input.
            </param>
        <param name="mode">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dequantize'.
            </param>
        <summary>
              Dequantize the 'input' tensor into a float Tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              [min_range, max_range] are scalar floats that specify the range for
              the 'input' data. The 'mode' attribute controls exactly which calculations are
              used to convert the float values to their quantized equivalents.
              
              In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:
              
               <code>
              if T == qint8: in[i] += (range(T) + 1)/ 2.0
              out[i] = min_range + (in[i]* (max_range - min_range) / range(T))
               </code>
              here <c>range(T) = numeric_limits&amp;lt;T&amp;gt;::max() - numeric_limits&amp;lt;T&amp;gt;::min()</c>
              
              *MIN_COMBINED Mode Example*
              
              If the input comes from a QuantizedRelu6, the output type is
              quint8 (range of 0-255) but the possible range of QuantizedRelu6 is
              0-6.  The min_range and max_range values are therefore 0.0 and 6.0.
              Dequantize on quint8 will take each value, cast to float, and multiply
              by 6 / 255.
              Note that if quantizedtype is qint8, the operation will additionally add
              each value by 128 prior to casting.
              
              If the mode is 'MIN_FIRST', then this approach is used:
              
               <code>
              num_discrete_values = 1 &amp;lt;&amp;lt; (# of bits in T)
              range_adjust = num_discrete_values / (num_discrete_values - 1)
              range = (range_max - range_min) * range_adjust
              range_scale = range / num_discrete_values
              const double offset_input = static_cast&amp;lt;double&amp;gt;(input) - lowest_quantized;
              result = range_min + ((input - numeric_limits&amp;lt;T&amp;gt;::min()) * range_scale)
               </code>
              
              *SCALED mode Example*
              
              <c>SCALED</c> mode matches the quantization approach used in
              <c>QuantizeAndDequantize{V2|V3}</c>.
              
              If the mode is <c>SCALED</c>, we do not use the full range of the output type,
              choosing to elide the lowest possible value for symmetry (e.g., output range is
              -127 to 127, not -128 to 127 for signed 8 bit quantization), so that 0.0 maps to
              0.
              
              We first find the range of values in our tensor. The
              range we use is always centered on 0, so we find m such that
               <code>
              m = max(abs(input_min), abs(input_max))
               </code>
              
              Our input tensor range is then <c>[-m, m]</c>.
              
              Next, we choose our fixed-point quantization buckets, <c>[min_fixed, max_fixed]</c>.
              If T is signed, this is
               <code>
              num_bits = sizeof(T) * 8
              [min_fixed, max_fixed] =
              [-(1 &amp;lt;&amp;lt; (num_bits - 1) - 1), (1 &amp;lt;&amp;lt; (num_bits - 1)) - 1]
               </code>
              
              Otherwise, if T is unsigned, the fixed-point range is
               <code>
              [min_fixed, max_fixed] = [0, (1 &amp;lt;&amp;lt; num_bits) - 1]
               </code>
              
              From this we compute our scaling factor, s:
               <code>
              s = (2 * m) / (max_fixed - min_fixed)
               </code>
              
              Now we can dequantize the elements of our tensor:
               <code>
              result = input * s
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeIterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation DeserializeIterator (TensorFlow.TFOutput resource_handle, TensorFlow.TFOutput serialized, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation DeserializeIterator(valuetype TensorFlow.TFOutput resource_handle, valuetype TensorFlow.TFOutput serialized, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource_handle">
              A handle to an iterator resource.
            </param>
        <param name="serialized">
              A variant tensor storing the state of the iterator contained in the
              resource.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DeserializeIterator'.
            </param>
        <summary>
              Converts the given variant tensor to an iterator and stores it in the given resource.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeManySparse">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DeserializeManySparse (TensorFlow.TFOutput serialized_sparse, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DeserializeManySparse(valuetype TensorFlow.TFOutput serialized_sparse, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized_sparse" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized_sparse">
              2-D, The <c>N</c> serialized <c>SparseTensor</c> objects.
              Must have 3 columns.
            </param>
        <param name="dtype">
              The <c>dtype</c> of the serialized <c>SparseTensor</c> objects.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DeserializeManySparse'.
            </param>
        <summary>
              Deserialize and concatenate <c>SparseTensors</c> from a serialized minibatch.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices:
              sparse_values:
              sparse_shape:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input <c>serialized_sparse</c> must be a string matrix of shape <c>[N x 3]</c> where
              <c>N</c> is the minibatch size and the rows correspond to packed outputs of
              <c>SerializeSparse</c>.  The ranks of the original <c>SparseTensor</c> objects
              must all match.  When the final <c>SparseTensor</c> is created, it has rank one
              higher than the ranks of the incoming <c>SparseTensor</c> objects
              (they have been concatenated along a new row dimension).
              
              The output <c>SparseTensor</c> object's shape values for all dimensions but the
              first are the max across the input <c>SparseTensor</c> objects' shape values
              for the corresponding dimensions.  Its first shape value is <c>N</c>, the minibatch
              size.
              
              The input <c>SparseTensor</c> objects' indices are assumed ordered in
              standard lexicographic order.  If this is not the case, after this
              step run <c>SparseReorder</c> to restore index ordering.
              
              For example, if the serialized input is a <c>[2 x 3]</c> matrix representing two
              original <c>SparseTensor</c> objects:
              
              index = [ 0]
              [10]
              [20]
              values = [1, 2, 3]
              shape = [50]
              
              and
              
              index = [ 2]
              [10]
              values = [4, 5]
              shape = [30]
              
              then the final deserialized <c>SparseTensor</c> will be:
              
              index = [0  0]
              [0 10]
              [0 20]
              [1  2]
              [1 10]
              values = [1, 2, 3, 4, 5]
              shape = [2 50]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeSparse">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DeserializeSparse (TensorFlow.TFOutput serialized_sparse, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DeserializeSparse(valuetype TensorFlow.TFOutput serialized_sparse, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized_sparse" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized_sparse">
              The serialized <c>SparseTensor</c> objects. The last dimension
              must have 3 columns.
            </param>
        <param name="dtype">
              The <c>dtype</c> of the serialized <c>SparseTensor</c> objects.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DeserializeSparse'.
            </param>
        <summary>
              Deserialize <c>SparseTensor</c> objects.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices:
              sparse_values:
              sparse_shape:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input <c>serialized_sparse</c> must have the shape <c>[?, ?, ..., ?, 3]</c> where
              the last dimension stores serialized <c>SparseTensor</c> objects and the other N
              dimensions (N &amp;gt;= 0) correspond to a batch. The ranks of the original
              <c>SparseTensor</c> objects must all match. When the final <c>SparseTensor</c> is
              created, its rank is the rank of the incoming <c>SparseTensor</c> objects plus N;
              the sparse tensors have been concatenated along new dimensions, one for each
              batch.
              
              The output <c>SparseTensor</c> object's shape values for the original dimensions
              are the max across the input <c>SparseTensor</c> objects' shape values for the
              corresponding dimensions. The new dimensions match the size of the batch.
              
              The input <c>SparseTensor</c> objects' indices are assumed ordered in
              standard lexicographic order.  If this is not the case, after this
              step run <c>SparseReorder</c> to restore index ordering.
              
              For example, if the serialized input is a <c>[2 x 3]</c> matrix representing two
              original <c>SparseTensor</c> objects:
              
              index = [ 0]
              [10]
              [20]
              values = [1, 2, 3]
              shape = [50]
              
              and
              
              index = [ 2]
              [10]
              values = [4, 5]
              shape = [30]
              
              then the final deserialized <c>SparseTensor</c> will be:
              
              index = [0  0]
              [0 10]
              [0 20]
              [1  2]
              [1 10]
              values = [1, 2, 3, 4, 5]
              shape = [2 50]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DestroyResourceOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation DestroyResourceOp (TensorFlow.TFOutput resource, Nullable&lt;bool&gt; ignore_lookup_error = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation DestroyResourceOp(valuetype TensorFlow.TFOutput resource, valuetype System.Nullable`1&lt;bool&gt; ignore_lookup_error, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="ignore_lookup_error" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource to delete.
            </param>
        <param name="ignore_lookup_error">
              Optional argument
              whether to ignore the error when the resource
              doesn't exist.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DestroyResourceOp'.
            </param>
        <summary>
              Deletes the resource specified by the handle.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              All subsequent operations using the resource will result in a NotFound
              error status.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DestroyTemporaryVariable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DestroyTemporaryVariable (TensorFlow.TFOutput reference, string var_name, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DestroyTemporaryVariable(valuetype TensorFlow.TFOutput reference, string var_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="var_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              A reference to the temporary variable tensor.
            </param>
        <param name="var_name">
              Name of the temporary variable, usually the name of the matching
              'TemporaryVariable' op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DestroyTemporaryVariable'.
            </param>
        <summary>
              Destroys the temporary variable and returns its final value.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Sets output to the value of the Tensor pointed to by 'ref', then destroys
              the temporary variable called 'var_name'.
              All other uses of 'ref' *must* have executed before this op.
              This is typically achieved by chaining the ref through each assign op, or by
              using control dependencies.
              
              Outputs the final value of the tensor pointed to by 'ref'.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Diag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Diag (TensorFlow.TFOutput diagonal, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Diag(valuetype TensorFlow.TFOutput diagonal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="diagonal">
              Rank k tensor where k is at most 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Diag'.
            </param>
        <summary>
              Returns a diagonal tensor with a given diagonal values.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a <c>diagonal</c>, this operation returns a tensor with the <c>diagonal</c> and
              everything else padded with zeros. The diagonal is computed as follows:
              
              Assume <c>diagonal</c> has dimensions [D1,..., Dk], then the output is a tensor of
              rank 2k with dimensions [D1,..., Dk, D1,..., Dk] where:
              
              <c>output[i1,..., ik, i1,..., ik] = diagonal[i1, ..., ik]</c> and 0 everywhere else.
              
              For example:
              
               <code>
              # 'diagonal' is [1, 2, 3, 4]
              tf.diag(diagonal) ==&amp;gt; [[1, 0, 0, 0]
              [0, 2, 0, 0]
              [0, 0, 3, 0]
              [0, 0, 0, 4]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="DiagPart">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DiagPart (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DiagPart(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank k tensor where k is even and not zero.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DiagPart'.
            </param>
        <summary>
              Returns the diagonal part of the tensor.
            </summary>
        <returns>
              The extracted diagonal.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns a tensor with the <c>diagonal</c> part
              of the <c>input</c>. The <c>diagonal</c> part is computed as follows:
              
              Assume <c>input</c> has dimensions <c>[D1,..., Dk, D1,..., Dk]</c>, then the output is a
              tensor of rank <c>k</c> with dimensions <c>[D1,..., Dk]</c> where:
              
              <c>diagonal[i1,..., ik] = input[i1, ..., ik, i1,..., ik]</c>.
              
              For example:
              
               <code>
              # 'input' is [[1, 0, 0, 0]
              [0, 2, 0, 0]
              [0, 0, 3, 0]
              [0, 0, 0, 4]]
              
              tf.diag_part(input) ==&amp;gt; [1, 2, 3, 4]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Digamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Digamma (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Digamma(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Digamma'.
            </param>
        <summary>
              Computes Psi, the derivative of Lgamma (the log of the absolute value of
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>Gamma(x)</c>), element-wise.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dilation2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dilation2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dilation2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, in_height, in_width, depth]</c>.
            </param>
        <param name="filter">
              3-D with shape <c>[filter_height, filter_width, depth]</c>.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor. Must be: <c>[1, stride_height, stride_width, 1]</c>.
            </param>
        <param name="rates">
              The input stride for atrous morphological dilation. Must be:
              <c>[1, rate_height, rate_width, 1]</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2D'.
            </param>
        <summary>
              Computes the grayscale dilation of 4-D <c>input</c> and 3-D <c>filter</c> tensors.
            </summary>
        <returns>
              4-D with shape <c>[batch, out_height, out_width, depth]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The <c>input</c> tensor has shape <c>[batch, in_height, in_width, depth]</c> and the
              <c>filter</c> tensor has shape <c>[filter_height, filter_width, depth]</c>, i.e., each
              input channel is processed independently of the others with its own structuring
              function. The <c>output</c> tensor has shape
              <c>[batch, out_height, out_width, depth]</c>. The spatial dimensions of the output
              tensor depend on the <c>padding</c> algorithm. We currently only support the default
              "NHWC" <c>data_format</c>.
              
              In detail, the grayscale morphological 2-D dilation is the max-sum correlation
              (for consistency with <c>conv2d</c>, we use unmirrored filters):
              
              output[b, y, x, c] =
              max_{dy, dx} input[b,
              strides[1] * y + rates[1] * dy,
              strides[2] * x + rates[2] * dx,
              c] +
              filter[dy, dx, c]
              
              Max-pooling is a special case when the filter has size equal to the pooling
              kernel size and contains all zeros.
              
              Note on duality: The dilation of <c>input</c> by the <c>filter</c> is equal to the
              negation of the erosion of <c>-input</c> by the reflected <c>filter</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dilation2DBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dilation2DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dilation2DBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, in_height, in_width, depth]</c>.
            </param>
        <param name="filter">
              3-D with shape <c>[filter_height, filter_width, depth]</c>.
            </param>
        <param name="out_backprop">
              4-D with shape <c>[batch, out_height, out_width, depth]</c>.
            </param>
        <param name="strides">
              1-D of length 4. The stride of the sliding window for each dimension of
              the input tensor. Must be: <c>[1, stride_height, stride_width, 1]</c>.
            </param>
        <param name="rates">
              1-D of length 4. The input stride for atrous morphological dilation.
              Must be: <c>[1, rate_height, rate_width, 1]</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2DBackpropFilter'.
            </param>
        <summary>
              Computes the gradient of morphological 2-D dilation with respect to the filter.
            </summary>
        <returns>
              3-D with shape <c>[filter_height, filter_width, depth]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dilation2DBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dilation2DBackpropInput (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dilation2DBackpropInput(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, in_height, in_width, depth]</c>.
            </param>
        <param name="filter">
              3-D with shape <c>[filter_height, filter_width, depth]</c>.
            </param>
        <param name="out_backprop">
              4-D with shape <c>[batch, out_height, out_width, depth]</c>.
            </param>
        <param name="strides">
              1-D of length 4. The stride of the sliding window for each dimension of
              the input tensor. Must be: <c>[1, stride_height, stride_width, 1]</c>.
            </param>
        <param name="rates">
              1-D of length 4. The input stride for atrous morphological dilation.
              Must be: <c>[1, rate_height, rate_width, 1]</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2DBackpropInput'.
            </param>
        <summary>
              Computes the gradient of morphological 2-D dilation with respect to the input.
            </summary>
        <returns>
              4-D with shape <c>[batch, in_height, in_width, depth]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Div (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Div(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Div'.
            </param>
        <summary>
              Returns x / y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Div</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DivNoNan">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DivNoNan (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DivNoNan(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DivNoNan'.
            </param>
        <summary>
              Returns 0 if the denominator is zero.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              
              *NOTE*: <c>DivNoNan</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBoundingBoxes">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DrawBoundingBoxes (TensorFlow.TFOutput images, TensorFlow.TFOutput boxes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DrawBoundingBoxes(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput boxes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape <c>[batch, height, width, depth]</c>. A batch of images.
            </param>
        <param name="boxes">
              3-D with shape <c>[batch, num_bounding_boxes, 4]</c> containing bounding
              boxes.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DrawBoundingBoxes'.
            </param>
        <summary>
              Draw bounding boxes on a batch of images.
            </summary>
        <returns>
              4-D with the same shape as <c>images</c>. The batch of input images with
              bounding boxes drawn on the images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a copy of <c>images</c> but draws on top of the pixels zero or more bounding
              boxes specified by the locations in <c>boxes</c>. The coordinates of the each
              bounding box in <c>boxes</c> are encoded as <c>[y_min, x_min, y_max, x_max]</c>. The
              bounding box coordinates are floats in <c>[0.0, 1.0]</c> relative to the width and
              height of the underlying image.
              
              For example, if an image is 100 x 200 pixels (height x width) and the bounding
              box is <c>[0.1, 0.2, 0.5, 0.9]</c>, the upper-left and bottom-right coordinates of
              the bounding box will be <c>(40, 10)</c> to <c>(180, 50)</c> (in (x,y) coordinates).
              
              Parts of the bounding box may fall outside the image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dropout">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dropout (TensorFlow.TFOutput x, double keep_prob, TensorFlow.TFShape noise_shape = null, Nullable&lt;int&gt; seed = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dropout(valuetype TensorFlow.TFOutput x, float64 keep_prob, class TensorFlow.TFShape noise_shape, valuetype System.Nullable`1&lt;int32&gt; seed, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_prob" Type="System.Double" />
        <Parameter Name="noise_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">A tensor.</param>
        <param name="keep_prob">A scalar Tensor with the same type as x. The probability that each element is kept.</param>
        <param name="noise_shape">A 1-D Tensor of type int32, representing the shape for randomly generated keep/drop flags.</param>
        <param name="seed">Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Computes dropout. 
            </summary>
        <returns>To be added.</returns>
        <remarks>
            With probability keep_prob, outputs the input element scaled up by 1 / keep_prob, 
            otherwise outputs 0. The scaling is so that the expected sum is unchanged.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dropout">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dropout (TensorFlow.TFOutput x, TensorFlow.TFOutput keep_prob, TensorFlow.TFShape noise_shape = null, Nullable&lt;int&gt; seed = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dropout(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput keep_prob, class TensorFlow.TFShape noise_shape, valuetype System.Nullable`1&lt;int32&gt; seed, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_prob" Type="TensorFlow.TFOutput" />
        <Parameter Name="noise_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">A tensor.</param>
        <param name="keep_prob">A scalar Tensor with the same type as x. The probability that each element is kept.</param>
        <param name="noise_shape">A 1-D Tensor of type int32, representing the shape for randomly generated keep/drop flags.</param>
        <param name="seed">Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Computes dropout. 
            </summary>
        <returns>To be added.</returns>
        <remarks>
            With probability keep_prob, outputs the input element scaled up by 1 / keep_prob, 
            otherwise outputs 0. The scaling is so that the expected sum is unchanged.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicPartition">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] DynamicPartition (TensorFlow.TFOutput data, TensorFlow.TFOutput partitions, long num_partitions, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] DynamicPartition(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput partitions, int64 num_partitions, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="partitions" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_partitions" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="partitions">
              Any shape.  Indices in the range <c>[0, num_partitions)</c>.
            </param>
        <param name="num_partitions">
              The number of partitions to output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DynamicPartition'.
            </param>
        <summary>
              Partitions <c>data</c> into <c>num_partitions</c> tensors using indices from <c>partitions</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each index tuple <c>js</c> of size <c>partitions.ndim</c>, the slice <c>data[js, ...]</c>
              becomes part of <c>outputs[partitions[js]]</c>.  The slices with <c>partitions[js] = i</c>
              are placed in <c>outputs[i]</c> in lexicographic order of <c>js</c>, and the first
              dimension of <c>outputs[i]</c> is the number of entries in <c>partitions</c> equal to <c>i</c>.
              In detail,
              
               <code>
              outputs[i].shape = [sum(partitions == i)] + data.shape[partitions.ndim:]
              
              outputs[i] = pack([data[js, ...] for js if partitions[js] == i])
               </code><c>data.shape</c> must start with <c>partitions.shape</c>.
              
              For example:
              
               <code>
              # Scalar partitions.
              partitions = 1
              num_partitions = 2
              data = [10, 20]
              outputs[0] = []  # Empty with shape [0, 2]
              outputs[1] = [[10, 20]]
              
              # Vector partitions.
              partitions = [0, 0, 1, 1, 0]
              num_partitions = 2
              data = [10, 20, 30, 40, 50]
              outputs[0] = [10, 20, 50]
              outputs[1] = [30, 40]
               </code>
              
              See <c>dynamic_stitch</c> for an example on how to merge partitions back.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/DynamicPartition.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicStitch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DynamicStitch (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DynamicStitch(valuetype TensorFlow.TFOutput[] indices, valuetype TensorFlow.TFOutput[] data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="data">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DynamicStitch'.
            </param>
        <summary>
              Interleave the values from the <c>data</c> tensors into a single tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Builds a merged tensor such that
              
               <code>
              merged[indices[m][i, ..., j], ...] = data[m][i, ..., j, ...]
               </code>
              
              For example, if each <c>indices[m]</c> is scalar or vector, we have
              
               <code>
              # Scalar indices:
              merged[indices[m], ...] = data[m][...]
              
              # Vector indices:
              merged[indices[m][i], ...] = data[m][i, ...]
               </code>
              
              Each <c>data[i].shape</c> must start with the corresponding <c>indices[i].shape</c>,
              and the rest of <c>data[i].shape</c> must be constant w.r.t. <c>i</c>.  That is, we
              must have <c>data[i].shape = indices[i].shape + constant</c>.  In terms of this
              <c>constant</c>, the output shape is
              
              merged.shape = [max(indices)] + constant
              
              Values are merged in order, so if an index appears in both <c>indices[m][i]</c> and
              <c>indices[n][j]</c> for <c>(m,i) &amp;lt; (n,j)</c> the slice <c>data[n][j]</c> will appear in the
              merged result. If you do not need this guarantee, ParallelDynamicStitch might
              perform better on some devices.
              
              For example:
              
               <code>
              indices[0] = 6
              indices[1] = [4, 1]
              indices[2] = [[5, 2], [0, 3]]
              data[0] = [61, 62]
              data[1] = [[41, 42], [11, 12]]
              data[2] = [[[51, 52], [21, 22]], [[1, 2], [31, 32]]]
              merged = [[1, 2], [11, 12], [21, 22], [31, 32], [41, 42],
              [51, 52], [61, 62]]
               </code>
              
              This method can be used to merge partitions created by <c>dynamic_partition</c>
              as illustrated on the following example:
              
               <code>
              # Apply function (increments x_i) on elements for which a certain condition
              # apply (x_i != -1 in this example).
              x=tf.constant([0.1, -1., 5.2, 4.3, -1., 7.4])
              condition_mask=tf.not_equal(x,tf.constant(-1.))
              partitioned_data = tf.dynamic_partition(
              x, tf.cast(condition_mask, tf.int32) , 2)
              partitioned_data[1] = partitioned_data[1] + 1.0
              condition_indices = tf.dynamic_partition(
              tf.range(tf.shape(x)[0]), tf.cast(condition_mask, tf.int32) , 2)
              x = tf.dynamic_stitch(condition_indices, partitioned_data)
              # Here x=[1.1, -1., 6.2, 5.3, -1, 8.4], the -1. values remain
              # unchanged.
               </code>
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/DynamicStitch.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditDistance">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EditDistance (TensorFlow.TFOutput hypothesis_indices, TensorFlow.TFOutput hypothesis_values, TensorFlow.TFOutput hypothesis_shape, TensorFlow.TFOutput truth_indices, TensorFlow.TFOutput truth_values, TensorFlow.TFOutput truth_shape, Nullable&lt;bool&gt; normalize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EditDistance(valuetype TensorFlow.TFOutput hypothesis_indices, valuetype TensorFlow.TFOutput hypothesis_values, valuetype TensorFlow.TFOutput hypothesis_shape, valuetype TensorFlow.TFOutput truth_indices, valuetype TensorFlow.TFOutput truth_values, valuetype TensorFlow.TFOutput truth_shape, valuetype System.Nullable`1&lt;bool&gt; normalize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesis_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="hypothesis_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="hypothesis_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="truth_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="truth_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="truth_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="normalize" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesis_indices">
              The indices of the hypothesis list SparseTensor.
              This is an N x R int64 matrix.
            </param>
        <param name="hypothesis_values">
              The values of the hypothesis list SparseTensor.
              This is an N-length vector.
            </param>
        <param name="hypothesis_shape">
              The shape of the hypothesis list SparseTensor.
              This is an R-length vector.
            </param>
        <param name="truth_indices">
              The indices of the truth list SparseTensor.
              This is an M x R int64 matrix.
            </param>
        <param name="truth_values">
              The values of the truth list SparseTensor.
              This is an M-length vector.
            </param>
        <param name="truth_shape">
              truth indices, vector.
            </param>
        <param name="normalize">
              Optional argument
              boolean (if true, edit distances are normalized by length of truth).
              
              The output is:
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EditDistance'.
            </param>
        <summary>
              Computes the (possibly normalized) Levenshtein Edit Distance.
            </summary>
        <returns>
              A dense float tensor with rank R - 1.
              
              For the example input:
              
              // hypothesis represents a 2x1 matrix with variable-length values:
              //   (0,0) = ["a"]
              //   (1,0) = ["b"]
              hypothesis_indices = [[0, 0, 0],
              [1, 0, 0]]
              hypothesis_values = ["a", "b"]
              hypothesis_shape = [2, 1, 1]
              
              // truth represents a 2x2 matrix with variable-length values:
              //   (0,0) = []
              //   (0,1) = ["a"]
              //   (1,0) = ["b", "c"]
              //   (1,1) = ["a"]
              truth_indices = [[0, 1, 0],
              [1, 0, 0],
              [1, 0, 1],
              [1, 1, 0]]
              truth_values = ["a", "b", "c", "a"]
              truth_shape = [2, 2, 2]
              normalize = true
              
              The output will be:
              
              // output is a 2x2 matrix with edit distances normalized by truth lengths.
              output = [[inf, 1.0],  // (0,0): no truth, (0,1): no hypothesis
              [0.5, 1.0]]  // (1,0): addition, (1,1): no hypothesis
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs are variable-length sequences provided by SparseTensors
              (hypothesis_indices, hypothesis_values, hypothesis_shape)
              and
              (truth_indices, truth_values, truth_shape).
              
              The inputs are:
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Elu">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Elu (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Elu(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Elu'.
            </param>
        <summary>
              Computes exponential linear: <c>exp(features) - 1</c> if &amp;lt; 0, <c>features</c> otherwise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              See [Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)
              ](http://arxiv.org/abs/1511.07289)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EluGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EluGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput outputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EluGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput outputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="outputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding Elu operation.
            </param>
        <param name="outputs">
              The outputs of the corresponding Elu operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EluGrad'.
            </param>
        <summary>
              Computes gradients for the exponential linear (Elu) operation.
            </summary>
        <returns>
              The gradients: <c>gradients * (outputs + 1)</c> if outputs &amp;lt; 0,
              <c>gradients</c> otherwise.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Empty (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable&lt;bool&gt; init = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Empty(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;bool&gt; init, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="init" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              1-D. Represents the shape of the output tensor.
            </param>
        <param name="dtype">
        </param>
        <param name="init">
              Optional argument
              If True, initialize the returned tensor with the default value of dtype.  Otherwise, the implementation is free not to initializethe tensor's content.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Empty'.
            </param>
        <summary>
              Creates a tensor with the given shape.
              
              This operation creates a tensor of <c>shape</c> and <c>dtype</c>.
            </summary>
        <returns>
              A <c>Tensor</c> of type <c>T</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTensorList">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EmptyTensorList (TensorFlow.TFOutput element_shape, TensorFlow.TFDataType element_dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EmptyTensorList(valuetype TensorFlow.TFOutput element_shape, valuetype TensorFlow.TFDataType element_dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="element_shape">
        </param>
        <param name="element_dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EmptyTensorList'.
            </param>
        <summary>
              Creates and returns an empty tensor list.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              All list elements must be tensors of dtype element_dtype and shape compatible
              with element_shape.
              
              handle: an empty tensor list.
              element_dtype: the type of elements in the list.
              element_shape: a shape compatible with that of elements in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeBase64">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodeBase64 (TensorFlow.TFOutput input, Nullable&lt;bool&gt; pad = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodeBase64(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; pad, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="pad" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Strings to be encoded.
            </param>
        <param name="pad">
              Optional argument
              Bool whether padding is applied at the ends.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeBase64'.
            </param>
        <summary>
              Encode strings into web-safe base64 format.
            </summary>
        <returns>
              Input strings encoded in base64.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Refer to the following article for more information on base64 format:
              en.wikipedia.org/wiki/Base64. Base64 strings may have padding with '=' at the
              end so that the encoded has length multiple of 4. See Padding section of the
              link above.
              
              Web-safe means that the encoder uses - and _ instead of + and /.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeJpeg">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodeJpeg (TensorFlow.TFOutput image, string format = null, Nullable&lt;long&gt; quality = null, Nullable&lt;bool&gt; progressive = null, Nullable&lt;bool&gt; optimize_size = null, Nullable&lt;bool&gt; chroma_downsampling = null, string density_unit = null, Nullable&lt;long&gt; x_density = null, Nullable&lt;long&gt; y_density = null, string xmp_metadata = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodeJpeg(valuetype TensorFlow.TFOutput image, string format, valuetype System.Nullable`1&lt;int64&gt; quality, valuetype System.Nullable`1&lt;bool&gt; progressive, valuetype System.Nullable`1&lt;bool&gt; optimize_size, valuetype System.Nullable`1&lt;bool&gt; chroma_downsampling, string density_unit, valuetype System.Nullable`1&lt;int64&gt; x_density, valuetype System.Nullable`1&lt;int64&gt; y_density, string xmp_metadata, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="quality" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="progressive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="optimize_size" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="chroma_downsampling" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="density_unit" Type="System.String" />
        <Parameter Name="x_density" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="y_density" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="xmp_metadata" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              3-D with shape <c>[height, width, channels]</c>.
            </param>
        <param name="format">
              Optional argument
              Per pixel image format.
            </param>
        <param name="quality">
              Optional argument
              Quality of the compression from 0 to 100 (higher is better and slower).
            </param>
        <param name="progressive">
              Optional argument
              If True, create a JPEG that loads progressively (coarse to fine).
            </param>
        <param name="optimize_size">
              Optional argument
              If True, spend CPU/RAM to reduce size with no quality change.
            </param>
        <param name="chroma_downsampling">
              Optional argument
              See http://en.wikipedia.org/wiki/Chroma_subsampling.
            </param>
        <param name="density_unit">
              Optional argument
              Unit used to specify <c>x_density</c> and <c>y_density</c>:
              pixels per inch (<c>'in'</c>) or centimeter (<c>'cm'</c>).
            </param>
        <param name="x_density">
              Optional argument
              Horizontal pixels per density unit.
            </param>
        <param name="y_density">
              Optional argument
              Vertical pixels per density unit.
            </param>
        <param name="xmp_metadata">
              Optional argument
              If not empty, embed this XMP metadata in the image header.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeJpeg'.
            </param>
        <summary>
              JPEG-encode an image.
            </summary>
        <returns>
              0-D. JPEG-encoded image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>image</c> is a 3-D uint8 Tensor of shape <c>[height, width, channels]</c>.
              
              The attr <c>format</c> can be used to override the color format of the encoded
              output.  Values can be:
              
              *   <c>''</c>: Use a default format based on the number of channels in the image.
              *   <c>grayscale</c>: Output a grayscale JPEG image.  The <c>channels</c> dimension
              of <c>image</c> must be 1.
              *   <c>rgb</c>: Output an RGB JPEG image. The <c>channels</c> dimension
              of <c>image</c> must be 3.
              
              If <c>format</c> is not specified or is the empty string, a default format is picked
              in function of the number of channels in <c>image</c>:
              
              *   1: Output a grayscale image.
              *   3: Output an RGB image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodePng">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodePng (TensorFlow.TFOutput image, Nullable&lt;long&gt; compression = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodePng(valuetype TensorFlow.TFOutput image, valuetype System.Nullable`1&lt;int64&gt; compression, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="compression" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              3-D with shape <c>[height, width, channels]</c>.
            </param>
        <param name="compression">
              Optional argument
              Compression level.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodePng'.
            </param>
        <summary>
              PNG-encode an image.
            </summary>
        <returns>
              0-D. PNG-encoded image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>image</c> is a 3-D uint8 or uint16 Tensor of shape <c>[height, width, channels]</c>
              where <c>channels</c> is:
              
              *   1: for grayscale.
              *   2: for grayscale + alpha.
              *   3: for RGB.
              *   4: for RGBA.
              
              The ZLIB compression level, <c>compression</c>, can be -1 for the PNG-encoder
              default or a value from 0 to 9.  9 is the highest compression level, generating
              the smallest output, but is slower.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeProto">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodeProto (TensorFlow.TFOutput sizes, TensorFlow.TFOutput[] values, string[] field_names, string message_type, string descriptor_source = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodeProto(valuetype TensorFlow.TFOutput sizes, valuetype TensorFlow.TFOutput[] values, string[] field_names, string message_type, string descriptor_source, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="field_names" Type="System.String[]" />
        <Parameter Name="message_type" Type="System.String" />
        <Parameter Name="descriptor_source" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sizes">
              Tensor of int32 with shape <c>[batch_shape, len(field_names)]</c>.
            </param>
        <param name="values">
              List of tensors containing values for the corresponding field.
            </param>
        <param name="field_names">
              List of strings containing proto field names.
            </param>
        <param name="message_type">
              Name of the proto message type to decode.
            </param>
        <param name="descriptor_source">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeProto'.
            </param>
        <summary>
              The op serializes protobuf messages provided in the input tensors.
            </summary>
        <returns>
              Tensor of serialized protos with shape <c>batch_shape</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The types of the tensors in <c>values</c> must match the schema for the
              fields specified in <c>field_names</c>. All the tensors in <c>values</c> must
              have a common shape prefix, *batch_shape*.
              
              The <c>sizes</c> tensor specifies repeat counts for each field.  The repeat
              count (last dimension) of a each tensor in <c>values</c> must be greater
              than or equal to corresponding repeat count in <c>sizes</c>.
              
              A <c>message_type</c> name must be provided to give context for the field
              names. The actual message descriptor can be looked up either in the
              linked-in descriptor pool or a filename provided by the caller using
              the <c>descriptor_source</c> attribute.
              
              The <c>descriptor_source</c> attribute selects a source of protocol
              descriptors to consult when looking up <c>message_type</c>. This may be a
              filename containing a serialized <c>FileDescriptorSet</c> message,
              or the special value <c>local://</c>, in which case only descriptors linked
              into the code will be searched; the filename can be on any filesystem
              accessible to TensorFlow.
              
              You can build a <c>descriptor_source</c> file using the <c>--descriptor_set_out</c>
              and <c>--include_imports</c> options to the protocol compiler <c>protoc</c>.
              
              The <c>local://</c> database only covers descriptors linked into the
              code via C++ libraries, not Python imports. You can link in a proto descriptor
              by creating a cc_library target with alwayslink=1.
              
              There are a few special cases in the value mapping:
              
              Submessage and group fields must be pre-serialized as TensorFlow strings.
              
              TensorFlow lacks support for unsigned int64s, so they must be
              represented as <c>tf.int64</c> with the same twos-complement bit pattern
              (the obvious way).
              
              Unsigned int32 values can be represented exactly with <c>tf.int64</c>, or
              with sign wrapping if the input is of type <c>tf.int32</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeWav">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodeWav (TensorFlow.TFOutput audio, TensorFlow.TFOutput sample_rate, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodeWav(valuetype TensorFlow.TFOutput audio, valuetype TensorFlow.TFOutput sample_rate, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audio" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audio">
              2-D with shape <c>[length, channels]</c>.
            </param>
        <param name="sample_rate">
              Scalar containing the sample frequency.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeWav'.
            </param>
        <summary>
              Encode audio data using the WAV file format.
            </summary>
        <returns>
              0-D. WAV-encoded file contents.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation will generate a string suitable to be saved out to create a .wav
              audio file. It will be encoded in the 16-bit PCM format. It takes in float
              values in the range -1.0f to 1.0f, and any outside that value will be clamped to
              that range.
              
              <c>audio</c> is a 2-D float Tensor of shape <c>[length, channels]</c>.
              <c>sample_rate</c> is a scalar Tensor holding the rate to use (e.g. 44100).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnqueueTPUEmbeddingIntegerBatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation EnqueueTPUEmbeddingIntegerBatch (TensorFlow.TFOutput[] batch, TensorFlow.TFOutput mode_override, Nullable&lt;long&gt; device_ordinal = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation EnqueueTPUEmbeddingIntegerBatch(valuetype TensorFlow.TFOutput[] batch, valuetype TensorFlow.TFOutput mode_override, valuetype System.Nullable`1&lt;int64&gt; device_ordinal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="mode_override" Type="TensorFlow.TFOutput" />
        <Parameter Name="device_ordinal" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="batch">
              A list of 1D tensors, one for each embedding table, containing the
              indices into the tables.
            </param>
        <param name="mode_override">
              A string input that overrides the mode specified in the
              TPUEmbeddingConfiguration. Supported values are {'unspecified', 'inference',
              'training', 'backward_pass_only'}. When set to 'unspecified', the mode set
              in TPUEmbeddingConfiguration is used, otherwise mode_override is used.
            </param>
        <param name="device_ordinal">
              Optional argument
              The TPU device to use. Should be &amp;gt;= 0 and less than the number
              of TPU cores in the task on which the node is placed.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EnqueueTPUEmbeddingIntegerBatch'.
            </param>
        <summary>
              An op that enqueues a list of input batch tensors to TPUEmbedding.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnqueueTPUEmbeddingSparseBatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation EnqueueTPUEmbeddingSparseBatch (TensorFlow.TFOutput[] sample_indices, TensorFlow.TFOutput[] embedding_indices, TensorFlow.TFOutput[] aggregation_weights, TensorFlow.TFOutput mode_override, Nullable&lt;long&gt; device_ordinal = null, string[] combiners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation EnqueueTPUEmbeddingSparseBatch(valuetype TensorFlow.TFOutput[] sample_indices, valuetype TensorFlow.TFOutput[] embedding_indices, valuetype TensorFlow.TFOutput[] aggregation_weights, valuetype TensorFlow.TFOutput mode_override, valuetype System.Nullable`1&lt;int64&gt; device_ordinal, string[] combiners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sample_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="embedding_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="aggregation_weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="mode_override" Type="TensorFlow.TFOutput" />
        <Parameter Name="device_ordinal" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="combiners" Type="System.String[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sample_indices">
              A list of rank 1 Tensors specifying the training example and
              feature to which the corresponding embedding_indices and aggregation_weights
              values belong. sample_indices[i] must equal b * nf + f, where nf is the
              number of features from the corresponding table, f is in [0, nf), and
              b is in [0, batch size).
            </param>
        <param name="embedding_indices">
              A list of rank 1 Tensors, indices into the embedding tables.
            </param>
        <param name="aggregation_weights">
              A list of rank 1 Tensors containing per sample -- i.e. per
              (training example, feature) -- aggregation weights.
            </param>
        <param name="mode_override">
              A string input that overrides the mode specified in the
              TPUEmbeddingConfiguration. Supported values are {'unspecified', 'inference',
              'training', 'backward_pass_only'}. When set to 'unspecified', the mode set
              in TPUEmbeddingConfiguration is used, otherwise mode_override is used.
            </param>
        <param name="device_ordinal">
              Optional argument
              The TPU device to use. Should be &amp;gt;= 0 and less than the number
              of TPU cores in the task on which the node is placed.
            </param>
        <param name="combiners">
              Optional argument
              A list of string scalars, one for each embedding table that specify
              how to normalize the embedding activations after weighted summation.
              Supported combiners are 'mean', 'sum', or 'sqrtn'. It is invalid to have
              the sum of the weights be 0 for 'mean' or the sum of the squared weights be
              0 for 'sqrtn'. If combiners isn't passed, the default is to use 'sum' for
              all tables.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EnqueueTPUEmbeddingSparseBatch'.
            </param>
        <summary>
              An op that enqueues TPUEmbedding input indices from a SparseTensor.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This Op eases the porting of code that uses embedding_lookup_sparse(),
              although some Python preprocessing of the SparseTensor arguments to
              embedding_lookup_sparse() is required to produce the arguments to this Op,
              since only a single EnqueueTPUEmbeddingSparseBatch Op is allowed per training
              step.
              
              The tensors at corresponding positions in the three input lists
              must have the same shape, i.e. rank 1 with dim_size() equal to the total
              number of lookups into the table described by the corresponding table_id.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnqueueTPUEmbeddingSparseTensorBatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation EnqueueTPUEmbeddingSparseTensorBatch (TensorFlow.TFOutput[] sample_indices, TensorFlow.TFOutput[] embedding_indices, TensorFlow.TFOutput[] aggregation_weights, TensorFlow.TFOutput mode_override, long[] table_ids, Nullable&lt;long&gt; device_ordinal = null, string[] combiners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation EnqueueTPUEmbeddingSparseTensorBatch(valuetype TensorFlow.TFOutput[] sample_indices, valuetype TensorFlow.TFOutput[] embedding_indices, valuetype TensorFlow.TFOutput[] aggregation_weights, valuetype TensorFlow.TFOutput mode_override, int64[] table_ids, valuetype System.Nullable`1&lt;int64&gt; device_ordinal, string[] combiners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sample_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="embedding_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="aggregation_weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="mode_override" Type="TensorFlow.TFOutput" />
        <Parameter Name="table_ids" Type="System.Int64[]" />
        <Parameter Name="device_ordinal" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="combiners" Type="System.String[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sample_indices">
              A list of rank 1 Tensors specifying the training example to
              which the corresponding embedding_indices and aggregation_weights values
              belong. It corresponds to sp_ids.indices[:,0] in  embedding_lookup_sparse().
            </param>
        <param name="embedding_indices">
              A list of rank 1 Tensors, indices into the embedding tables.
              It corresponds to sp_ids.values in embedding_lookup_sparse().
            </param>
        <param name="aggregation_weights">
              A list of rank 1 Tensors containing per training example
              aggregation weights. It corresponds to sp_weights.values in
              embedding_lookup_sparse().
            </param>
        <param name="mode_override">
              A string input that overrides the mode specified in the
              TPUEmbeddingConfiguration. Supported values are {'unspecified', 'inference',
              'training', 'backward_pass_only'}. When set to 'unspecified', the mode set
              in TPUEmbeddingConfiguration is used, otherwise mode_override is used.
            </param>
        <param name="table_ids">
              A list of integers specifying the identifier of the embedding table
              (offset of TableDescriptor in the TPUEmbeddingConfiguration) to lookup the
              corresponding input. The ith input is looked up using table_ids[i]. The size
              of the table_ids list must be equal to that of sample_indices,
              embedding_indices and aggregation_weights.
            </param>
        <param name="device_ordinal">
              Optional argument
              The TPU device to use. Should be &amp;gt;= 0 and less than the number
              of TPU cores in the task on which the node is placed.
            </param>
        <param name="combiners">
              Optional argument
              A list of string scalars, one for each embedding table that specify
              how to normalize the embedding activations after weighted summation.
              Supported combiners are 'mean', 'sum', or 'sqrtn'. It is invalid to have
              the sum of the weights be 0 for 'mean' or the sum of the squared weights be
              0 for 'sqrtn'. If combiners isn't passed, the default is to use 'sum' for
              all tables.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EnqueueTPUEmbeddingSparseTensorBatch'.
            </param>
        <summary>
              This Op eases the porting of code that uses tf.nn.embedding_lookup_sparse().
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              sample_indices[i], embedding_indices[i] and aggregation_weights[i] correspond
              to the ith feature. table_ids[i] indicates which embedding table to look up ith
              feature.
              
              The tensors at corresponding positions in the three input lists (sample_indices,
              embedding_indices and aggregation_weights) must have the same shape, i.e. rank 1
              with dim_size() equal to the total number of lookups into the table described by
              the corresponding feature.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureShape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EnsureShape (TensorFlow.TFOutput input, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EnsureShape(valuetype TensorFlow.TFOutput input, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A tensor, whose shape is to be validated.
            </param>
        <param name="shape">
              The expected (possibly partially specified) shape of the input tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EnsureShape'.
            </param>
        <summary>
              Ensures that the tensor's shape matches the expected shape.
            </summary>
        <returns>
              A tensor with the same shape and contents as the input tensor or value.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Raises an error if the input tensor's shape does not match the specified shape.
              Returns the input tensor otherwise.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Enter (TensorFlow.TFOutput data, string frame_name, Nullable&lt;bool&gt; is_constant = null, Nullable&lt;long&gt; parallel_iterations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Enter(valuetype TensorFlow.TFOutput data, string frame_name, valuetype System.Nullable`1&lt;bool&gt; is_constant, valuetype System.Nullable`1&lt;int64&gt; parallel_iterations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="frame_name" Type="System.String" />
        <Parameter Name="is_constant" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="parallel_iterations" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the child frame.
            </param>
        <param name="frame_name">
              The name of the child frame.
            </param>
        <param name="is_constant">
              Optional argument
              If true, the output is constant within the child frame.
            </param>
        <param name="parallel_iterations">
              Optional argument
              The number of iterations allowed to run in parallel.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Enter'.
            </param>
        <summary>
              Creates or finds a child frame, and makes <c>data</c> available to the child frame.
            </summary>
        <returns>
              The same tensor as <c>data</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is used together with <c>Exit</c> to create loops in the graph.
              The unique <c>frame_name</c> is used by the <c>Executor</c> to identify frames. If
              <c>is_constant</c> is true, <c>output</c> is a constant in the child frame; otherwise
              it may be changed in the child frame. At most <c>parallel_iterations</c> iterations
              are run in parallel in the child frame.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Equal (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Equal(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Equal'.
            </param>
        <summary>
              Returns the truth value of (x == y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Equal</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Erf (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Erf(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Erf'.
            </param>
        <summary>
              Computes the Gauss error function of <c>x</c> element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfc">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Erfc (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Erfc(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Erfc'.
            </param>
        <summary>
              Computes the complementary error function of <c>x</c> element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Exit (TensorFlow.TFOutput data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Exit(valuetype TensorFlow.TFOutput data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the parent frame.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Exit'.
            </param>
        <summary>
              Exits the current frame to its parent frame.
            </summary>
        <returns>
              The same tensor as <c>data</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Exit makes its input <c>data</c> available to the parent frame.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Exp (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Exp(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Exp'.
            </param>
        <summary>
              Computes exponential of x element-wise.  \\(y = e^x\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandDims">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExpandDims (TensorFlow.TFOutput input, TensorFlow.TFOutput dim, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExpandDims(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput dim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="dim">
              0-D (scalar). Specifies the dimension index at which to
              expand the shape of <c>input</c>. Must be in the range
              <c>[-rank(input) - 1, rank(input)]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExpandDims'.
            </param>
        <summary>
              Inserts a dimension of 1 into a tensor's shape.
            </summary>
        <returns>
              Contains the same data as <c>input</c>, but its shape has an additional
              dimension of size 1 added.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>input</c>, this operation inserts a dimension of 1 at the
              dimension index <c>axis</c> of <c>input</c>'s shape. The dimension index <c>axis</c> starts at
              zero; if you specify a negative number for <c>axis</c> it is counted backward from
              the end.
              
              This operation is useful if you want to add a batch dimension to a single
              element. For example, if you have a single image of shape <c>[height, width,
              channels]</c>, you can make it a batch of 1 image with <c>expand_dims(image, 0)</c>,
              which will make the shape <c>[1, height, width, channels]</c>.
              
              Other examples:
              
               <code>
              # 't' is a tensor of shape [2]
              shape(expand_dims(t, 0)) ==&amp;gt; [1, 2]
              shape(expand_dims(t, 1)) ==&amp;gt; [2, 1]
              shape(expand_dims(t, -1)) ==&amp;gt; [2, 1]
              
              # 't2' is a tensor of shape [2, 3, 5]
              shape(expand_dims(t2, 0)) ==&amp;gt; [1, 2, 3, 5]
              shape(expand_dims(t2, 2)) ==&amp;gt; [2, 3, 1, 5]
              shape(expand_dims(t2, 3)) ==&amp;gt; [2, 3, 5, 1]
               </code>
              
              This operation requires that:
              
              <c>-1-input.dims() &amp;lt;= dim &amp;lt;= input.dims()</c>
              
              This operation is related to <c>squeeze()</c>, which removes dimensions of
              size 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExperimentalDirectedInterleaveDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExperimentalDirectedInterleaveDataset (TensorFlow.TFOutput selector_input_dataset, TensorFlow.TFOutput[] data_input_datasets, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExperimentalDirectedInterleaveDataset(valuetype TensorFlow.TFOutput selector_input_dataset, valuetype TensorFlow.TFOutput[] data_input_datasets, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector_input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="data_input_datasets" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="selector_input_dataset">
              A dataset of scalar <c>DT_INT64</c> elements that determines which of the
              <c>N</c> data inputs should produce the next output element.
            </param>
        <param name="data_input_datasets">
          <c>N</c> datasets with the same type that will be interleaved according to
              the values of <c>selector_input_dataset</c>.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExperimentalDirectedInterleaveDataset'.
            </param>
        <summary>
              A substitute for <c>InterleaveDataset</c> on a fixed list of <c>N</c> datasets.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExperimentalIgnoreErrorsDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExperimentalIgnoreErrorsDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExperimentalIgnoreErrorsDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExperimentalIgnoreErrorsDataset'.
            </param>
        <summary>
              Creates a dataset that contains the elements of <c>input_dataset</c> ignoring errors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExperimentalIteratorGetDevice">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExperimentalIteratorGetDevice (TensorFlow.TFOutput resource, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExperimentalIteratorGetDevice(valuetype TensorFlow.TFOutput resource, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExperimentalIteratorGetDevice'.
            </param>
        <summary>
              Returns the name of the device on which <c>resource</c> has been placed.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExperimentalThreadPoolDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExperimentalThreadPoolDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput thread_pool, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExperimentalThreadPoolDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput thread_pool, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="thread_pool" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="thread_pool">
              A resource produced by the ThreadPoolHandle op.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExperimentalThreadPoolDataset'.
            </param>
        <summary>
              Creates a dataset that uses a custom thread pool to compute <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExperimentalThreadPoolHandle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExperimentalThreadPoolHandle (long num_threads, string display_name, Nullable&lt;long&gt; max_intra_op_parallelism = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExperimentalThreadPoolHandle(int64 num_threads, string display_name, valuetype System.Nullable`1&lt;int64&gt; max_intra_op_parallelism, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_threads" Type="System.Int64" />
        <Parameter Name="display_name" Type="System.String" />
        <Parameter Name="max_intra_op_parallelism" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_threads">
              The number of threads in the thread pool.
            </param>
        <param name="display_name">
              A human-readable name for the threads that may be visible in some
              visualizations.
              threadpool.
            </param>
        <param name="max_intra_op_parallelism">
              Optional argument
              The maximum degree of parallelism to use within operations that execute on this
              threadpool.
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExperimentalThreadPoolHandle'.
            </param>
        <summary>
              Creates a dataset that uses a custom thread pool to compute <c>input_dataset</c>.
            </summary>
        <returns>
              A resource that can be consumed by one or more ExperimentalThreadPoolDataset
              ops.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExperimentalUniqueDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExperimentalUniqueDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExperimentalUniqueDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExperimentalUniqueDataset'.
            </param>
        <summary>
              Creates a dataset that contains the unique elements of <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expm1">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Expm1 (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Expm1(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Expm1'.
            </param>
        <summary>
              Computes exponential of x - 1 element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = (\exp x) - 1\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractGlimpse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExtractGlimpse (TensorFlow.TFOutput input, TensorFlow.TFOutput size, TensorFlow.TFOutput offsets, Nullable&lt;bool&gt; centered = null, Nullable&lt;bool&gt; normalized = null, Nullable&lt;bool&gt; uniform_noise = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExtractGlimpse(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput offsets, valuetype System.Nullable`1&lt;bool&gt; centered, valuetype System.Nullable`1&lt;bool&gt; normalized, valuetype System.Nullable`1&lt;bool&gt; uniform_noise, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="offsets" Type="TensorFlow.TFOutput" />
        <Parameter Name="centered" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="normalized" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="uniform_noise" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A 4-D float tensor of shape <c>[batch_size, height, width, channels]</c>.
            </param>
        <param name="size">
              A 1-D tensor of 2 elements containing the size of the glimpses
              to extract.  The glimpse height must be specified first, following
              by the glimpse width.
            </param>
        <param name="offsets">
              A 2-D integer tensor of shape <c>[batch_size, 2]</c> containing
              the y, x locations of the center of each window.
            </param>
        <param name="centered">
              Optional argument
              indicates if the offset coordinates are centered relative to
              the image, in which case the (0, 0) offset is relative to the center
              of the input images. If false, the (0,0) offset corresponds to the
              upper left corner of the input images.
            </param>
        <param name="normalized">
              Optional argument
              indicates if the offset coordinates are normalized.
            </param>
        <param name="uniform_noise">
              Optional argument
              indicates if the noise should be generated using a
              uniform distribution or a Gaussian distribution.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractGlimpse'.
            </param>
        <summary>
              Extracts a glimpse from the input tensor.
            </summary>
        <returns>
              A tensor representing the glimpses <c>[batch_size,
              glimpse_height, glimpse_width, channels]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns a set of windows called glimpses extracted at location
              <c>offsets</c> from the input tensor. If the windows only partially
              overlaps the inputs, the non overlapping areas will be filled with
              random noise.
              
              The result is a 4-D tensor of shape <c>[batch_size, glimpse_height,
              glimpse_width, channels]</c>. The channels and batch dimensions are the
              same as that of the input tensor. The height and width of the output
              windows are specified in the <c>size</c> parameter.
              
              The argument <c>normalized</c> and <c>centered</c> controls how the windows are built:
              
              * If the coordinates are normalized but not centered, 0.0 and 1.0
              correspond to the minimum and maximum of each height and width
              dimension.
              * If the coordinates are both normalized and centered, they range from
              -1.0 to 1.0. The coordinates (-1.0, -1.0) correspond to the upper
              left corner, the lower right corner is located at (1.0, 1.0) and the
              center is at (0, 0).
              * If the coordinates are not normalized they are interpreted as
              numbers of pixels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractImagePatches">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExtractImagePatches (TensorFlow.TFOutput images, long[] ksizes, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExtractImagePatches(valuetype TensorFlow.TFOutput images, int64[] ksizes, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksizes" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D Tensor with shape <c>[batch, in_rows, in_cols, depth]</c>.
            </param>
        <param name="ksizes">
              The size of the sliding window for each dimension of <c>images</c>.
            </param>
        <param name="strides">
              1-D of length 4. How far the centers of two consecutive patches are in
              the images. Must be: <c>[1, stride_rows, stride_cols, 1]</c>.
            </param>
        <param name="rates">
              1-D of length 4. Must be: <c>[1, rate_rows, rate_cols, 1]</c>. This is the
              input stride, specifying how far two consecutive patch samples are in the
              input. Equivalent to extracting patches with
              <c>patch_sizes_eff = patch_sizes + (patch_sizes - 1) * (rates - 1)</c>, followed by
              subsampling them spatially by a factor of <c>rates</c>. This is equivalent to
              <c>rate</c> in dilated (a.k.a. Atrous) convolutions.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
              
              We specify the size-related attributes as:
              
               <code>
              ksizes = [1, ksize_rows, ksize_cols, 1]
              strides = [1, strides_rows, strides_cols, 1]
              rates = [1, rates_rows, rates_cols, 1]
               </code></param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractImagePatches'.
            </param>
        <summary>
              Extract <c>patches</c> from <c>images</c> and put them in the "depth" output dimension.
            </summary>
        <returns>
              4-D Tensor with shape <c>[batch, out_rows, out_cols, ksize_rows *
              ksize_cols * depth]</c> containing image patches with size
              <c>ksize_rows x ksize_cols x depth</c> vectorized in the "depth" dimension. Note
              <c>out_rows</c> and <c>out_cols</c> are the dimensions of the output patches.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractJpegShape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExtractJpegShape (TensorFlow.TFOutput contents, Nullable&lt;TensorFlow.TFDataType&gt; output_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExtractJpegShape(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; output_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D. The JPEG-encoded image.
            </param>
        <param name="output_type">
              Optional argument
              (Optional) The output type of the operation (int32 or int64).
              Defaults to int32.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractJpegShape'.
            </param>
        <summary>
              Extract the shape information of a JPEG-encoded image.
            </summary>
        <returns>
              1-D. The image shape with format [height, width, channels].
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op only parses the image header, so it is much faster than DecodeJpeg.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractVolumePatches">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExtractVolumePatches (TensorFlow.TFOutput input, long[] ksizes, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExtractVolumePatches(valuetype TensorFlow.TFOutput input, int64[] ksizes, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksizes" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              5-D Tensor with shape <c>[batch, in_planes, in_rows, in_cols, depth]</c>.
            </param>
        <param name="ksizes">
              The size of the sliding window for each dimension of <c>input</c>.
            </param>
        <param name="strides">
              1-D of length 5. How far the centers of two consecutive patches are in
              <c>input</c>. Must be: <c>[1, stride_planes, stride_rows, stride_cols, 1]</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
              
              We specify the size-related attributes as:
              
               <code>
              ksizes = [1, ksize_planes, ksize_rows, ksize_cols, 1]
              strides = [1, stride_planes, strides_rows, strides_cols, 1]
               </code></param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractVolumePatches'.
            </param>
        <summary>
              Extract <c>patches</c> from <c>input</c> and put them in the "depth" output dimension. 3D extension of <c>extract_image_patches</c>.
            </summary>
        <returns>
              5-D Tensor with shape <c>[batch, out_planes, out_rows, out_cols,
              ksize_planes * ksize_rows * ksize_cols * depth]</c> containing patches
              with size <c>ksize_planes x ksize_rows x ksize_cols x depth</c> vectorized
              in the "depth" dimension. Note <c>out_planes</c>, <c>out_rows</c> and <c>out_cols</c>
              are the dimensions of the output patches.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Fact (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Fact(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Fact'.
            </param>
        <summary>
              Output a fact about factorials.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeParam">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeParam (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeParam(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of the output.
            </param>
        <param name="shape">
              The purported shape of the output. This is only used for shape inference;
              the output will not necessarily have this shape. Can be a partial shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeParam'.
            </param>
        <summary>
              This op is used as a placeholder in If branch functions. It doesn't provide a
              valid output when run, so must either be removed (e.g. replaced with a
              function input) or guaranteed not to be used (e.g. if mirroring an
              intermediate output needed for the gradient computation of the other branch).
            </summary>
        <returns>
              \"Fake\" output value. This should not be consumed by another op.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxArgs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxArgs (TensorFlow.TFOutput inputs, Nullable&lt;float&gt; min = null, Nullable&lt;float&gt; max = null, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxArgs(valuetype TensorFlow.TFOutput inputs, valuetype System.Nullable`1&lt;float32&gt; min, valuetype System.Nullable`1&lt;float32&gt; max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
              Optional argument
            </param>
        <param name="max">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgs'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Attributes <c>[min; max]</c> define the clamping range for the <c>inputs</c> data.
              <c>inputs</c> values are quantized into the quantization range (<c>[0; 2^num_bits - 1]</c>
              when <c>narrow_range</c> is false and <c>[1; 2^num_bits - 1]</c> when it is true) and
              then de-quantized and output as floats in <c>[min; max]</c> interval.
              <c>num_bits</c> is the bitwidth of the quantization; between 2 and 16, inclusive.
              
              Quantization is called fake since the output is still in floating point.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxArgsGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, Nullable&lt;float&gt; min = null, Nullable&lt;float&gt; max = null, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype System.Nullable`1&lt;float32&gt; min, valuetype System.Nullable`1&lt;float32&gt; max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxArgs operation.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxArgs operation.
            </param>
        <param name="min">
              Optional argument
            </param>
        <param name="max">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgsGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxArgs operation.
            </summary>
        <returns>
              Backpropagated gradients below the FakeQuantWithMinMaxArgs operation:
              <c>gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVars">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxVars (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxVars(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVars'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor of type float via global float scalars <c>min</c></summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              and <c>max</c> to 'outputs' tensor of same shape as <c>inputs</c>.
              
              <c>[min; max]</c> define the clamping range for the <c>inputs</c> data.
              <c>inputs</c> values are quantized into the quantization range (<c>[0; 2^num_bits - 1]</c>
              when <c>narrow_range</c> is false and <c>[1; 2^num_bits - 1]</c> when it is true) and
              then de-quantized and output as floats in <c>[min; max]</c> interval.
              <c>num_bits</c> is the bitwidth of the quantization; between 2 and 16, inclusive.
              
              This operation has a gradient and thus allows for training <c>min</c> and <c>max</c>
              values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsGradient">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxVars operation.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxVars operation.
              min, max: Quantization interval, scalar floats.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
              The bitwidth of the quantization; between 2 and 8, inclusive.
            </param>
        <param name="narrow_range">
              Optional argument
              Whether to quantize into 2^num_bits - 1 distinct values.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxVars operation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              backprops_wrt_input: Backpropagated gradients w.r.t. inputs:
              <c>gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)</c>.
              backprop_wrt_min: Backpropagated gradients w.r.t. min parameter:
              <c>sum(gradients * (inputs &amp;lt; min))</c>.
              backprop_wrt_max: Backpropagated gradients w.r.t. max parameter:
              <c>sum(gradients * (inputs &amp;gt; max))</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsPerChannel">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannel'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor of type float and one of the shapes: <c>[d]</c>,
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>[b, d]</c>
          <c>[b, h, w, d]</c> via per-channel floats <c>min</c> and <c>max</c> of shape <c>[d]</c>
              to 'outputs' tensor of same shape as <c>inputs</c>.
              
              <c>[min; max]</c> define the clamping range for the <c>inputs</c> data.
              <c>inputs</c> values are quantized into the quantization range (<c>[0; 2^num_bits - 1]</c>
              when <c>narrow_range</c> is false and <c>[1; 2^num_bits - 1]</c> when it is true) and
              then de-quantized and output as floats in <c>[min; max]</c> interval.
              <c>num_bits</c> is the bitwidth of the quantization; between 2 and 16, inclusive.
              
              This operation has a gradient and thus allows for training <c>min</c> and <c>max</c>
              values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsPerChannelGradient">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsPerChannelGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsPerChannelGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxVars operation,
              shape one of: <c>[d]</c>, <c>[b, d]</c>,  <c>[b, h, w, d]</c>.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxVars operation, shape
              same as <c>gradients</c>.
              min, max: Quantization interval, floats of shape <c>[d]</c>.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
              The bitwidth of the quantization; between 2 and 16, inclusive.
            </param>
        <param name="narrow_range">
              Optional argument
              Whether to quantize into 2^num_bits - 1 distinct values.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannelGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              backprops_wrt_input: Backpropagated gradients w.r.t. inputs, shape same as
              <c>inputs</c>:
              <c>gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)</c>.
              backprop_wrt_min: Backpropagated gradients w.r.t. min parameter, shape <c>[d]</c>:
              <c>sum_per_d(gradients * (inputs &amp;lt; min))</c>.
              backprop_wrt_max: Backpropagated gradients w.r.t. max parameter, shape <c>[d]</c>:
              <c>sum_per_d(gradients * (inputs &amp;gt; max))</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQueue (TensorFlow.TFOutput resource, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQueue(valuetype TensorFlow.TFOutput resource, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQueue'.
            </param>
        <summary>
              Deprecated. Do not use.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FFT (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FFT(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT'.
            </param>
        <summary>
              Fast Fourier transform.
            </summary>
        <returns>
              A complex tensor of the same shape as <c>input</c>. The inner-most
              dimension of <c>input</c> is replaced with its 1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.fft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 1-dimensional discrete Fourier transform over the inner-most
              dimension of <c>input</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FFT2D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FFT2D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT2D'.
            </param>
        <summary>
              2D fast Fourier transform.
            </summary>
        <returns>
              A complex tensor of the same shape as <c>input</c>. The inner-most 2
              dimensions of <c>input</c> are replaced with their 2D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.fft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 2-dimensional discrete Fourier transform over the inner-most
              2 dimensions of <c>input</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FFT3D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FFT3D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT3D'.
            </param>
        <summary>
              3D fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as <c>input</c>. The inner-most 3
              dimensions of <c>input</c> are replaced with their 3D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.fftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 3-dimensional discrete Fourier transform over the inner-most 3
              dimensions of <c>input</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FIFOQueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FIFOQueue (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FIFOQueue(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FIFOQueue'.
            </param>
        <summary>
              A queue that produces elements in first-in first-out order.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FIFOQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FIFOQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FIFOQueueV2(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FIFOQueueV2'.
            </param>
        <summary>
              A queue that produces elements in first-in first-out order.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Fill (TensorFlow.TFOutput dims, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Fill(valuetype TensorFlow.TFOutput dims, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dims" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dims">
              1-D. Represents the shape of the output tensor.
            </param>
        <param name="value">
              0-D (scalar). Value to fill the returned tensor.
              
              @compatibility(numpy)
              Equivalent to np.full
              @end_compatibility
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Fill'.
            </param>
        <summary>
              Creates a tensor filled with a scalar value.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation creates a tensor of shape <c>dims</c> and fills it with <c>value</c>.
              
              For example:
              
               <code>
              # Output tensor has shape [2, 3].
              fill([2, 3], 9) ==&amp;gt; [[9, 9, 9]
              [9, 9, 9]]
               </code><c>tf.fill</c> differs from <c>tf.constant</c> in a few ways:
              
              *   <c>tf.fill</c> only supports scalar contents, whereas <c>tf.constant</c> supports
              Tensor values.
              *   <c>tf.fill</c> creates an Op in the computation graph that constructs the actual
              Tensor value at runtime. This is in contrast to <c>tf.constant</c> which embeds
              the entire Tensor into the graph with a <c>Const</c> node.
              *   Because <c>tf.fill</c> evaluates at graph runtime, it supports dynamic shapes
              based on other runtime Tensors, unlike <c>tf.constant</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterByLastComponentDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FilterByLastComponentDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FilterByLastComponentDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FilterByLastComponentDataset'.
            </param>
        <summary>
              Creates a dataset containing elements of first component of <c>input_dataset</c> having true in the last component.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedLengthRecordDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FixedLengthRecordDataset (TensorFlow.TFOutput filenames, TensorFlow.TFOutput header_bytes, TensorFlow.TFOutput record_bytes, TensorFlow.TFOutput footer_bytes, TensorFlow.TFOutput buffer_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FixedLengthRecordDataset(valuetype TensorFlow.TFOutput filenames, valuetype TensorFlow.TFOutput header_bytes, valuetype TensorFlow.TFOutput record_bytes, valuetype TensorFlow.TFOutput footer_bytes, valuetype TensorFlow.TFOutput buffer_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="TensorFlow.TFOutput" />
        <Parameter Name="header_bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="record_bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="footer_bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filenames">
              A scalar or a vector containing the name(s) of the file(s) to be
              read.
            </param>
        <param name="header_bytes">
              A scalar representing the number of bytes to skip at the
              beginning of a file.
            </param>
        <param name="record_bytes">
              A scalar representing the number of bytes in each record.
            </param>
        <param name="footer_bytes">
              A scalar representing the number of bytes to skip at the end
              of a file.
            </param>
        <param name="buffer_size">
              A scalar representing the number of bytes to buffer. Must be &amp;gt; 0.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedLengthRecordDataset'.
            </param>
        <summary>
              Creates a dataset that emits the records from one or more binary files.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedLengthRecordReader">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FixedLengthRecordReader (long record_bytes, Nullable&lt;long&gt; header_bytes = null, Nullable&lt;long&gt; footer_bytes = null, Nullable&lt;long&gt; hop_bytes = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FixedLengthRecordReader(int64 record_bytes, valuetype System.Nullable`1&lt;int64&gt; header_bytes, valuetype System.Nullable`1&lt;int64&gt; footer_bytes, valuetype System.Nullable`1&lt;int64&gt; hop_bytes, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record_bytes" Type="System.Int64" />
        <Parameter Name="header_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="footer_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="hop_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="record_bytes">
              Number of bytes in the record.
            </param>
        <param name="header_bytes">
              Optional argument
              Number of bytes in the header, defaults to 0.
            </param>
        <param name="footer_bytes">
              Optional argument
              Number of bytes in the footer, defaults to 0.
            </param>
        <param name="hop_bytes">
              Optional argument
              Number of bytes to hop before each read. Default of 0 means using
              record_bytes.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedLengthRecordReader'.
            </param>
        <summary>
              A Reader that outputs fixed-length records from a file.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedLengthRecordReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FixedLengthRecordReaderV2 (long record_bytes, Nullable&lt;long&gt; header_bytes = null, Nullable&lt;long&gt; footer_bytes = null, Nullable&lt;long&gt; hop_bytes = null, string container = null, string shared_name = null, string encoding = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FixedLengthRecordReaderV2(int64 record_bytes, valuetype System.Nullable`1&lt;int64&gt; header_bytes, valuetype System.Nullable`1&lt;int64&gt; footer_bytes, valuetype System.Nullable`1&lt;int64&gt; hop_bytes, string container, string shared_name, string encoding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record_bytes" Type="System.Int64" />
        <Parameter Name="header_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="footer_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="hop_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="encoding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="record_bytes">
              Number of bytes in the record.
            </param>
        <param name="header_bytes">
              Optional argument
              Number of bytes in the header, defaults to 0.
            </param>
        <param name="footer_bytes">
              Optional argument
              Number of bytes in the footer, defaults to 0.
            </param>
        <param name="hop_bytes">
              Optional argument
              Number of bytes to hop before each read. Default of 0 means using
              record_bytes.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="encoding">
              Optional argument
              The type of encoding for the file. Currently ZLIB and GZIP
              are supported. Defaults to none.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedLengthRecordReaderV2'.
            </param>
        <summary>
              A Reader that outputs fixed-length records from a file.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedUnigramCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FixedUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, string vocab_file = null, Nullable&lt;float&gt; distortion = null, Nullable&lt;long&gt; num_reserved_ids = null, Nullable&lt;long&gt; num_shards = null, Nullable&lt;long&gt; shard = null, float[] unigrams = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FixedUnigramCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, string vocab_file, valuetype System.Nullable`1&lt;float32&gt; distortion, valuetype System.Nullable`1&lt;int64&gt; num_reserved_ids, valuetype System.Nullable`1&lt;int64&gt; num_shards, valuetype System.Nullable`1&lt;int64&gt; shard, float32[] unigrams, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="vocab_file" Type="System.String" />
        <Parameter Name="distortion" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_reserved_ids" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="num_shards" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shard" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="unigrams" Type="System.Single[]" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="vocab_file">
              Optional argument
              Each valid line in this file (which should have a CSV-like format)
              corresponds to a valid word ID. IDs are in sequential order, starting from
              num_reserved_ids. The last entry in each line is expected to be a value
              corresponding to the count or relative probability. Exactly one of vocab_file
              and unigrams needs to be passed to this op.
            </param>
        <param name="distortion">
              Optional argument
              The distortion is used to skew the unigram probability distribution.
              Each weight is first raised to the distortion's power before adding to the
              internal unigram distribution. As a result, distortion = 1.0 gives regular
              unigram sampling (as defined by the vocab file), and distortion = 0.0 gives
              a uniform distribution.
            </param>
        <param name="num_reserved_ids">
              Optional argument
              Optionally some reserved IDs can be added in the range [0,
              ..., num_reserved_ids) by the users. One use case is that a special unknown
              word token is used as ID 0. These IDs will have a sampling probability of 0.
            </param>
        <param name="num_shards">
              Optional argument
              A sampler can be used to sample from a subset of the original range
              in order to speed up the whole computation through parallelism. This parameter
              (together with 'shard') indicates the number of partitions that are being
              used in the overall computation.
            </param>
        <param name="shard">
              Optional argument
              A sampler can be used to sample from a subset of the original range
              in order to speed up the whole computation through parallelism. This parameter
              (together with 'num_shards') indicates the particular partition number of a
              sampler op, when partitioning is being used.
            </param>
        <param name="unigrams">
              Optional argument
              A list of unigram counts or probabilities, one per ID in sequential
              order. Exactly one of vocab_file and unigrams should be passed to this op.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedUnigramCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              A unigram sampler could use a fixed unigram distribution read from a
              file or passed in as an in-memory array instead of building up the distribution
              from data on the fly. There is also an option to skew the distribution by
              applying a distortion power to the weights.
              
              The vocabulary file should be in CSV-like format, with the last field
              being the weight associated with the word.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Floor (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Floor(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Floor'.
            </param>
        <summary>
              Returns element-wise largest integer not greater than x.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FloorDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FloorDiv(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FloorDiv'.
            </param>
        <summary>
              Returns x // y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>FloorDiv</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorMod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FloorMod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FloorMod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FloorMod'.
            </param>
        <summary>
              Returns element-wise remainder of division. When <c>x &amp;lt; 0</c> xor <c>y &amp;lt; 0</c> is
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              true, this follows Python semantics in that the result here is consistent
              with a flooring divide. E.g. <c>floor(x / y) * y + mod(x, y) = x</c>.
              
              *NOTE*: <c>FloorMod</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalAvgPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FractionalAvgPool (TensorFlow.TFOutput value, float[] pooling_ratio, Nullable&lt;bool&gt; pseudo_random = null, Nullable&lt;bool&gt; overlapping = null, Nullable&lt;bool&gt; deterministic = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FractionalAvgPool(valuetype TensorFlow.TFOutput value, float32[] pooling_ratio, valuetype System.Nullable`1&lt;bool&gt; pseudo_random, valuetype System.Nullable`1&lt;bool&gt; overlapping, valuetype System.Nullable`1&lt;bool&gt; deterministic, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="pooling_ratio" Type="System.Single[]" />
        <Parameter Name="pseudo_random" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="deterministic" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="pooling_ratio">
              Pooling ratio for each dimension of <c>value</c>, currently only
              supports row and col dimension and should be &amp;gt;= 1.0. For example, a valid
              pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements
              must be 1.0 because we don't allow pooling on batch and channels
              dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions
              respectively.
            </param>
        <param name="pseudo_random">
              Optional argument
              When set to True, generates the pooling sequence in a
              pseudorandom fashion, otherwise, in a random fashion. Check paper [Benjamin
              Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071) for
              difference between pseudorandom and random.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              <c>index  0  1  2  3  4</c><c>value  20 5  16 3  7</c>
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [41/3, 26/3] for fractional avg pooling.
            </param>
        <param name="deterministic">
              Optional argument
              When set to True, a fixed pooling region will be used when
              iterating over a FractionalAvgPool node in the computation graph. Mainly used
              in unit test to make FractionalAvgPool deterministic.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalAvgPool'.
            </param>
        <summary>
              Performs fractional average pooling on the input.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: output tensor after fractional avg pooling.
              row_pooling_sequence: row pooling sequence, needed to calculate gradient.
              col_pooling_sequence: column pooling sequence, needed to calculate gradient.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Fractional average pooling is similar to Fractional max pooling in the pooling
              region generation step. The only difference is that after pooling regions are
              generated, a mean operation is performed instead of a max operation in each
              pooling region.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalAvgPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FractionalAvgPoolGrad (TensorFlow.TFOutput orig_input_tensor_shape, TensorFlow.TFOutput out_backprop, TensorFlow.TFOutput row_pooling_sequence, TensorFlow.TFOutput col_pooling_sequence, Nullable&lt;bool&gt; overlapping = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FractionalAvgPoolGrad(valuetype TensorFlow.TFOutput orig_input_tensor_shape, valuetype TensorFlow.TFOutput out_backprop, valuetype TensorFlow.TFOutput row_pooling_sequence, valuetype TensorFlow.TFOutput col_pooling_sequence, valuetype System.Nullable`1&lt;bool&gt; overlapping, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input_tensor_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="row_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="col_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input_tensor_shape">
              Original input tensor shape for <c>fractional_avg_pool</c></param>
        <param name="out_backprop">
              4-D with shape <c>[batch, height, width, channels]</c>.  Gradients
              w.r.t. the output of <c>fractional_avg_pool</c>.
            </param>
        <param name="row_pooling_sequence">
              row pooling sequence, form pooling region with
              col_pooling_sequence.
            </param>
        <param name="col_pooling_sequence">
              column pooling sequence, form pooling region with
              row_pooling sequence.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              <c>index  0  1  2  3  4</c><c>value  20 5  16 3  7</c>
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [41/3, 26/3] for fractional avg pooling.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalAvgPoolGrad'.
            </param>
        <summary>
              Computes gradient of the FractionalAvgPool function.
            </summary>
        <returns>
              4-D.  Gradients w.r.t. the input of <c>fractional_avg_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Unlike FractionalMaxPoolGrad, we don't need to find arg_max for
              FractionalAvgPoolGrad, we just need to evenly back-propagate each element of
              out_backprop to those indices that form the same pooling cell. Therefore, we
              just need to know the shape of original input tensor, instead of the whole
              tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalMaxPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FractionalMaxPool (TensorFlow.TFOutput value, float[] pooling_ratio, Nullable&lt;bool&gt; pseudo_random = null, Nullable&lt;bool&gt; overlapping = null, Nullable&lt;bool&gt; deterministic = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FractionalMaxPool(valuetype TensorFlow.TFOutput value, float32[] pooling_ratio, valuetype System.Nullable`1&lt;bool&gt; pseudo_random, valuetype System.Nullable`1&lt;bool&gt; overlapping, valuetype System.Nullable`1&lt;bool&gt; deterministic, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="pooling_ratio" Type="System.Single[]" />
        <Parameter Name="pseudo_random" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="deterministic" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="pooling_ratio">
              Pooling ratio for each dimension of <c>value</c>, currently only
              supports row and col dimension and should be &amp;gt;= 1.0. For example, a valid
              pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements
              must be 1.0 because we don't allow pooling on batch and channels
              dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions
              respectively.
            </param>
        <param name="pseudo_random">
              Optional argument
              When set to True, generates the pooling sequence in a
              pseudorandom fashion, otherwise, in a random fashion. Check paper [Benjamin
              Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071) for
              difference between pseudorandom and random.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              <c>index  0  1  2  3  4</c><c>value  20 5  16 3  7</c>
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [20, 16] for fractional max pooling.
            </param>
        <param name="deterministic">
              Optional argument
              When set to True, a fixed pooling region will be used when
              iterating over a FractionalMaxPool node in the computation graph. Mainly used
              in unit test to make FractionalMaxPool deterministic.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalMaxPool'.
            </param>
        <summary>
              Performs fractional max pooling on the input.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: output tensor after fractional max pooling.
              row_pooling_sequence: row pooling sequence, needed to calculate gradient.
              col_pooling_sequence: column pooling sequence, needed to calculate gradient.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Fractional max pooling is slightly different than regular max pooling.  In
              regular max pooling, you downsize an input set by taking the maximum value of
              smaller N x N subsections of the set (often 2x2), and try to reduce the set by
              a factor of N, where N is an integer.  Fractional max pooling, as you might
              expect from the word "fractional", means that the overall reduction ratio N
              does not have to be an integer.
              
              The sizes of the pooling regions are generated randomly but are fairly uniform.
              For example, let's look at the height dimension, and the constraints on the
              list of rows that will be pool boundaries.
              
              First we define the following:
              
              1.  input_row_length : the number of rows from the input set
              2.  output_row_length : which will be smaller than the input
              3.  alpha = input_row_length / output_row_length : our reduction ratio
              4.  K = floor(alpha)
              5.  row_pooling_sequence : this is the result list of pool boundary rows
              
              Then, row_pooling_sequence should satisfy:
              
              1.  a[0] = 0 : the first value of the sequence is 0
              2.  a[end] = input_row_length : the last value of the sequence is the size
              3.  K &amp;lt;= (a[i+1] - a[i]) &amp;lt;= K+1 : all intervals are K or K+1 size
              4.  length(row_pooling_sequence) = output_row_length+1
              
              For more details on fractional max pooling, see this paper:
              [Benjamin Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalMaxPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FractionalMaxPoolGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput out_backprop, TensorFlow.TFOutput row_pooling_sequence, TensorFlow.TFOutput col_pooling_sequence, Nullable&lt;bool&gt; overlapping = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FractionalMaxPoolGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput out_backprop, valuetype TensorFlow.TFOutput row_pooling_sequence, valuetype TensorFlow.TFOutput col_pooling_sequence, valuetype System.Nullable`1&lt;bool&gt; overlapping, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="row_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="col_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              Original input for <c>fractional_max_pool</c></param>
        <param name="orig_output">
              Original output for <c>fractional_max_pool</c></param>
        <param name="out_backprop">
              4-D with shape <c>[batch, height, width, channels]</c>.  Gradients
              w.r.t. the output of <c>fractional_max_pool</c>.
            </param>
        <param name="row_pooling_sequence">
              row pooling sequence, form pooling region with
              col_pooling_sequence.
            </param>
        <param name="col_pooling_sequence">
              column pooling sequence, form pooling region with
              row_pooling sequence.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              <c>index  0  1  2  3  4</c><c>value  20 5  16 3  7</c>
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [20, 16] for fractional max pooling.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalMaxPoolGrad'.
            </param>
        <summary>
              Computes gradient of the FractionalMaxPool function.
            </summary>
        <returns>
              4-D.  Gradients w.r.t. the input of <c>fractional_max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Functions">
      <MemberSignature Language="C#" Value="public TensorFlow.TFFunction[] Functions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class TensorFlow.TFFunction[] Functions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFFunction[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns an the functions that have been defined in the graph.
            </summary>
        <value>The functions.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedBatchNorm">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FusedBatchNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput offset, TensorFlow.TFOutput mean, TensorFlow.TFOutput variance, Nullable&lt;float&gt; epsilon = null, string data_format = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FusedBatchNorm(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput scale, valuetype TensorFlow.TFOutput offset, valuetype TensorFlow.TFOutput mean, valuetype TensorFlow.TFOutput variance, valuetype System.Nullable`1&lt;float32&gt; epsilon, string data_format, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="offset" Type="TensorFlow.TFOutput" />
        <Parameter Name="mean" Type="TensorFlow.TFOutput" />
        <Parameter Name="variance" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A 4D Tensor for input data.
            </param>
        <param name="scale">
              A 1D Tensor for scaling factor, to scale the normalized x.
            </param>
        <param name="offset">
              A 1D Tensor for offset, to shift to the normalized x.
            </param>
        <param name="mean">
              A 1D Tensor for population mean. Used for inference only;
              must be empty for training.
            </param>
        <param name="variance">
              A 1D Tensor for population variance. Used for inference only;
              must be empty for training.
            </param>
        <param name="epsilon">
              Optional argument
              A small float number added to the variance of x.
            </param>
        <param name="data_format">
              Optional argument
              The data format for x and y. Either "NHWC" (default) or "NCHW".
            </param>
        <param name="is_training">
              Optional argument
              A bool value to indicate the operation is for training (default)
              or inference.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNorm'.
            </param>
        <summary>
              Batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: A 4D Tensor for output data.
              batch_mean: A 1D Tensor for the computed batch mean, to be used by TensorFlow
              to compute the running mean.
              batch_variance: A 1D Tensor for the computed batch variance, to be used by
              TensorFlow to compute the running variance.
              reserve_space_1: A 1D Tensor for the computed batch mean, to be reused
              in the gradient computation.
              reserve_space_2: A 1D Tensor for the computed batch variance (inverted variance
              in the cuDNN case), to be reused in the gradient computation.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
              The size of 1D Tensors matches the dimension C of the 4D Tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedBatchNormGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FusedBatchNormGrad (TensorFlow.TFOutput y_backprop, TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput reserve_space_1, TensorFlow.TFOutput reserve_space_2, Nullable&lt;float&gt; epsilon = null, string data_format = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FusedBatchNormGrad(valuetype TensorFlow.TFOutput y_backprop, valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput scale, valuetype TensorFlow.TFOutput reserve_space_1, valuetype TensorFlow.TFOutput reserve_space_2, valuetype System.Nullable`1&lt;float32&gt; epsilon, string data_format, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space_1" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space_2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y_backprop">
              A 4D Tensor for the gradient with respect to y.
            </param>
        <param name="x">
              A 4D Tensor for input data.
            </param>
        <param name="scale">
              A 1D Tensor for scaling factor, to scale the normalized x.
            </param>
        <param name="reserve_space_1">
              When is_training is True, a 1D Tensor for the computed batch
              mean to be reused in gradient computation. When is_training is
              False, a 1D Tensor for the population mean to be reused in both
              1st and 2nd order gradient computation.
            </param>
        <param name="reserve_space_2">
              When is_training is True, a 1D Tensor for the computed batch
              variance (inverted variance in the cuDNN case) to be reused in
              gradient computation. When is_training is False, a 1D Tensor
              for the population variance to be reused in both 1st and 2nd
              order gradient computation.
            </param>
        <param name="epsilon">
              Optional argument
              A small float number added to the variance of x.
            </param>
        <param name="data_format">
              Optional argument
              The data format for y_backprop, x, x_backprop.
              Either "NHWC" (default) or "NCHW".
            </param>
        <param name="is_training">
              Optional argument
              A bool value to indicate the operation is for training (default)
              or inference.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNormGrad'.
            </param>
        <summary>
              Gradient for batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              x_backprop: A 4D Tensor for the gradient with respect to x.
              scale_backprop: A 1D Tensor for the gradient with respect to scale.
              offset_backprop: A 1D Tensor for the gradient with respect to offset.
              reserve_space_3: Unused placeholder to match the mean input in FusedBatchNorm.
              reserve_space_4: Unused placeholder to match the variance input
              in FusedBatchNorm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
              The size of 1D Tensors matches the dimension C of the 4D Tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedBatchNormGradV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FusedBatchNormGradV2 (TensorFlow.TFOutput y_backprop, TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput reserve_space_1, TensorFlow.TFOutput reserve_space_2, Nullable&lt;float&gt; epsilon = null, string data_format = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FusedBatchNormGradV2(valuetype TensorFlow.TFOutput y_backprop, valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput scale, valuetype TensorFlow.TFOutput reserve_space_1, valuetype TensorFlow.TFOutput reserve_space_2, valuetype System.Nullable`1&lt;float32&gt; epsilon, string data_format, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space_1" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space_2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y_backprop">
              A 4D Tensor for the gradient with respect to y.
            </param>
        <param name="x">
              A 4D Tensor for input data.
            </param>
        <param name="scale">
              A 1D Tensor for scaling factor, to scale the normalized x.
            </param>
        <param name="reserve_space_1">
              When is_training is True, a 1D Tensor for the computed batch
              mean to be reused in gradient computation. When is_training is
              False, a 1D Tensor for the population mean to be reused in both
              1st and 2nd order gradient computation.
            </param>
        <param name="reserve_space_2">
              When is_training is True, a 1D Tensor for the computed batch
              variance (inverted variance in the cuDNN case) to be reused in
              gradient computation. When is_training is False, a 1D Tensor
              for the population variance to be reused in both 1st and 2nd
              order gradient computation.
            </param>
        <param name="epsilon">
              Optional argument
              A small float number added to the variance of x.
            </param>
        <param name="data_format">
              Optional argument
              The data format for y_backprop, x, x_backprop.
              Either "NHWC" (default) or "NCHW".
            </param>
        <param name="is_training">
              Optional argument
              A bool value to indicate the operation is for training (default)
              or inference.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNormGradV2'.
            </param>
        <summary>
              Gradient for batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              x_backprop: A 4D Tensor for the gradient with respect to x.
              scale_backprop: A 1D Tensor for the gradient with respect to scale.
              offset_backprop: A 1D Tensor for the gradient with respect to offset.
              reserve_space_3: Unused placeholder to match the mean input in FusedBatchNorm.
              reserve_space_4: Unused placeholder to match the variance input
              in FusedBatchNorm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
              The size of 1D Tensors matches the dimension C of the 4D Tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedBatchNormV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FusedBatchNormV2 (TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput offset, TensorFlow.TFOutput mean, TensorFlow.TFOutput variance, Nullable&lt;float&gt; epsilon = null, string data_format = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FusedBatchNormV2(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput scale, valuetype TensorFlow.TFOutput offset, valuetype TensorFlow.TFOutput mean, valuetype TensorFlow.TFOutput variance, valuetype System.Nullable`1&lt;float32&gt; epsilon, string data_format, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="offset" Type="TensorFlow.TFOutput" />
        <Parameter Name="mean" Type="TensorFlow.TFOutput" />
        <Parameter Name="variance" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A 4D Tensor for input data.
            </param>
        <param name="scale">
              A 1D Tensor for scaling factor, to scale the normalized x.
            </param>
        <param name="offset">
              A 1D Tensor for offset, to shift to the normalized x.
            </param>
        <param name="mean">
              A 1D Tensor for population mean. Used for inference only;
              must be empty for training.
            </param>
        <param name="variance">
              A 1D Tensor for population variance. Used for inference only;
              must be empty for training.
            </param>
        <param name="epsilon">
              Optional argument
              A small float number added to the variance of x.
            </param>
        <param name="data_format">
              Optional argument
              The data format for x and y. Either "NHWC" (default) or "NCHW".
            </param>
        <param name="is_training">
              Optional argument
              A bool value to indicate the operation is for training (default)
              or inference.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNormV2'.
            </param>
        <summary>
              Batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: A 4D Tensor for output data.
              batch_mean: A 1D Tensor for the computed batch mean, to be used by TensorFlow
              to compute the running mean.
              batch_variance: A 1D Tensor for the computed batch variance, to be used by
              TensorFlow to compute the running variance.
              reserve_space_1: A 1D Tensor for the computed batch mean, to be reused
              in the gradient computation.
              reserve_space_2: A 1D Tensor for the computed batch variance (inverted variance
              in the cuDNN case), to be reused in the gradient computation.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
              The size of 1D Tensors matches the dimension C of the 4D Tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedPadConv2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FusedPadConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, TensorFlow.TFOutput filter, string mode, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FusedPadConv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, valuetype TensorFlow.TFOutput filter, string mode, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, in_height, in_width, in_channels]</c>.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of <c>input</c>.
            </param>
        <param name="filter">
              4-D with shape
              <c>[filter_height, filter_width, in_channels, out_channels]</c>.
            </param>
        <param name="mode">
        </param>
        <param name="strides">
              1-D of length 4.  The stride of the sliding window for each dimension
              of <c>input</c>. Must be in the same order as the dimension specified with format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedPadConv2D'.
            </param>
        <summary>
              Performs a padding as a preprocess during a convolution.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Similar to FusedResizeAndPadConv2d, this op allows for an optimized
              implementation where the spatial padding transformation stage is fused with the
              im2col lookup, but in this case without the bilinear filtering required for
              resizing. Fusing the padding prevents the need to write out the intermediate
              results as whole tensors, reducing memory pressure, and we can get some latency
              gains by merging the transformation calculations.
              The data_format attribute for Conv2D isn't supported by this op, and 'NHWC'
              order is used instead.
              Internally this op uses a single per-graph scratch buffer, which means that it
              will block if multiple versions are being run in parallel. This is because this
              operator is primarily an optimization to minimize memory usage.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedResizeAndPadConv2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FusedResizeAndPadConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput size, TensorFlow.TFOutput paddings, TensorFlow.TFOutput filter, string mode, long[] strides, string padding, Nullable&lt;bool&gt; resize_align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FusedResizeAndPadConv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput paddings, valuetype TensorFlow.TFOutput filter, string mode, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; resize_align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="resize_align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, in_height, in_width, in_channels]</c>.
            </param>
        <param name="size">
              A 1-D int32 Tensor of 2 elements: <c>new_height, new_width</c>.  The
              new size for the images.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of <c>input</c>.
            </param>
        <param name="filter">
              4-D with shape
              <c>[filter_height, filter_width, in_channels, out_channels]</c>.
            </param>
        <param name="mode">
        </param>
        <param name="strides">
              1-D of length 4.  The stride of the sliding window for each dimension
              of <c>input</c>. Must be in the same order as the dimension specified with format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="resize_align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and output tensors are
              aligned, preserving the values at the corner pixels. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedResizeAndPadConv2D'.
            </param>
        <summary>
              Performs a resize and padding as a preprocess during a convolution.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It's often possible to do spatial transformations more efficiently as part of
              the packing stage of a convolution, so this op allows for an optimized
              implementation where these stages are fused together. This prevents the need to
              write out the intermediate results as whole tensors, reducing memory pressure,
              and we can get some latency gains by merging the transformation calculations.
              The data_format attribute for Conv2D isn't supported by this op, and defaults to
              'NHWC' order.
              Internally this op uses a single per-graph scratch buffer, which means that it
              will block if multiple versions are being run in parallel. This is because this
              operator is primarily an optimization to minimize memory usage.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gather">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Gather (TensorFlow.TFOutput parameters, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Gather(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
        </param>
        <param name="indices">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Gather'.
            </param>
        <summary>
              Gather slices from <c>params</c> according to <c>indices</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>indices</c> must be an integer tensor of any dimension (usually 0-D or 1-D).
              Produces an output tensor with shape <c>indices.shape + params.shape[1:]</c> where:
              
               <code>
              # Scalar indices
              output[:, ..., :] = params[indices, :, ... :]
              
              # Vector indices
              output[i, :, ..., :] = params[indices[i], :, ... :]
              
              # Higher rank indices
              output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]
               </code>
              
              If <c>indices</c> is a permutation and <c>len(indices) == params.shape[0]</c> then
              this operation will permute <c>params</c> accordingly.
              
              <c>validate_indices</c>: DEPRECATED. If this operation is assigned to CPU, values in
              <c>indices</c> are always validated to be within range. If assigned to GPU,
              out-of-bound indices result in safe but unspecified behavior, which may include
              raising an error.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/Gather.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GatherNd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GatherNd (TensorFlow.TFOutput parameters, TensorFlow.TFOutput indices, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GatherNd(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              The tensor from which to gather values.
            </param>
        <param name="indices">
              Index tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GatherNd'.
            </param>
        <summary>
              Gather slices from <c>params</c> into a Tensor with shape specified by <c>indices</c>.
            </summary>
        <returns>
              Values from <c>params</c> gathered from indices given by <c>indices</c>, with
              shape <c>indices.shape[:-1] + params.shape[indices.shape[-1]:]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>indices</c> is an K-dimensional integer tensor, best thought of as a
              (K-1)-dimensional tensor of indices into <c>params</c>, where each element defines a
              slice of <c>params</c>:
              
              output[\\(i_0, ..., i_{K-2}\\)] = params[indices[\\(i_0, ..., i_{K-2}\\)]]
              
              Whereas in <c>tf.gather</c><c>indices</c> defines slices into the first
              dimension of <c>params</c>, in <c>tf.gather_nd</c>, <c>indices</c> defines slices into the
              first <c>N</c> dimensions of <c>params</c>, where <c>N = indices.shape[-1]</c>.
              
              The last dimension of <c>indices</c> can be at most the rank of
              <c>params</c>:
              
              indices.shape[-1] &amp;lt;= params.rank
              
              The last dimension of <c>indices</c> corresponds to elements
              (if <c>indices.shape[-1] == params.rank</c>) or slices
              (if <c>indices.shape[-1] &amp;lt; params.rank</c>) along dimension <c>indices.shape[-1]</c>
              of <c>params</c>.  The output tensor has shape
              
              indices.shape[:-1] + params.shape[indices.shape[-1]:]
              
              Note that on CPU, if an out of bound index is found, an error is returned.
              On GPU, if an out of bound index is found, a 0 is stored in the
              corresponding output value.
              
              Some examples below.
              
              Simple indexing into a matrix:
              
               <code>
              indices = [[0, 0], [1, 1]]
              params = [['a', 'b'], ['c', 'd']]
              output = ['a', 'd']
               </code>
              
              Slice indexing into a matrix:
              
               <code>
              indices = [[1], [0]]
              params = [['a', 'b'], ['c', 'd']]
              output = [['c', 'd'], ['a', 'b']]
               </code>
              
              Indexing into a 3-tensor:
              
               <code>
              indices = [[1]]
              params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
              output = [[['a1', 'b1'], ['c1', 'd1']]]
              
              
              indices = [[0, 1], [1, 0]]
              params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
              output = [['c0', 'd0'], ['a1', 'b1']]
              
              
              indices = [[0, 0, 1], [1, 0, 1]]
              params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
              output = ['b0', 'b1']
               </code>
              
              Batched indexing into a matrix:
              
               <code>
              indices = [[[0, 0]], [[0, 1]]]
              params = [['a', 'b'], ['c', 'd']]
              output = [['a'], ['b']]
               </code>
              
              Batched slice indexing into a matrix:
              
               <code>
              indices = [[[1]], [[0]]]
              params = [['a', 'b'], ['c', 'd']]
              output = [[['c', 'd']], [['a', 'b']]]
               </code>
              
              Batched indexing into a 3-tensor:
              
               <code>
              indices = [[[1]], [[0]]]
              params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
              output = [[[['a1', 'b1'], ['c1', 'd1']]],
              [[['a0', 'b0'], ['c0', 'd0']]]]
              
              indices = [[[0, 1], [1, 0]], [[0, 0], [1, 1]]]
              params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
              output = [[['c0', 'd0'], ['a1', 'b1']],
              [['a0', 'b0'], ['c1', 'd1']]]
              
              
              indices = [[[0, 0, 1], [1, 0, 1]], [[0, 1, 1], [1, 1, 0]]]
              params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
              output = [['b0', 'b1'], ['d0', 'c1']]
               </code>
              
              See also <c>tf.gather</c> and <c>tf.batch_gather</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GatherV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GatherV2 (TensorFlow.TFOutput parameters, TensorFlow.TFOutput indices, TensorFlow.TFOutput axis, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GatherV2(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              The tensor from which to gather values. Must be at least rank
              <c>axis + 1</c>.
            </param>
        <param name="indices">
              Index tensor. Must be in range <c>[0, params.shape[axis])</c>.
            </param>
        <param name="axis">
              The axis in <c>params</c> to gather <c>indices</c> from. Defaults to the first
              dimension. Supports negative indexes.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GatherV2'.
            </param>
        <summary>
              Gather slices from <c>params</c> axis <c>axis</c> according to <c>indices</c>.
            </summary>
        <returns>
              Values from <c>params</c> gathered from indices given by <c>indices</c>, with
              shape <c>params.shape[:axis] + indices.shape + params.shape[axis + 1:]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>indices</c> must be an integer tensor of any dimension (usually 0-D or 1-D).
              Produces an output tensor with shape <c>params.shape[:axis] + indices.shape +
              params.shape[axis + 1:]</c> where:
              
               <code>
              # Scalar indices (output is rank(params) - 1).
              output[a_0, ..., a_n, b_0, ..., b_n] =
              params[a_0, ..., a_n, indices, b_0, ..., b_n]
              
              # Vector indices (output is rank(params)).
              output[a_0, ..., a_n, i, b_0, ..., b_n] =
              params[a_0, ..., a_n, indices[i], b_0, ..., b_n]
              
              # Higher rank indices (output is rank(params) + rank(indices) - 1).
              output[a_0, ..., a_n, i, ..., j, b_0, ... b_n] =
              params[a_0, ..., a_n, indices[i, ..., j], b_0, ..., b_n]
               </code>
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/Gather.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
              
              Note that on CPU, if an out of bound index is found, an error is returned.
              On GPU, if an out of bound index is found, a 0 is stored in the
              corresponding output value.
              
              See also <c>tf.batch_gather</c> and <c>tf.gather_nd</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GcsConfigureBlockCache">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation GcsConfigureBlockCache (TensorFlow.TFOutput max_cache_size, TensorFlow.TFOutput block_size, TensorFlow.TFOutput max_staleness, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation GcsConfigureBlockCache(valuetype TensorFlow.TFOutput max_cache_size, valuetype TensorFlow.TFOutput block_size, valuetype TensorFlow.TFOutput max_staleness, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="max_cache_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_staleness" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="max_cache_size">
        </param>
        <param name="block_size">
        </param>
        <param name="max_staleness">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GcsConfigureBlockCache'.
            </param>
        <summary>
              Re-configures the GCS block cache with the new configuration values.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              If the values are the same as already configured values, this op is a no-op. If
              they are different, the current contents of the block cache is dropped, and a
              new block cache is created fresh.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GcsConfigureCredentials">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation GcsConfigureCredentials (TensorFlow.TFOutput json, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation GcsConfigureCredentials(valuetype TensorFlow.TFOutput json, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="json">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GcsConfigureCredentials'.
            </param>
        <summary>
              Configures the credentials used by the GCS client of the local TF runtime.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The json input can be of the format:
              
              1. Refresh Token:
              {
              "client_id": "&amp;lt;redacted&amp;gt;",
              "client_secret": "&amp;lt;redacted&amp;gt;",
              "refresh_token: "&amp;lt;redacted&amp;gt;",
              "type": "authorized_user",
              }
              
              2. Service Account:
              {
              "type": "service_account",
              "project_id": "&amp;lt;redacted&amp;gt;",
              "private_key_id": "&amp;lt;redacted&amp;gt;",
              "private_key": "------BEGIN PRIVATE KEY-----\n&amp;lt;REDACTED&amp;gt;\n-----END PRIVATE KEY------\n",
              "client_email": "&amp;lt;REDACTED&amp;gt;@&amp;lt;REDACTED&amp;gt;.iam.gserviceaccount.com",
              "client_id": "&amp;lt;REDACTED&amp;gt;",
              # Some additional fields elided
              }
              
              Note the credentials established through this method are shared across all
              sessions run on this runtime.
              
              Note be sure to feed the inputs to this op to ensure the credentials are not
              stored in a constant op within the graph that might accidentally be checkpointed
              or in other ways be persisted or exfiltrated.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateBigQueryReaderPartitions">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GenerateBigQueryReaderPartitions (string project_id, string dataset_id, string table_id, string[] columns, long timestamp_millis, long num_partitions, string test_end_point = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GenerateBigQueryReaderPartitions(string project_id, string dataset_id, string table_id, string[] columns, int64 timestamp_millis, int64 num_partitions, string test_end_point, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project_id" Type="System.String" />
        <Parameter Name="dataset_id" Type="System.String" />
        <Parameter Name="table_id" Type="System.String" />
        <Parameter Name="columns" Type="System.String[]" />
        <Parameter Name="timestamp_millis" Type="System.Int64" />
        <Parameter Name="num_partitions" Type="System.Int64" />
        <Parameter Name="test_end_point" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="project_id">
              GCP project ID.
            </param>
        <param name="dataset_id">
              BigQuery Dataset ID.
            </param>
        <param name="table_id">
              Table to read.
            </param>
        <param name="columns">
              List of columns to read. Leave empty to read all columns.
            </param>
        <param name="timestamp_millis">
              Table snapshot timestamp in millis since epoch. Relative
              (negative or zero) snapshot times are not allowed. For more details, see
              'Table Decorators' in BigQuery docs.
            </param>
        <param name="num_partitions">
              Number of partitions to split the table into.
            </param>
        <param name="test_end_point">
              Optional argument
              Do not use. For testing purposes only.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GenerateBigQueryReaderPartitions'.
            </param>
        <summary>
              Generates serialized partition messages suitable for batch reads.
            </summary>
        <returns>
              Serialized table partitions.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op should not be used directly by clients. Instead, the
              bigquery_reader_ops.py file defines a clean interface to the reader.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateVocabRemapping">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; GenerateVocabRemapping (TensorFlow.TFOutput new_vocab_file, TensorFlow.TFOutput old_vocab_file, long new_vocab_offset, long num_new_vocab, Nullable&lt;long&gt; old_vocab_size = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; GenerateVocabRemapping(valuetype TensorFlow.TFOutput new_vocab_file, valuetype TensorFlow.TFOutput old_vocab_file, int64 new_vocab_offset, int64 num_new_vocab, valuetype System.Nullable`1&lt;int64&gt; old_vocab_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="new_vocab_file" Type="TensorFlow.TFOutput" />
        <Parameter Name="old_vocab_file" Type="TensorFlow.TFOutput" />
        <Parameter Name="new_vocab_offset" Type="System.Int64" />
        <Parameter Name="num_new_vocab" Type="System.Int64" />
        <Parameter Name="old_vocab_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="new_vocab_file">
              Path to the new vocab file.
            </param>
        <param name="old_vocab_file">
              Path to the old vocab file.
            </param>
        <param name="new_vocab_offset">
              How many entries into the new vocab file to start reading.
            </param>
        <param name="num_new_vocab">
              Number of entries in the new vocab file to remap.
            </param>
        <param name="old_vocab_size">
              Optional argument
              Number of entries in the old vocab file to consider.  If -1,
              use the entire old vocabulary.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GenerateVocabRemapping'.
            </param>
        <summary>
              Given a path to new and old vocabulary files, returns a remapping Tensor of
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              remapping: A Tensor of length num_new_vocab where the element at index i
              is equal to the old ID that maps to the new ID i.  This element is -1 for any
              new ID that is not found in the old vocabulary.
              num_present: Number of new vocab entries found in old vocab.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              length <c>num_new_vocab</c>, where <c>remapping[i]</c> contains the row number in the old
              vocabulary that corresponds to row <c>i</c> in the new vocabulary (starting at line
              <c>new_vocab_offset</c> and up to <c>num_new_vocab</c> entities), or <c>-1</c> if entry <c>i</c>
              in the new vocabulary is not in the old vocabulary.  The old vocabulary is
              constrained to the first <c>old_vocab_size</c> entries if <c>old_vocab_size</c> is not the
              default value of -1.
              
              <c>num_vocab_offset</c> enables
              use in the partitioned variable case, and should generally be set through
              examining partitioning info.  The format of the files should be a text file,
              with each line containing a single entity within the vocabulary.
              
              For example, with <c>new_vocab_file</c> a text file containing each of the following
              elements on a single line: <c>[f0, f1, f2, f3]</c>, old_vocab_file = [f1, f0, f3],
              <c>num_new_vocab = 3, new_vocab_offset = 1</c>, the returned remapping would be
              <c>[0, -1, 2]</c>.
              
              The op also returns a count of how many entries in the new vocabulary
              were present in the old vocabulary, which is used to calculate the number of
              values to initialize in a weight matrix remapping
              
              This functionality can be used to remap both row vocabularies (typically,
              features) and column vocabularies (typically, classes) from TensorFlow
              checkpoints.  Note that the partitioning logic relies on contiguous vocabularies
              corresponding to div-partitioned variables.  Moreover, the underlying remapping
              uses an IndexTable (as opposed to an inexact CuckooTable), so client code should
              use the corresponding index_table_from_file() as the FeatureColumn framework
              does (as opposed to tf.feature_to_id(), which uses a CuckooTable).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TensorFlow.TFOperation&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class TensorFlow.TFOperation&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(TensorFlow.TFGraph/&lt;GetEnumerator&gt;d__986))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TensorFlow.TFOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the enumerator that returns all the TFOperations in a graph.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlobalVariablesInitializer">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation[] GetGlobalVariablesInitializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation[] GetGlobalVariablesInitializer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the list of all registered global variables.
            </summary>
        <returns>The array of variables that should be initialized.</returns>
        <remarks>
            After this method is invoked the list of pending initialization variables
            is cleared.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRandomSeeds">
      <MemberSignature Language="C#" Value="public void GetRandomSeeds (Nullable&lt;int&gt; operationSeed, out int graphSeed, out int localSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetRandomSeeds(valuetype System.Nullable`1&lt;int32&gt; operationSeed, int32 graphSeed, int32 localSeed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationSeed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="graphSeed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="localSeed" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="operationSeed">The seed value that might be set.</param>
        <param name="graphSeed">Returned graph seed.</param>
        <param name="localSeed">Returned local seed.</param>
        <summary>
            Returns the graph and local seeds based on an optionally set incoming seed value.
            </summary>
        <remarks>
            This helper function returns two seeds derived from graph-level and op-level seeds.
            Many random operations internally use the two seeds to allow user to change 
            the seed globally for a graph, or for only specific operations.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionHandle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GetSessionHandle (TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GetSessionHandle(valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to be stored.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionHandle'.
            </param>
        <summary>
              Store the input tensor in the state of the current session.
            </summary>
        <returns>
              The handle for the tensor stored in the session state, represented
              as a string.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionHandleV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GetSessionHandleV2 (TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GetSessionHandleV2(valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to be stored.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionHandleV2'.
            </param>
        <summary>
              Store the input tensor in the state of the current session.
            </summary>
        <returns>
              The handle for the tensor stored in the session state, represented
              as a ResourceHandle object.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GetSessionTensor (TensorFlow.TFOutput handle, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GetSessionTensor(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle for a tensor stored in the session state.
            </param>
        <param name="dtype">
              The type of the output value.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionTensor'.
            </param>
        <summary>
              Get the value of the tensor specified by its handle.
            </summary>
        <returns>
              The tensor for the given handle.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetShape">
      <MemberSignature Language="C#" Value="public long[] GetShape (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64[] GetShape(valuetype TensorFlow.TFOutput output, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">The output operation to probe.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
             Returns the tensor shape for the specific output pparameters as an array of longs.
            </summary>
        <returns>null for single dimension, .</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorNumDims">
      <MemberSignature Language="C#" Value="public int GetTensorNumDims (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTensorNumDims(valuetype TensorFlow.TFOutput output, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">The tensor to probe.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Returns the number of dimensions of the Tensor referenced by output
            </summary>
        <returns>The number of dimensions of the tensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorShape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFShape GetTensorShape (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFShape GetTensorShape(valuetype TensorFlow.TFOutput output, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">The tensor that you want to look up.  </param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
             Returns the shape of a tensor specified in <paramref name="output" />.
             </summary>
        <returns>The tensor shape.    If the number of dimensions in the shape is unknown or the shape is, a scalar, the values in the array will be zero. Otherwise, each element of will be set corresponding to the size of the dimension. An  unknown dimension is represented by -1.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalNorm">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GlobalNorm (TensorFlow.TFOutput[] tensors, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GlobalNorm(valuetype TensorFlow.TFOutput[] tensors, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensors" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensors">The input tensors.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Computes the global norm of multiple tensors.
            </summary>
        <returns>A clipped <see cref="T:TensorFlow.TFOutput">tensor</see>.</returns>
        <remarks>
          <para>
             Given a tuple or list of tensors <paramref name="tensors" />, this operation returns the global norm of the elements in all tensors 
             in <paramref name="tensors" />. The global norm is computed as: <c>global_norm = sqrt(sum([l2norm(t)**2 for t in t_list]))</c>. Any 
             entries in <paramref name="tensors" /> that are of type None are ignored.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Greater">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Greater (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Greater(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Greater'.
            </param>
        <summary>
              Returns the truth value of (x &amp;gt; y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Greater</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GreaterEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GreaterEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GreaterEqual'.
            </param>
        <summary>
              Returns the truth value of (x &amp;gt;= y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>GreaterEqual</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GuaranteeConst">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GuaranteeConst (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GuaranteeConst(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GuaranteeConst'.
            </param>
        <summary>
              Gives a guarantee to the TF runtime that the input tensor is a constant.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The runtime is then free to make optimizations based on this.
              
              Only accepts value typed tensors as inputs and rejects resource variable handles
              as input.
              
              Returns the input tensor without modification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashTable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HashTable (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HashTable(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
              If true and shared_name is empty, the table is shared
              using the node name.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HashTable'.
            </param>
        <summary>
              Creates a non-initialized hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a hash table, specifying the type of its keys and values.
              Before using the table you will have to initialize it.  After initialization the
              table will be immutable.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HashTableV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HashTableV2(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
              If true and shared_name is empty, the table is shared
              using the node name.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HashTableV2'.
            </param>
        <summary>
              Creates a non-initialized hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a hash table, specifying the type of its keys and values.
              Before using the table you will have to initialize it.  After initialization the
              table will be immutable.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HistogramFixedWidth">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HistogramFixedWidth (TensorFlow.TFOutput values, TensorFlow.TFOutput value_range, TensorFlow.TFOutput nbins, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HistogramFixedWidth(valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput value_range, valuetype TensorFlow.TFOutput nbins, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="value_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="nbins" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              Numeric <c>Tensor</c>.
            </param>
        <param name="value_range">
              Shape [2] <c>Tensor</c> of same <c>dtype</c> as <c>values</c>.
              values &amp;lt;= value_range[0] will be mapped to hist[0],
              values &amp;gt;= value_range[1] will be mapped to hist[-1].
            </param>
        <param name="nbins">
              Scalar <c>int32 Tensor</c>.  Number of histogram bins.
            </param>
        <param name="dtype">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HistogramFixedWidth'.
            </param>
        <summary>
              Return histogram of values.
            </summary>
        <returns>
              A 1-D <c>Tensor</c> holding histogram of values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given the tensor <c>values</c>, this operation returns a rank 1 histogram counting
              the number of entries in <c>values</c> that fall into every bin.  The bins are
              equal width and determined by the arguments <c>value_range</c> and <c>nbins</c>.
              
               <code>
              # Bins will be:  (-inf, 1), [1, 2), [2, 3), [3, 4), [4, inf)
              nbins = 5
              value_range = [0.0, 5.0]
              new_values = [-1.0, 0.0, 1.5, 2.0, 5.0, 15]
              
              with tf.get_default_session() as sess:
              hist = tf.histogram_fixed_width(new_values, value_range, nbins=5)
              variables.global_variables_initializer().run()
              sess.run(hist) =&amp;gt; [2, 1, 1, 0, 2]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="HistogramSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HistogramSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HistogramSummary(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar.  Tag to use for the <c>Summary.Value</c>.
            </param>
        <param name="values">
              Any shape. Values to use to build the histogram.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HistogramSummary'.
            </param>
        <summary>
              Outputs a <c>Summary</c> protocol buffer with a histogram.
            </summary>
        <returns>
              Scalar. Serialized <c>Summary</c> protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated
              [<c>Summary</c>](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)
              has one summary value containing a histogram for <c>values</c>.
              
              This op reports an <c>InvalidArgument</c> error if any value is not finite.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostConst">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HostConst (TensorFlow.TFTensor value, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HostConst(class TensorFlow.TFTensor value, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFTensor" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              Attr <c>value</c> is the tensor to return.
            </param>
        <param name="dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HostConst'.
            </param>
        <summary>
              Returns a constant tensor on the host. Only for writing C++ tests.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HSVToRGB">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HSVToRGB (TensorFlow.TFOutput images, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HSVToRGB(valuetype TensorFlow.TFOutput images, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              1-D or higher rank. HSV data to convert. Last dimension must be size 3.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HSVToRGB'.
            </param>
        <summary>
              Convert one or more images from HSV to RGB.
            </summary>
        <returns>
          <c>images</c> converted to RGB.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a tensor of the same shape as the <c>images</c> tensor, containing the RGB
              value of the pixels. The output is only well defined if the value in <c>images</c>
              are in <c>[0,1]</c>.
              
              See <c>rgb_to_hsv</c> for a description of the HSV encoding.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Identity (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Identity(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Identity'.
            </param>
        <summary>
              Return a tensor with the same shape and contents as the input tensor or value.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentityN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] IdentityN (TensorFlow.TFOutput[] input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] IdentityN(valuetype TensorFlow.TFOutput[] input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IdentityN'.
            </param>
        <summary>
              Returns a list of tensors with the same shapes and contents as the input
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              tensors.
              
              This op can be used to override the gradient for complicated functions. For
              example, suppose y = f(x) and we wish to apply a custom function g for backprop
              such that dx = g(dy). In Python,
              
               <code>
              with tf.get_default_graph().gradient_override_map(
              {'IdentityN': 'OverrideGradientWithG'}):
              y, _ = identity_n([f(x), x])
              
              @tf.RegisterGradient('OverrideGradientWithG')
              def ApplyG(op, dy, _):
              return [None, g(dy)]  # Do not backprop to f(x).
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentityReader">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IdentityReader (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IdentityReader(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IdentityReader'.
            </param>
        <summary>
              A Reader that outputs the queued work as both the key and value.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              To use, enqueue strings in a Queue.  ReaderRead will take the front
              work string and output (work, work).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentityReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IdentityReaderV2 (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IdentityReaderV2(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IdentityReaderV2'.
            </param>
        <summary>
              A Reader that outputs the queued work as both the key and value.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              To use, enqueue strings in a Queue.  ReaderRead will take the front
              work string and output (work, work).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IFFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IFFT (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IFFT(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT'.
            </param>
        <summary>
              Inverse fast Fourier transform.
            </summary>
        <returns>
              A complex tensor of the same shape as <c>input</c>. The inner-most
              dimension of <c>input</c> is replaced with its inverse 1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.ifft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 1-dimensional discrete Fourier transform over the
              inner-most dimension of <c>input</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IFFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IFFT2D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IFFT2D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT2D'.
            </param>
        <summary>
              Inverse 2D fast Fourier transform.
            </summary>
        <returns>
              A complex tensor of the same shape as <c>input</c>. The inner-most 2
              dimensions of <c>input</c> are replaced with their inverse 2D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.ifft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 2-dimensional discrete Fourier transform over the
              inner-most 2 dimensions of <c>input</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IFFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IFFT3D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IFFT3D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT3D'.
            </param>
        <summary>
              Inverse 3D fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as <c>input</c>. The inner-most 3
              dimensions of <c>input</c> are replaced with their inverse 3D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.ifftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 3-dimensional discrete Fourier transform over the
              inner-most 3 dimensions of <c>input</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Igamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Igamma (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Igamma(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Igamma'.
            </param>
        <summary>
              Compute the lower regularized incomplete Gamma function <c>P(a, x)</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The lower regularized incomplete Gamma function is defined as:
              
              
              \\(P(a, x) = gamma(a, x) / Gamma(a) = 1 - Q(a, x)\\)
              
              where
              
              \\(gamma(a, x) = \\int_{0}^{x} t^{a-1} exp(-t) dt\\)
              
              is the lower incomplete Gamma function.
              
              Note, above <c>Q(a, x)</c> (<c>Igammac</c>) is the upper regularized complete
              Gamma function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Igammac">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Igammac (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Igammac(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Igammac'.
            </param>
        <summary>
              Compute the upper regularized incomplete Gamma function <c>Q(a, x)</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The upper regularized incomplete Gamma function is defined as:
              
              \\(Q(a, x) = Gamma(a, x) / Gamma(a) = 1 - P(a, x)\\)
              
              where
              
              \\(Gamma(a, x) = int_{x}^{\infty} t^{a-1} exp(-t) dt\\)
              
              is the upper incomplete Gama function.
              
              Note, above <c>P(a, x)</c> (<c>Igamma</c>) is the lower regularized complete
              Gamma function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgammaGradA">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IgammaGradA (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IgammaGradA(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IgammaGradA'.
            </param>
        <summary>
              Computes the gradient of <c>igamma(a, x)</c> wrt <c>a</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Imag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Imag (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Imag(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Imag'.
            </param>
        <summary>
              Returns the imaginary part of a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>input</c> of complex numbers, this operation returns a tensor of
              type <c>float</c> that is the imaginary part of each element in <c>input</c>. All
              elements in <c>input</c> must be complex numbers of the form \\(a + bj\\), where *a*
              is the real part and *b* is the imaginary part returned by this operation.
              
              For example:
              
               <code>
              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
              tf.imag(input) ==&amp;gt; [4.75, 5.75]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ImageSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, Nullable&lt;long&gt; max_images = null, TensorFlow.TFTensor bad_color = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ImageSummary(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, valuetype System.Nullable`1&lt;int64&gt; max_images, class TensorFlow.TFTensor bad_color, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_images" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="bad_color" Type="TensorFlow.TFTensor" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar. Used to build the <c>tag</c> attribute of the summary values.
            </param>
        <param name="tensor">
              4-D of shape <c>[batch_size, height, width, channels]</c> where
              <c>channels</c> is 1, 3, or 4.
            </param>
        <param name="max_images">
              Optional argument
              Max number of batch elements to generate images for.
            </param>
        <param name="bad_color">
              Optional argument
              Color to use for pixels with non-finite values.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ImageSummary'.
            </param>
        <summary>
              Outputs a <c>Summary</c> protocol buffer with images.
            </summary>
        <returns>
              Scalar. Serialized <c>Summary</c> protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The summary has up to <c>max_images</c> summary values containing images. The
              images are built from <c>tensor</c> which must be 4-D with shape <c>[batch_size,
              height, width, channels]</c> and where <c>channels</c> can be:
              
              *  1: <c>tensor</c> is interpreted as Grayscale.
              *  3: <c>tensor</c> is interpreted as RGB.
              *  4: <c>tensor</c> is interpreted as RGBA.
              
              The images have the same number of channels as the input tensor. For float
              input, the values are normalized one image at a time to fit in the range
              <c>[0, 255]</c>.  <c>uint8</c> values are unchanged.  The op uses two different
              normalization algorithms:
              
              *  If the input values are all positive, they are rescaled so the largest one
              is 255.
              
              *  If any input value is negative, the values are shifted so input value 0.0
              is at 127.  They are then rescaled so that either the smallest value is 0,
              or the largest one is 255.
              
              The <c>tag</c> argument is a scalar <c>Tensor</c> of type <c>string</c>.  It is used to
              build the <c>tag</c> of the summary values:
              
              *  If <c>max_images</c> is 1, the summary value tag is '*tag*/image'.
              *  If <c>max_images</c> is greater than 1, the summary value tags are
              generated sequentially as '*tag*/image/0', '*tag*/image/1', etc.
              
              The <c>bad_color</c> argument is the color to use in the generated images for
              non-finite input values.  It is a <c>uint8</c> 1-D tensor of length <c>channels</c>.
              Each element must be in the range <c>[0, 255]</c> (It represents the value of a
              pixel in the output image).  Non-finite values in the input tensor are
              replaced by this tensor in the output image.  The default value is the color
              red.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImmutableConst">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ImmutableConst (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string memory_region_name, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ImmutableConst(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string memory_region_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="memory_region_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              Type of the returned tensor.
            </param>
        <param name="shape">
              Shape of the returned tensor.
            </param>
        <param name="memory_region_name">
              Name of readonly memory region used by the tensor, see
              NewReadOnlyMemoryRegionFromFile in tensorflow::Env.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ImmutableConst'.
            </param>
        <summary>
              Returns immutable tensor from memory region.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The current implementation memmaps the tensor from a file.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (byte[] buffer, string prefix = &quot;&quot;, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(unsigned int8[] buffer, string prefix, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="buffer">A byte array containing the serialized graph.</param>
        <param name="prefix">A prefix that will be prepended to names of nodes in the graph when they are imported into the graph.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph held in a byte array into this graph, using the specified prefix.
            </summary>
        <returns>The import.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (byte[] buffer, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(unsigned int8[] buffer, class TensorFlow.TFImportGraphDefOptions options, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="TensorFlow.TFImportGraphDefOptions" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="buffer">A byte array containing the serialized graph.</param>
        <param name="options">Importing graph options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph held in a byte array into this graph, using the specified import options.
            </summary>
        <returns>The import.</returns>
        <remarks>
              If you are tryig to load a file stored using the SavedModel file format, you should use the <see cref="T:TensorFlow.TFSession.FromSavedModel" /> API instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (TensorFlow.TFBuffer graphDef, string prefix = &quot;&quot;, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class TensorFlow.TFBuffer graphDef, string prefix, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graphDef">A buffer containing the serialized graph.</param>
        <param name="prefix">A prefix that will be prepended to names of nodes in the <paramref name="graphDef" /> when they are imported into the graph.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph into this graph, using the specified prefix.
            </summary>
        <returns>The import.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (TensorFlow.TFBuffer graphDef, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class TensorFlow.TFBuffer graphDef, class TensorFlow.TFImportGraphDefOptions options, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="options" Type="TensorFlow.TFImportGraphDefOptions" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graphDef">A buffer containing the serialized graph.</param>
        <param name="options">Importing graph options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph into this graph, using the specified importing options.
            </summary>
        <returns>The import.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportGraphDef">
      <MemberSignature Language="C#" Value="public void ImportGraphDef (TensorFlow.TFBuffer graphDef, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFOutput[] returnOutputs, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ImportGraphDef(class TensorFlow.TFBuffer graphDef, class TensorFlow.TFImportGraphDefOptions options, valuetype TensorFlow.TFOutput[] returnOutputs, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="options" Type="TensorFlow.TFImportGraphDefOptions" />
        <Parameter Name="returnOutputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graphDef">Serialized graph definition (in protocol buffer format).</param>
        <param name="options">Import options.</param>
        <param name="returnOutputs">Array large enough to contain all the return options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Imports a graph serialized into the graph
            </summary>
        <remarks>
              If you are tryig to load a file stored using the SavedModel file format, you should use the <see cref="T:TensorFlow.TFSession.FromSavedModel" /> API instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InfeedDequeue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InfeedDequeue (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InfeedDequeue(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of elements in the tensor.
            </param>
        <param name="shape">
              The shape of the tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InfeedDequeue'.
            </param>
        <summary>
              A placeholder op for a value that will be fed into the computation.
            </summary>
        <returns>
              A tensor that will be provided using the infeed mechanism.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InfeedDequeueTuple">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] InfeedDequeueTuple (TensorFlow.TFDataType[] dtypes, TensorFlow.TFShape[] shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] InfeedDequeueTuple(valuetype TensorFlow.TFDataType[] dtypes, class TensorFlow.TFShape[] shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
              The element types of each element in <c>outputs</c>.
            </param>
        <param name="shapes">
              The shapes of each tensor in <c>outputs</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InfeedDequeueTuple'.
            </param>
        <summary>
              A placeholder op for multiple values that will be fed into the computation
            </summary>
        <returns>
              A list of tensors that will be provided using the infeed mechanism.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              simultaneously as an XLA tuple.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InfeedEnqueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InfeedEnqueue (TensorFlow.TFOutput input, TensorFlow.TFShape shape = null, Nullable&lt;long&gt; device_ordinal = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InfeedEnqueue(valuetype TensorFlow.TFOutput input, class TensorFlow.TFShape shape, valuetype System.Nullable`1&lt;int64&gt; device_ordinal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="device_ordinal" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A tensor that will be provided using the infeed mechanism.
            </param>
        <param name="shape">
              Optional argument
              The shape of the tensor.
            </param>
        <param name="device_ordinal">
              Optional argument
              The TPU device to use. This should be -1 when the Op
              is running on a TPU device, and &amp;gt;= 0 when the Op is running on the CPU
              device.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InfeedEnqueue'.
            </param>
        <summary>
              An op which feeds a single Tensor value into the computation.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InfeedEnqueueTuple">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InfeedEnqueueTuple (TensorFlow.TFOutput[] inputs, TensorFlow.TFShape[] shapes, Nullable&lt;long&gt; device_ordinal = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InfeedEnqueueTuple(valuetype TensorFlow.TFOutput[] inputs, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; device_ordinal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="device_ordinal" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              A list of tensors that will be provided using the infeed mechanism.
            </param>
        <param name="shapes">
              The shapes of each tensor in <c>inputs</c>.
            </param>
        <param name="device_ordinal">
              Optional argument
              The TPU device to use. This should be -1 when the Op
              is running on a TPU device, and &amp;gt;= 0 when the Op is running on the CPU
              device.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InfeedEnqueueTuple'.
            </param>
        <summary>
              An op which feeds multiple Tensor values into the computation as an XLA tuple.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeTable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InitializeTable (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InitializeTable(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to a table which will be initialized.
            </param>
        <param name="keys">
              Keys of type Tkey.
            </param>
        <param name="values">
              Values of type Tval.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTable'.
            </param>
        <summary>
              Table initializer that takes two tensors for keys and values respectively.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeTableFromTextFile">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InitializeTableFromTextFile (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput filename, long key_index, long value_index, Nullable&lt;long&gt; vocab_size = null, string delimiter = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InitializeTableFromTextFile(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput filename, int64 key_index, int64 value_index, valuetype System.Nullable`1&lt;int64&gt; vocab_size, string delimiter, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="key_index" Type="System.Int64" />
        <Parameter Name="value_index" Type="System.Int64" />
        <Parameter Name="vocab_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="delimiter" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to a table which will be initialized.
            </param>
        <param name="filename">
              Filename of a vocabulary text file.
            </param>
        <param name="key_index">
              Column index in a line to get the table <c>key</c> values from.
            </param>
        <param name="value_index">
              Column index that represents information of a line to get the table
              <c>value</c> values from.
            </param>
        <param name="vocab_size">
              Optional argument
              Number of elements of the file, use -1 if unknown.
            </param>
        <param name="delimiter">
              Optional argument
              Delimiter to separate fields in a line.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTableFromTextFile'.
            </param>
        <summary>
              Initializes a table from a text file.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              It inserts one key-value pair into the table for each line of the file.
              The key and value is extracted from the whole line content, elements from the
              split line based on <c>delimiter</c> or the line number (starting from zero).
              Where to extract the key and value from a line is specified by <c>key_index</c> and
              <c>value_index</c>.
              
              - A value of -1 means use the line number(starting from zero), expects <c>int64</c>.
              - A value of -2 means use the whole line content, expects <c>string</c>.
              - A value &amp;gt;= 0 means use the index (starting at zero) of the split line based
              on <c>delimiter</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeTableFromTextFileV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InitializeTableFromTextFileV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput filename, long key_index, long value_index, Nullable&lt;long&gt; vocab_size = null, string delimiter = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InitializeTableFromTextFileV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput filename, int64 key_index, int64 value_index, valuetype System.Nullable`1&lt;int64&gt; vocab_size, string delimiter, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="key_index" Type="System.Int64" />
        <Parameter Name="value_index" Type="System.Int64" />
        <Parameter Name="vocab_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="delimiter" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to a table which will be initialized.
            </param>
        <param name="filename">
              Filename of a vocabulary text file.
            </param>
        <param name="key_index">
              Column index in a line to get the table <c>key</c> values from.
            </param>
        <param name="value_index">
              Column index that represents information of a line to get the table
              <c>value</c> values from.
            </param>
        <param name="vocab_size">
              Optional argument
              Number of elements of the file, use -1 if unknown.
            </param>
        <param name="delimiter">
              Optional argument
              Delimiter to separate fields in a line.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTableFromTextFileV2'.
            </param>
        <summary>
              Initializes a table from a text file.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              It inserts one key-value pair into the table for each line of the file.
              The key and value is extracted from the whole line content, elements from the
              split line based on <c>delimiter</c> or the line number (starting from zero).
              Where to extract the key and value from a line is specified by <c>key_index</c> and
              <c>value_index</c>.
              
              - A value of -1 means use the line number(starting from zero), expects <c>int64</c>.
              - A value of -2 means use the whole line content, expects <c>string</c>.
              - A value &amp;gt;= 0 means use the index (starting at zero) of the split line based
              on <c>delimiter</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InitializeTableV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InitializeTableV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to a table which will be initialized.
            </param>
        <param name="keys">
              Keys of type Tkey.
            </param>
        <param name="values">
              Values of type Tval.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTableV2'.
            </param>
        <summary>
              Table initializer that takes two tensors for keys and values respectively.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InplaceAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InplaceAdd (TensorFlow.TFOutput x, TensorFlow.TFOutput i, TensorFlow.TFOutput v, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InplaceAdd(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput i, valuetype TensorFlow.TFOutput v, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="i" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A <c>Tensor</c> of type T.
            </param>
        <param name="i">
              A vector. Indices into the left-most dimension of <c>x</c>.
            </param>
        <param name="v">
              A <c>Tensor</c> of type T. Same dimension sizes as x except the first dimension, which must be the same as i's size.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InplaceAdd'.
            </param>
        <summary>
              Adds v into specified rows of x.
              
              Computes y = x; y[i, :] += v; return y.
            </summary>
        <returns>
              A <c>Tensor</c> of type T. An alias of <c>x</c>. The content of <c>y</c> is undefined if there are duplicates in <c>i</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InplaceSub">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InplaceSub (TensorFlow.TFOutput x, TensorFlow.TFOutput i, TensorFlow.TFOutput v, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InplaceSub(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput i, valuetype TensorFlow.TFOutput v, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="i" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A <c>Tensor</c> of type T.
            </param>
        <param name="i">
              A vector. Indices into the left-most dimension of <c>x</c>.
            </param>
        <param name="v">
              A <c>Tensor</c> of type T. Same dimension sizes as x except the first dimension, which must be the same as i's size.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InplaceSub'.
            </param>
        <summary>
              Subtracts <c>v</c> into specified rows of <c>x</c>.
              
              Computes y = x; y[i, :] -= v; return y.
            </summary>
        <returns>
              A <c>Tensor</c> of type T. An alias of <c>x</c>. The content of <c>y</c> is undefined if there are duplicates in <c>i</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InplaceUpdate">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InplaceUpdate (TensorFlow.TFOutput x, TensorFlow.TFOutput i, TensorFlow.TFOutput v, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InplaceUpdate(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput i, valuetype TensorFlow.TFOutput v, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="i" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A tensor of type <c>T</c>.
            </param>
        <param name="i">
              A vector. Indices into the left-most dimension of <c>x</c>.
            </param>
        <param name="v">
              A <c>Tensor</c> of type T. Same dimension sizes as x except the first dimension, which must be the same as i's size.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InplaceUpdate'.
            </param>
        <summary>
              Updates specified rows with values in <c>v</c>.
              
              Computes <c>x[i, :] = v; return x</c>.
            </summary>
        <returns>
              A <c>Tensor</c> of type T. An alias of <c>x</c>. The content of <c>y</c> is undefined if there are duplicates in <c>i</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InTopK">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InTopK (TensorFlow.TFOutput predictions, TensorFlow.TFOutput targets, long k, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InTopK(valuetype TensorFlow.TFOutput predictions, valuetype TensorFlow.TFOutput targets, int64 k, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predictions" Type="TensorFlow.TFOutput" />
        <Parameter Name="targets" Type="TensorFlow.TFOutput" />
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="predictions">
              A <c>batch_size</c> x <c>classes</c> tensor.
            </param>
        <param name="targets">
              A <c>batch_size</c> vector of class ids.
            </param>
        <param name="k">
              Number of top elements to look at for computing precision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InTopK'.
            </param>
        <summary>
              Says whether the targets are in the top <c>K</c> predictions.
            </summary>
        <returns>
              Computed Precision at <c>k</c> as a <c>bool Tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This outputs a <c>batch_size</c> bool array, an entry <c>out[i]</c> is <c>true</c> if the
              prediction for the target class is among the top <c>k</c> predictions among
              all predictions for example <c>i</c>. Note that the behavior of <c>InTopK</c> differs
              from the <c>TopK</c> op in its handling of ties; if multiple classes have the
              same prediction value and straddle the top-<c>k</c> boundary, all of those
              classes are considered to be in the top <c>k</c>.
              
              More formally, let
              
              \\(predictions_i\\) be the predictions for all classes for example <c>i</c>,
              \\(targets_i\\) be the target class for example <c>i</c>,
              \\(out_i\\) be the output for example <c>i</c>,
              
              $$out_i = predictions_{i, targets_i} \in TopKIncludingTies(predictions_i)$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InTopKV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InTopKV2 (TensorFlow.TFOutput predictions, TensorFlow.TFOutput targets, TensorFlow.TFOutput k, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InTopKV2(valuetype TensorFlow.TFOutput predictions, valuetype TensorFlow.TFOutput targets, valuetype TensorFlow.TFOutput k, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predictions" Type="TensorFlow.TFOutput" />
        <Parameter Name="targets" Type="TensorFlow.TFOutput" />
        <Parameter Name="k" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="predictions">
              A <c>batch_size</c> x <c>classes</c> tensor.
            </param>
        <param name="targets">
              A <c>batch_size</c> vector of class ids.
            </param>
        <param name="k">
              Number of top elements to look at for computing precision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InTopKV2'.
            </param>
        <summary>
              Says whether the targets are in the top <c>K</c> predictions.
            </summary>
        <returns>
              Computed precision at <c>k</c> as a <c>bool Tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This outputs a <c>batch_size</c> bool array, an entry <c>out[i]</c> is <c>true</c> if the
              prediction for the target class is among the top <c>k</c> predictions among
              all predictions for example <c>i</c>. Note that the behavior of <c>InTopK</c> differs
              from the <c>TopK</c> op in its handling of ties; if multiple classes have the
              same prediction value and straddle the top-<c>k</c> boundary, all of those
              classes are considered to be in the top <c>k</c>.
              
              More formally, let
              
              \\(predictions_i\\) be the predictions for all classes for example <c>i</c>,
              \\(targets_i\\) be the target class for example <c>i</c>,
              \\(out_i\\) be the output for example <c>i</c>,
              
              $$out_i = predictions_{i, targets_i} \in TopKIncludingTies(predictions_i)$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Inv (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Inv(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Inv'.
            </param>
        <summary>
              Computes the reciprocal of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = 1 / x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Invert (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Invert(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Invert'.
            </param>
        <summary>
              Flips all bits elementwise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have exactly those bits set, that are not set in <c>x</c>. The
              computation is performed on the underlying representation of x.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvertPermutation">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InvertPermutation (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InvertPermutation(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InvertPermutation'.
            </param>
        <summary>
              Computes the inverse permutation of a tensor.
            </summary>
        <returns>
              1-D.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes the inverse of an index permutation. It takes a 1-D
              integer tensor <c>x</c>, which represents the indices of a zero-based array, and
              swaps each value with its index position. In other words, for an output tensor
              <c>y</c> and an input tensor <c>x</c>, this operation computes the following:
              
              <c>y[x[i]] = i for i in [0, 1, ..., len(x) - 1]</c>
              
              The values must include 0. There can be no duplicate values or negative values.
              
              For example:
              
               <code>
              # tensor <c>x</c> is [3, 4, 0, 2, 1]
              invert_permutation(x) ==&amp;gt; [2, 4, 3, 0, 1]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="InvGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InvGrad (TensorFlow.TFOutput y, TensorFlow.TFOutput dy, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InvGrad(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput dy, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="dy">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InvGrad'.
            </param>
        <summary>
              Computes the gradient for the inverse of <c>x</c> wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, <c>grad = -dy * y*y</c>, where <c>y = 1/x</c>, and <c>dy</c>
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IRFFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IRFFT (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IRFFT(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [1]. The FFT length.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT'.
            </param>
        <summary>
              Inverse real-valued fast Fourier transform.
            </summary>
        <returns>
              A float32 tensor of the same rank as <c>input</c>. The inner-most
              dimension of <c>input</c> is replaced with the <c>fft_length</c> samples of its inverse
              1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.irfft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 1-dimensional discrete Fourier transform of a real-valued
              signal over the inner-most dimension of <c>input</c>.
              
              The inner-most dimension of <c>input</c> is assumed to be the result of <c>RFFT</c>: the
              <c>fft_length / 2 + 1</c> unique components of the DFT of a real-valued signal. If
              <c>fft_length</c> is not provided, it is computed from the size of the inner-most
              dimension of <c>input</c> (<c>fft_length = 2 * (inner - 1)</c>). If the FFT length used to
              compute <c>input</c> is odd, it should be provided since it cannot be inferred
              properly.
              
              Along the axis <c>IRFFT</c> is computed on, if <c>fft_length / 2 + 1</c> is smaller
              than the corresponding dimension of <c>input</c>, the dimension is cropped. If it is
              larger, the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IRFFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IRFFT2D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IRFFT2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [2]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT2D'.
            </param>
        <summary>
              Inverse 2D real-valued fast Fourier transform.
            </summary>
        <returns>
              A float32 tensor of the same rank as <c>input</c>. The inner-most 2
              dimensions of <c>input</c> are replaced with the <c>fft_length</c> samples of their
              inverse 2D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.irfft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 2-dimensional discrete Fourier transform of a real-valued
              signal over the inner-most 2 dimensions of <c>input</c>.
              
              The inner-most 2 dimensions of <c>input</c> are assumed to be the result of <c>RFFT2D</c>:
              The inner-most dimension contains the <c>fft_length / 2 + 1</c> unique components of
              the DFT of a real-valued signal. If <c>fft_length</c> is not provided, it is computed
              from the size of the inner-most 2 dimensions of <c>input</c>. If the FFT length used
              to compute <c>input</c> is odd, it should be provided since it cannot be inferred
              properly.
              
              Along each axis <c>IRFFT2D</c> is computed on, if <c>fft_length</c> (or
              <c>fft_length / 2 + 1</c> for the inner-most dimension) is smaller than the
              corresponding dimension of <c>input</c>, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IRFFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IRFFT3D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IRFFT3D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [3]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT3D'.
            </param>
        <summary>
              Inverse 3D real-valued fast Fourier transform.
            </summary>
        <returns>
              A float32 tensor of the same rank as <c>input</c>. The inner-most 3
              dimensions of <c>input</c> are replaced with the <c>fft_length</c> samples of their
              inverse 3D real Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.irfftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 3-dimensional discrete Fourier transform of a real-valued
              signal over the inner-most 3 dimensions of <c>input</c>.
              
              The inner-most 3 dimensions of <c>input</c> are assumed to be the result of <c>RFFT3D</c>:
              The inner-most dimension contains the <c>fft_length / 2 + 1</c> unique components of
              the DFT of a real-valued signal. If <c>fft_length</c> is not provided, it is computed
              from the size of the inner-most 3 dimensions of <c>input</c>. If the FFT length used
              to compute <c>input</c> is odd, it should be provided since it cannot be inferred
              properly.
              
              Along each axis <c>IRFFT3D</c> is computed on, if <c>fft_length</c> (or
              <c>fft_length / 2 + 1</c> for the inner-most dimension) is smaller than the
              corresponding dimension of <c>input</c>, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBoostedTreesEnsembleInitialized">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsBoostedTreesEnsembleInitialized (TensorFlow.TFOutput tree_ensemble_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsBoostedTreesEnsembleInitialized(valuetype TensorFlow.TFOutput tree_ensemble_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree_ensemble_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tree_ensemble_handle">
              Handle to the tree ensemble resouce.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsBoostedTreesEnsembleInitialized'.
            </param>
        <summary>
              Checks whether a tree ensemble has been initialized.
            </summary>
        <returns>
              output boolean on whether it is initialized or not.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBoostedTreesQuantileStreamResourceInitialized">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsBoostedTreesQuantileStreamResourceInitialized (TensorFlow.TFOutput quantile_stream_resource_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsBoostedTreesQuantileStreamResourceInitialized(valuetype TensorFlow.TFOutput quantile_stream_resource_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantile_stream_resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quantile_stream_resource_handle">
              resource; The reference to quantile stream resource handle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsBoostedTreesQuantileStreamResourceInitialized'.
            </param>
        <summary>
              Checks whether a quantile stream has been initialized.
            </summary>
        <returns>
              bool; True if the resource is initialized, False otherwise.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              An Op that checks if quantile stream resource is initialized.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsFinite (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsFinite(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsFinite'.
            </param>
        <summary>
              Returns which elements of x are finite.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              @compatibility(numpy)
              Equivalent to np.isfinite
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInf">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsInf (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsInf(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsInf'.
            </param>
        <summary>
              Returns which elements of x are Inf.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              @compatibility(numpy)
              Equivalent to np.isinf
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNan">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsNan (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsNan(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsNan'.
            </param>
        <summary>
              Returns which elements of x are NaN.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              @compatibility(numpy)
              Equivalent to np.isnan
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableInitialized">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsVariableInitialized (TensorFlow.TFOutput reference, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsVariableInitialized(valuetype TensorFlow.TFOutput reference, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node. May be uninitialized.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsVariableInitialized'.
            </param>
        <summary>
              Checks whether a tensor has been initialized.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs boolean scalar indicating whether the tensor has been initialized.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class TensorFlow.TFOperation Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name to lookup.</param>
        <summary>
            Gets the <see cref="T:TensorFlow.TFGraph" /> with the specified name, or null if the named operation does not exist in the graph.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Iterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Iterator (string shared_name, string container, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Iterator(string shared_name, string container, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shared_name">
        </param>
        <param name="container">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Iterator'.
            </param>
        <summary>
              A container for an iterator resource.
            </summary>
        <returns>
              A handle to the iterator that can be passed to a "MakeIterator"
              or "IteratorGetNext" op.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IteratorFromStringHandle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IteratorFromStringHandle (TensorFlow.TFOutput string_handle, TensorFlow.TFDataType[] output_types = null, TensorFlow.TFShape[] output_shapes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IteratorFromStringHandle(valuetype TensorFlow.TFOutput string_handle, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string_handle">
              A string representation of the given handle.
            </param>
        <param name="output_types">
              Optional argument
              If specified, defines the type of each tuple component in an
              element produced by the resulting iterator.
            </param>
        <param name="output_shapes">
              Optional argument
              If specified, defines the shape of each tuple component in an
              element produced by the resulting iterator.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorFromStringHandle'.
            </param>
        <summary>
              Converts the given string representing a handle to an iterator to a resource.
            </summary>
        <returns>
              A handle to an iterator resource.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IteratorGetNext">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] IteratorGetNext (TensorFlow.TFOutput iterator, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] IteratorGetNext(valuetype TensorFlow.TFOutput iterator, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iterator">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorGetNext'.
            </param>
        <summary>
              Gets the next output from the given iterator .
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IteratorGetNextAsOptional">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IteratorGetNextAsOptional (TensorFlow.TFOutput iterator, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IteratorGetNextAsOptional(valuetype TensorFlow.TFOutput iterator, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iterator">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorGetNextAsOptional'.
            </param>
        <summary>
              Gets the next output from the given iterator as an Optional variant.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IteratorGetNextSync">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] IteratorGetNextSync (TensorFlow.TFOutput iterator, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] IteratorGetNextSync(valuetype TensorFlow.TFOutput iterator, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iterator">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorGetNextSync'.
            </param>
        <summary>
              Gets the next output from the given iterator.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation is a synchronous version IteratorGetNext. It should only be used
              in situations where the iterator does not block the calling thread, or where
              the calling thread is not a member of the thread pool used to execute parallel
              operations (e.g. in eager mode).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IteratorToStringHandle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IteratorToStringHandle (TensorFlow.TFOutput resource_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IteratorToStringHandle(valuetype TensorFlow.TFOutput resource_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource_handle">
              A handle to an iterator resource.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorToStringHandle'.
            </param>
        <summary>
              Converts the given <c>resource_handle</c> representing an iterator to a string.
            </summary>
        <returns>
              A string representation of the given handle.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="L2Loss">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput L2Loss (TensorFlow.TFOutput t, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput L2Loss(valuetype TensorFlow.TFOutput t, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              Typically 2-D, but may have any dimensions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'L2Loss'.
            </param>
        <summary>
              L2 Loss.
            </summary>
        <returns>
              0-D.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes half the L2 norm of a tensor without the <c>sqrt</c>:
              
              output = sum(t ** 2) / 2
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LearnedUnigramCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LearnedUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LearnedUnigramCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LearnedUnigramCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LeftShift (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LeftShift(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LeftShift'.
            </param>
        <summary>
              Elementwise computes the bitwise left-shift of <c>x</c> and <c>y</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If <c>y</c> is negative, or greater than or equal to the width of <c>x</c> in bits the
              result is implementation defined.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Less">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Less (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Less(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Less'.
            </param>
        <summary>
              Returns the truth value of (x &amp;lt; y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Less</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LessEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LessEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LessEqual'.
            </param>
        <summary>
              Returns the truth value of (x &amp;lt;= y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>LessEqual</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lgamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Lgamma (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Lgamma(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Lgamma'.
            </param>
        <summary>
              Computes the log of the absolute value of <c>Gamma(x)</c> element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinSpace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LinSpace (TensorFlow.TFOutput start, TensorFlow.TFOutput stop, TensorFlow.TFOutput num, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LinSpace(valuetype TensorFlow.TFOutput start, valuetype TensorFlow.TFOutput stop, valuetype TensorFlow.TFOutput num, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="stop" Type="TensorFlow.TFOutput" />
        <Parameter Name="num" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">
              0-D tensor. First entry in the range.
            </param>
        <param name="stop">
              0-D tensor. Last entry in the range.
            </param>
        <param name="num">
              0-D tensor. Number of values to generate.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LinSpace'.
            </param>
        <summary>
              Generates values in an interval.
            </summary>
        <returns>
              1-D. The generated values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A sequence of <c>num</c> evenly-spaced values are generated beginning at <c>start</c>.
              If <c>num &amp;gt; 1</c>, the values in the sequence increase by <c>stop - start / num - 1</c>,
              so that the last one is exactly <c>stop</c>.
              
              For example:
              
               <code>
              tf.linspace(10.0, 12.0, 3, name="linspace") =&amp;gt; [ 10.0  11.0  12.0]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ListDiff">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ListDiff (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ListDiff(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D. Values to keep.
            </param>
        <param name="y">
              1-D. Values to remove.
            </param>
        <param name="out_idx">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ListDiff'.
            </param>
        <summary>
              Computes the difference between two lists of numbers or strings.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 1-D. Values present in <c>x</c> but not in <c>y</c>.
              idx: 1-D. Positions of <c>x</c> values preserved in <c>out</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Given a list <c>x</c> and a list <c>y</c>, this operation returns a list <c>out</c> that
              represents all values that are in <c>x</c> but not in <c>y</c>. The returned list <c>out</c>
              is sorted in the same order that the numbers appear in <c>x</c> (duplicates are
              preserved). This operation also returns a list <c>idx</c> that represents the
              position of each <c>out</c> element in <c>x</c>. In other words:
              
              <c>out[i] = x[idx[i]] for i in [0, 1, ..., len(out) - 1]</c>
              
              For example, given this input:
              
               <code>
              x = [1, 2, 3, 4, 5, 6]
              y = [1, 3, 5]
               </code>
              
              This operation would return:
              
               <code>
              out ==&amp;gt; [2, 4, 6]
              idx ==&amp;gt; [1, 3, 5]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="LMDBReader">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LMDBReader (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LMDBReader(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LMDBReader'.
            </param>
        <summary>
              A Reader that outputs the records from a LMDB file.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAndRemapMatrix">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LoadAndRemapMatrix (TensorFlow.TFOutput ckpt_path, TensorFlow.TFOutput old_tensor_name, TensorFlow.TFOutput row_remapping, TensorFlow.TFOutput col_remapping, TensorFlow.TFOutput initializing_values, long num_rows, long num_cols, Nullable&lt;long&gt; max_rows_in_memory = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LoadAndRemapMatrix(valuetype TensorFlow.TFOutput ckpt_path, valuetype TensorFlow.TFOutput old_tensor_name, valuetype TensorFlow.TFOutput row_remapping, valuetype TensorFlow.TFOutput col_remapping, valuetype TensorFlow.TFOutput initializing_values, int64 num_rows, int64 num_cols, valuetype System.Nullable`1&lt;int64&gt; max_rows_in_memory, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ckpt_path" Type="TensorFlow.TFOutput" />
        <Parameter Name="old_tensor_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="row_remapping" Type="TensorFlow.TFOutput" />
        <Parameter Name="col_remapping" Type="TensorFlow.TFOutput" />
        <Parameter Name="initializing_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_rows" Type="System.Int64" />
        <Parameter Name="num_cols" Type="System.Int64" />
        <Parameter Name="max_rows_in_memory" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ckpt_path">
              Path to the TensorFlow checkpoint (version 2, <c>TensorBundle</c>) from
              which the old matrix <c>Tensor</c> will be loaded.
            </param>
        <param name="old_tensor_name">
              Name of the 2-D <c>Tensor</c> to load from checkpoint.
            </param>
        <param name="row_remapping">
              An int <c>Tensor</c> of row remappings (generally created by
              <c>generate_vocab_remapping</c>).  Even if no row remapping is needed, this must
              still be an index-valued Tensor (e.g. [0, 1, 2, ...]), or a shifted
              index-valued <c>Tensor</c> (e.g. [8, 9, 10, ...], for partitioned <c>Variables</c>).
            </param>
        <param name="col_remapping">
              An int <c>Tensor</c> of column remappings (generally created by
              <c>generate_vocab_remapping</c>).  May be a size-0 <c>Tensor</c> if only row remapping
              is to be done (e.g. column ordering is the same).
            </param>
        <param name="initializing_values">
              A float <c>Tensor</c> containing  values to fill in for cells
              in the output matrix that are not loaded from the checkpoint. Length must be
              exactly the same as the number of missing / new cells.
            </param>
        <param name="num_rows">
              Number of rows (length of the 1st dimension) in the output matrix.
            </param>
        <param name="num_cols">
              Number of columns (length of the 2nd dimension) in the output matrix.
            </param>
        <param name="max_rows_in_memory">
              Optional argument
              The maximum number of rows to load from the checkpoint at
              once. If less than or equal to 0, the entire matrix will be loaded into
              memory. Setting this arg trades increased disk reads for lower memory usage.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadAndRemapMatrix'.
            </param>
        <summary>
              Loads a 2-D (matrix) <c>Tensor</c> with name <c>old_tensor_name</c> from the checkpoint
            </summary>
        <returns>
              Output matrix containing existing values loaded from the
              checkpoint, and with any missing values filled in from initializing_values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              at <c>ckpt_path</c> and potentially reorders its rows and columns using the
              specified remappings.
              
              Most users should use one of the wrapper initializers (such as
              <c>tf.contrib.framework.load_and_remap_matrix_initializer</c>) instead of this
              function directly.
              
              The remappings are 1-D tensors with the following properties:
              
              * <c>row_remapping</c> must have exactly <c>num_rows</c> entries. Row <c>i</c> of the output
              matrix will be initialized from the row corresponding to index
              <c>row_remapping[i]</c> in the old <c>Tensor</c> from the checkpoint.
              * <c>col_remapping</c> must have either 0 entries (indicating that no column
              reordering is needed) or <c>num_cols</c> entries. If specified, column <c>j</c> of the
              output matrix will be initialized from the column corresponding to index
              <c>col_remapping[j]</c> in the old <c>Tensor</c> from the checkpoint.
              * A value of -1 in either of the remappings signifies a "missing" entry. In that
              case, values from the <c>initializing_values</c> tensor will be used to fill that
              missing row or column. If <c>row_remapping</c> has <c>r</c> missing entries and
              <c>col_remapping</c> has <c>c</c> missing entries, then the following condition must be
              true:
              
              <c>(r * num_cols) + (c * num_rows) - (r * c) == len(initializing_values)</c>
              
              The remapping tensors can be generated using the GenerateVocabRemapping op.
              
              As an example, with row_remapping = [1, 0, -1], col_remapping = [0, 2, -1],
              initializing_values = [0.5, -0.5, 0.25, -0.25, 42], and w(i, j) representing
              the value from row i, column j of the old tensor in the checkpoint, the output
              matrix will look like the following:
              
              [[w(1, 0),  w(1, 2),  0.5],
              [w(0, 0),  w(0, 2), -0.5],
              [0.25,    -0.25,      42]]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingAdadeltaParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingAdadeltaParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, TensorFlow.TFOutput updates, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingAdadeltaParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, valuetype TensorFlow.TFOutput updates, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the Adadelta optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the Adadelta optimization algorithm.
            </param>
        <param name="updates">
              Value of updates used in the Adadelta optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingAdadeltaParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the Adadelta optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the Adadelta optimization algorithm.
              updates: A tensor containing the initial embedding table updates to use in embedding
              lookups using the Adadelta optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingAdadeltaParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingAdadeltaParametersGradAccumDebug (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, TensorFlow.TFOutput updates, TensorFlow.TFOutput gradient_accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingAdadeltaParametersGradAccumDebug(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, valuetype TensorFlow.TFOutput updates, valuetype TensorFlow.TFOutput gradient_accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the Adadelta optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the Adadelta optimization algorithm.
            </param>
        <param name="updates">
              Value of updates used in the Adadelta optimization algorithm.
            </param>
        <param name="gradient_accumulators">
              Value of gradient_accumulators used in the Adadelta optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingAdadeltaParametersGradAccumDebug'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the Adadelta optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the Adadelta optimization algorithm.
              updates: A tensor containing the initial embedding table updates to use in embedding
              lookups using the Adadelta optimization algorithm.
              gradient_accumulators: A tensor containing the initial embedding table gradient_accumulators to use in embedding
              lookups using the Adadelta optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingAdagradParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingAdagradParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingAdagradParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the Adagrad optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the Adagrad optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingAdagradParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the Adagrad optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingAdagradParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingAdagradParametersGradAccumDebug (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, TensorFlow.TFOutput gradient_accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingAdagradParametersGradAccumDebug(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, valuetype TensorFlow.TFOutput gradient_accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the Adagrad optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the Adagrad optimization algorithm.
            </param>
        <param name="gradient_accumulators">
              Value of gradient_accumulators used in the Adagrad optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingAdagradParametersGradAccumDebug'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the Adagrad optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the Adagrad optimization algorithm.
              gradient_accumulators: A tensor containing the initial embedding table gradient_accumulators to use in embedding
              lookups using the Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingADAMParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingADAMParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput momenta, TensorFlow.TFOutput velocities, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingADAMParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput momenta, valuetype TensorFlow.TFOutput velocities, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="momenta" Type="TensorFlow.TFOutput" />
        <Parameter Name="velocities" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the ADAM optimization algorithm.
            </param>
        <param name="momenta">
              Value of momenta used in the ADAM optimization algorithm.
            </param>
        <param name="velocities">
              Value of velocities used in the ADAM optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingADAMParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the ADAM optimization algorithm.
              momenta: A tensor containing the initial embedding table momenta to use in embedding
              lookups using the ADAM optimization algorithm.
              velocities: A tensor containing the initial embedding table velocities to use in embedding
              lookups using the ADAM optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingADAMParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingADAMParametersGradAccumDebug (TensorFlow.TFOutput parameters, TensorFlow.TFOutput momenta, TensorFlow.TFOutput velocities, TensorFlow.TFOutput gradient_accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingADAMParametersGradAccumDebug(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput momenta, valuetype TensorFlow.TFOutput velocities, valuetype TensorFlow.TFOutput gradient_accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="momenta" Type="TensorFlow.TFOutput" />
        <Parameter Name="velocities" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the ADAM optimization algorithm.
            </param>
        <param name="momenta">
              Value of momenta used in the ADAM optimization algorithm.
            </param>
        <param name="velocities">
              Value of velocities used in the ADAM optimization algorithm.
            </param>
        <param name="gradient_accumulators">
              Value of gradient_accumulators used in the ADAM optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingADAMParametersGradAccumDebug'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the ADAM optimization algorithm.
              momenta: A tensor containing the initial embedding table momenta to use in embedding
              lookups using the ADAM optimization algorithm.
              velocities: A tensor containing the initial embedding table velocities to use in embedding
              lookups using the ADAM optimization algorithm.
              gradient_accumulators: A tensor containing the initial embedding table gradient_accumulators to use in embedding
              lookups using the ADAM optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingCenteredRMSPropParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingCenteredRMSPropParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput mg, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingCenteredRMSPropParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput mg, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="mg" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the centered RMSProp optimization algorithm.
            </param>
        <param name="ms">
              Value of ms used in the centered RMSProp optimization algorithm.
            </param>
        <param name="mom">
              Value of mom used in the centered RMSProp optimization algorithm.
            </param>
        <param name="mg">
              Value of mg used in the centered RMSProp optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingCenteredRMSPropParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the centered RMSProp optimization algorithm.
              ms: A tensor containing the initial embedding table ms to use in embedding
              lookups using the centered RMSProp optimization algorithm.
              mom: A tensor containing the initial embedding table mom to use in embedding
              lookups using the centered RMSProp optimization algorithm.
              mg: A tensor containing the initial embedding table mg to use in embedding
              lookups using the centered RMSProp optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingFTRLParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingFTRLParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, TensorFlow.TFOutput linears, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingFTRLParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, valuetype TensorFlow.TFOutput linears, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="linears" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the FTRL optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the FTRL optimization algorithm.
            </param>
        <param name="linears">
              Value of linears used in the FTRL optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingFTRLParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the FTRL optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the FTRL optimization algorithm.
              linears: A tensor containing the initial embedding table linears to use in embedding
              lookups using the FTRL optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingFTRLParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingFTRLParametersGradAccumDebug (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, TensorFlow.TFOutput linears, TensorFlow.TFOutput gradient_accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingFTRLParametersGradAccumDebug(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, valuetype TensorFlow.TFOutput linears, valuetype TensorFlow.TFOutput gradient_accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="linears" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the FTRL optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the FTRL optimization algorithm.
            </param>
        <param name="linears">
              Value of linears used in the FTRL optimization algorithm.
            </param>
        <param name="gradient_accumulators">
              Value of gradient_accumulators used in the FTRL optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingFTRLParametersGradAccumDebug'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the FTRL optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the FTRL optimization algorithm.
              linears: A tensor containing the initial embedding table linears to use in embedding
              lookups using the FTRL optimization algorithm.
              gradient_accumulators: A tensor containing the initial embedding table gradient_accumulators to use in embedding
              lookups using the FTRL optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingMDLAdagradLightParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingMDLAdagradLightParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, TensorFlow.TFOutput weights, TensorFlow.TFOutput benefits, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingMDLAdagradLightParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, valuetype TensorFlow.TFOutput weights, valuetype TensorFlow.TFOutput benefits, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="weights" Type="TensorFlow.TFOutput" />
        <Parameter Name="benefits" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the MDL Adagrad Light optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the MDL Adagrad Light optimization algorithm.
            </param>
        <param name="weights">
              Value of weights used in the MDL Adagrad Light optimization algorithm.
            </param>
        <param name="benefits">
              Value of benefits used in the MDL Adagrad Light optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingMDLAdagradLightParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the MDL Adagrad Light optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the MDL Adagrad Light optimization algorithm.
              weights: A tensor containing the initial embedding table weights to use in embedding
              lookups using the MDL Adagrad Light optimization algorithm.
              benefits: A tensor containing the initial embedding table benefits to use in embedding
              lookups using the MDL Adagrad Light optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingMomentumParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingMomentumParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput momenta, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingMomentumParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput momenta, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="momenta" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the Momentum optimization algorithm.
            </param>
        <param name="momenta">
              Value of momenta used in the Momentum optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingMomentumParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the Momentum optimization algorithm.
              momenta: A tensor containing the initial embedding table momenta to use in embedding
              lookups using the Momentum optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingMomentumParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingMomentumParametersGradAccumDebug (TensorFlow.TFOutput parameters, TensorFlow.TFOutput momenta, TensorFlow.TFOutput gradient_accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingMomentumParametersGradAccumDebug(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput momenta, valuetype TensorFlow.TFOutput gradient_accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="momenta" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the Momentum optimization algorithm.
            </param>
        <param name="momenta">
              Value of momenta used in the Momentum optimization algorithm.
            </param>
        <param name="gradient_accumulators">
              Value of gradient_accumulators used in the Momentum optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingMomentumParametersGradAccumDebug'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the Momentum optimization algorithm.
              momenta: A tensor containing the initial embedding table momenta to use in embedding
              lookups using the Momentum optimization algorithm.
              gradient_accumulators: A tensor containing the initial embedding table gradient_accumulators to use in embedding
              lookups using the Momentum optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingProximalAdagradParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingProximalAdagradParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingProximalAdagradParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the proximal Adagrad optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the proximal Adagrad optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingProximalAdagradParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the proximal Adagrad optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the proximal Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug (TensorFlow.TFOutput parameters, TensorFlow.TFOutput accumulators, TensorFlow.TFOutput gradient_accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput accumulators, valuetype TensorFlow.TFOutput gradient_accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the proximal Adagrad optimization algorithm.
            </param>
        <param name="accumulators">
              Value of accumulators used in the proximal Adagrad optimization algorithm.
            </param>
        <param name="gradient_accumulators">
              Value of gradient_accumulators used in the proximal Adagrad optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the proximal Adagrad optimization algorithm.
              accumulators: A tensor containing the initial embedding table accumulators to use in embedding
              lookups using the proximal Adagrad optimization algorithm.
              gradient_accumulators: A tensor containing the initial embedding table gradient_accumulators to use in embedding
              lookups using the proximal Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingRMSPropParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingRMSPropParameters (TensorFlow.TFOutput parameters, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingRMSPropParameters(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the RMSProp optimization algorithm.
            </param>
        <param name="ms">
              Value of ms used in the RMSProp optimization algorithm.
            </param>
        <param name="mom">
              Value of mom used in the RMSProp optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingRMSPropParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the RMSProp optimization algorithm.
              ms: A tensor containing the initial embedding table ms to use in embedding
              lookups using the RMSProp optimization algorithm.
              mom: A tensor containing the initial embedding table mom to use in embedding
              lookups using the RMSProp optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingRMSPropParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingRMSPropParametersGradAccumDebug (TensorFlow.TFOutput parameters, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput gradient_accumulators, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingRMSPropParametersGradAccumDebug(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput gradient_accumulators, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulators" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the RMSProp optimization algorithm.
            </param>
        <param name="ms">
              Value of ms used in the RMSProp optimization algorithm.
            </param>
        <param name="mom">
              Value of mom used in the RMSProp optimization algorithm.
            </param>
        <param name="gradient_accumulators">
              Value of gradient_accumulators used in the RMSProp optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingRMSPropParametersGradAccumDebug'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the RMSProp optimization algorithm.
              ms: A tensor containing the initial embedding table ms to use in embedding
              lookups using the RMSProp optimization algorithm.
              mom: A tensor containing the initial embedding table mom to use in embedding
              lookups using the RMSProp optimization algorithm.
              gradient_accumulators: A tensor containing the initial embedding table gradient_accumulators to use in embedding
              lookups using the RMSProp optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTPUEmbeddingStochasticGradientDescentParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LoadTPUEmbeddingStochasticGradientDescentParameters (TensorFlow.TFOutput parameters, long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LoadTPUEmbeddingStochasticGradientDescentParameters(valuetype TensorFlow.TFOutput parameters, int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              Value of parameters used in the stochastic gradient descent optimization algorithm.
            </param>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoadTPUEmbeddingStochasticGradientDescentParameters'.
            </param>
        <summary>
              Load embedding parameters for a single table.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              
              An op that loads optimization parameters into HBM for embedding. Must be
              preceded by a ConfigureTPUEmbeddingHost op that sets up the correct
              embedding table configuration. For example, this op is used to install
              parameters that are loaded from a checkpoint before a training loop is
              executed.
              
              parameters: A tensor containing the initial embedding table parameters to use in embedding
              lookups using the stochastic gradient descent optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Log (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Log(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Log'.
            </param>
        <summary>
              Computes natural logarithm of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = \log_e x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log1p">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Log1p (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Log1p(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Log1p'.
            </param>
        <summary>
              Computes natural logarithm of (1 + x) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = \log_e (1 + x)\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalAnd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogicalAnd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogicalAnd(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalAnd'.
            </param>
        <summary>
              Returns the truth value of x AND y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>LogicalAnd</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalNot">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogicalNot (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogicalNot(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalNot'.
            </param>
        <summary>
              Returns the truth value of NOT x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalOr">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogicalOr (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogicalOr(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalOr'.
            </param>
        <summary>
              Returns the truth value of x OR y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>LogicalOr</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogMatrixDeterminant">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LogMatrixDeterminant (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LogMatrixDeterminant(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is <c>[N, M, M]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogMatrixDeterminant'.
            </param>
        <summary>
              Computes the sign and the log of the absolute value of the determinant of
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sign: The signs of the log determinants of the inputs. Shape is <c>[N]</c>.
              log_abs_determinant: The logs of the absolute values of the determinants
              of the N input matrices.  Shape is <c>[N]</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              one or more square matrices.
              
              The input is a tensor of shape <c>[N, M, M]</c> whose inner-most 2 dimensions
              form square matrices. The outputs are two tensors containing the signs and
              absolute values of the log determinants for all N input submatrices
              <c>[..., :, :]</c> such that the determinant = sign*exp(log_abs_determinant).
              The log_abs_determinant is computed as det(P)*sum(log(diag(LU))) where LU
              is the LU decomposition of the input and P is the corresponding
              permutation matrix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogSoftmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogSoftmax (TensorFlow.TFOutput logits, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogSoftmax(valuetype TensorFlow.TFOutput logits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logits">
              2-D with shape <c>[batch_size, num_classes]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogSoftmax'.
            </param>
        <summary>
              Computes log softmax activations.
            </summary>
        <returns>
              Same shape as <c>logits</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each batch <c>i</c> and class <c>j</c> we have
              
              logsoftmax[i, j] = logits[i, j] - log(sum(exp(logits[i])))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogUniformCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LogUniformCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LogUniformCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogUniformCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a log-uniform distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableExport">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LookupTableExport (TensorFlow.TFOutput table_handle, TensorFlow.TFDataType Tkeys, TensorFlow.TFDataType Tvalues, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LookupTableExport(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFDataType Tkeys, valuetype TensorFlow.TFDataType Tvalues, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tkeys" Type="TensorFlow.TFDataType" />
        <Parameter Name="Tvalues" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="Tkeys">
        </param>
        <param name="Tvalues">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableExport'.
            </param>
        <summary>
              Outputs all keys and values in the table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              keys: Vector of all keys present in the table.
              values: Tensor of all values in the table. Indexed in parallel with <c>keys</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableExportV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LookupTableExportV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFDataType Tkeys, TensorFlow.TFDataType Tvalues, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LookupTableExportV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFDataType Tkeys, valuetype TensorFlow.TFDataType Tvalues, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tkeys" Type="TensorFlow.TFDataType" />
        <Parameter Name="Tvalues" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="Tkeys">
        </param>
        <param name="Tvalues">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableExportV2'.
            </param>
        <summary>
              Outputs all keys and values in the table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              keys: Vector of all keys present in the table.
              values: Tensor of all values in the table. Indexed in parallel with <c>keys</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableFind">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LookupTableFind (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput default_value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LookupTableFind(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput default_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="default_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="default_value">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableFind'.
            </param>
        <summary>
              Looks up keys in a table, outputs the corresponding values.
            </summary>
        <returns>
              Same shape as <c>keys</c>.  Values found in the table, or <c>default_values</c>
              for missing keys.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The tensor <c>keys</c> must of the same type as the keys of the table.
              The output <c>values</c> is of the type of the table values.
              
              The scalar <c>default_value</c> is the value output for keys not present in the
              table. It must also be of the same type as the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableFindV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LookupTableFindV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput default_value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LookupTableFindV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput default_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="default_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="default_value">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableFindV2'.
            </param>
        <summary>
              Looks up keys in a table, outputs the corresponding values.
            </summary>
        <returns>
              Same shape as <c>keys</c>.  Values found in the table, or <c>default_values</c>
              for missing keys.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The tensor <c>keys</c> must of the same type as the keys of the table.
              The output <c>values</c> is of the type of the table values.
              
              The scalar <c>default_value</c> is the value output for keys not present in the
              table. It must also be of the same type as the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableImport">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LookupTableImport (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LookupTableImport(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="values">
              Values to associate with keys.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableImport'.
            </param>
        <summary>
              Replaces the contents of the table with the specified keys and values.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The tensor <c>keys</c> must be of the same type as the keys of the table.
              The tensor <c>values</c> must be of the type of the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableImportV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LookupTableImportV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LookupTableImportV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="values">
              Values to associate with keys.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableImportV2'.
            </param>
        <summary>
              Replaces the contents of the table with the specified keys and values.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The tensor <c>keys</c> must be of the same type as the keys of the table.
              The tensor <c>values</c> must be of the type of the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableInsert">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LookupTableInsert (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LookupTableInsert(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="values">
              Values to associate with keys.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableInsert'.
            </param>
        <summary>
              Updates the table to associates keys with values.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The tensor <c>keys</c> must be of the same type as the keys of the table.
              The tensor <c>values</c> must be of the type of the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableInsertV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LookupTableInsertV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LookupTableInsertV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="values">
              Values to associate with keys.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableInsertV2'.
            </param>
        <summary>
              Updates the table to associates keys with values.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The tensor <c>keys</c> must be of the same type as the keys of the table.
              The tensor <c>values</c> must be of the type of the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LookupTableSize (TensorFlow.TFOutput table_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LookupTableSize(valuetype TensorFlow.TFOutput table_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableSize'.
            </param>
        <summary>
              Computes the number of elements in the given table.
            </summary>
        <returns>
              Scalar that contains number of elements in the table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableSizeV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LookupTableSizeV2 (TensorFlow.TFOutput table_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LookupTableSizeV2(valuetype TensorFlow.TFOutput table_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableSizeV2'.
            </param>
        <summary>
              Computes the number of elements in the given table.
            </summary>
        <returns>
              Scalar that contains number of elements in the table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopCond">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LoopCond (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LoopCond(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A boolean scalar, representing the branch predicate of the Switch op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoopCond'.
            </param>
        <summary>
              Forwards the input to the output.
            </summary>
        <returns>
              The same tensor as <c>input</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operator represents the loop termination condition used by the
              "pivot" switches of a loop.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowerBound">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LowerBound (TensorFlow.TFOutput sorted_inputs, TensorFlow.TFOutput values, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LowerBound(valuetype TensorFlow.TFOutput sorted_inputs, valuetype TensorFlow.TFOutput values, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sorted_inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sorted_inputs">
              2-D Tensor where each row is ordered.
            </param>
        <param name="values">
              2-D Tensor with the same numbers of rows as <c>sorted_search_values</c>. Contains
              the values that will be searched for in <c>sorted_search_values</c>.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LowerBound'.
            </param>
        <summary>
              Applies lower_bound(sorted_search_values, values) along each row.
            </summary>
        <returns>
              A <c>Tensor</c> with the same shape as <c>values</c>.  It contains the first scalar index
              into the last dimension where values can be inserted without changing the
              ordered property.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each set of rows with the same index in (sorted_inputs, values) is treated
              independently.  The resulting row is the equivalent of calling
              <c>np.searchsorted(sorted_inputs, values, side='left')</c>.
              
              The result is not a global index to the entire
              <c>Tensor</c>, but rather just the index in the last dimension.
              
              A 2-D example:
              sorted_sequence = [[0, 3, 9, 9, 10],
              [1, 2, 3, 4, 5]]
              values = [[2, 4, 9],
              [0, 2, 6]]
              
              result = LowerBound(sorted_sequence, values)
              
              result == [[1, 2, 2],
              [0, 1, 5]]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LRN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LRN (TensorFlow.TFOutput input, Nullable&lt;long&gt; depth_radius = null, Nullable&lt;float&gt; bias = null, Nullable&lt;float&gt; alpha = null, Nullable&lt;float&gt; beta = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LRN(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;int64&gt; depth_radius, valuetype System.Nullable`1&lt;float32&gt; bias, valuetype System.Nullable`1&lt;float32&gt; alpha, valuetype System.Nullable`1&lt;float32&gt; beta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="depth_radius" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="bias" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="alpha" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="beta" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D.
            </param>
        <param name="depth_radius">
              Optional argument
              0-D.  Half-width of the 1-D normalization window.
            </param>
        <param name="bias">
              Optional argument
              An offset (usually positive to avoid dividing by 0).
            </param>
        <param name="alpha">
              Optional argument
              A scale factor, usually positive.
            </param>
        <param name="beta">
              Optional argument
              An exponent.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LRN'.
            </param>
        <summary>
              Local Response Normalization.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The 4-D <c>input</c> tensor is treated as a 3-D array of 1-D vectors (along the last
              dimension), and each vector is normalized independently.  Within a given vector,
              each component is divided by the weighted, squared sum of inputs within
              <c>depth_radius</c>.  In detail,
              
              sqr_sum[a, b, c, d] =
              sum(input[a, b, c, d - depth_radius : d + depth_radius + 1] ** 2)
              output = input / (bias + alpha * sqr_sum) ** beta
              
              For details, see [Krizhevsky et al., ImageNet classification with deep
              convolutional neural networks (NIPS 2012)](http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LRNGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LRNGrad (TensorFlow.TFOutput input_grads, TensorFlow.TFOutput input_image, TensorFlow.TFOutput output_image, Nullable&lt;long&gt; depth_radius = null, Nullable&lt;float&gt; bias = null, Nullable&lt;float&gt; alpha = null, Nullable&lt;float&gt; beta = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LRNGrad(valuetype TensorFlow.TFOutput input_grads, valuetype TensorFlow.TFOutput input_image, valuetype TensorFlow.TFOutput output_image, valuetype System.Nullable`1&lt;int64&gt; depth_radius, valuetype System.Nullable`1&lt;float32&gt; bias, valuetype System.Nullable`1&lt;float32&gt; alpha, valuetype System.Nullable`1&lt;float32&gt; beta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_image" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_image" Type="TensorFlow.TFOutput" />
        <Parameter Name="depth_radius" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="bias" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="alpha" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="beta" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_grads">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="input_image">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="output_image">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="depth_radius">
              Optional argument
              A depth radius.
            </param>
        <param name="bias">
              Optional argument
              An offset (usually &amp;gt; 0 to avoid dividing by 0).
            </param>
        <param name="alpha">
              Optional argument
              A scale factor, usually positive.
            </param>
        <param name="beta">
              Optional argument
              An exponent.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LRNGrad'.
            </param>
        <summary>
              Gradients for Local Response Normalization.
            </summary>
        <returns>
              The gradients for LRN.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MakeIterator (TensorFlow.TFOutput dataset, TensorFlow.TFOutput iterator, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MakeIterator(valuetype TensorFlow.TFOutput dataset, valuetype TensorFlow.TFOutput iterator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataset">
        </param>
        <param name="iterator">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MakeIterator'.
            </param>
        <summary>
              Makes a new iterator from the given <c>dataset</c> and stores it in <c>iterator</c>.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation may be executed multiple times. Each execution will reset the
              iterator in <c>iterator</c> to the first element of <c>dataset</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapClear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MapClear (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MapClear(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapClear'.
            </param>
        <summary>
              Op removes all elements in the underlying container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapIncompleteSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MapIncompleteSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MapIncompleteSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapIncompleteSize'.
            </param>
        <summary>
              Op returns the number of incomplete elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapPeek">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] MapPeek (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] MapPeek(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapPeek'.
            </param>
        <summary>
              Op peeks at the values at the specified key.  If the
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              underlying container does not contain this key
              this op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MapSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MapSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapSize'.
            </param>
        <summary>
              Op returns the number of elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapStage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MapStage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFOutput[] values, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MapStage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
              int64
            </param>
        <param name="indices">
        </param>
        <param name="values">
              a list of tensors
              dtypes A list of data types that inserted values should adhere to.
            </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
              Maximum number of elements in the Staging Area. If &amp;gt; 0, inserts
              on the container will block when the capacity is reached.
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container. Otherwise,
              a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              It is necessary to match this name to the matching Unstage Op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapStage'.
            </param>
        <summary>
              Stage (key, values) in the underlying container which behaves like a hashtable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapUnstage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] MapUnstage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] MapUnstage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapUnstage'.
            </param>
        <summary>
              Op removes and returns the values associated with the key
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              from the underlying container.   If the underlying container
              does not contain this key, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapUnstageNoKey">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt; MapUnstageNoKey (TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[]&gt; MapUnstageNoKey(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapUnstageNoKey'.
            </param>
        <summary>
              Op removes and returns a random (key, value)
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              key:
              values:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              from the underlying container.   If the underlying container
              does not contain elements, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchingFiles">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatchingFiles (TensorFlow.TFOutput pattern, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatchingFiles(valuetype TensorFlow.TFOutput pattern, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">
              Shell wildcard pattern(s). Scalar or vector of type string.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatchingFiles'.
            </param>
        <summary>
              Returns the set of files matching one or more glob patterns.
            </summary>
        <returns>
              A vector of matching filenames.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that this routine only supports wildcard characters in the
              basename portion of the pattern, not in the directory portion.
              Note also that the order of filenames returned can be non-deterministic.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, Nullable&lt;bool&gt; transpose_a = null, Nullable&lt;bool&gt; transpose_b = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatMul(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype System.Nullable`1&lt;bool&gt; transpose_a, valuetype System.Nullable`1&lt;bool&gt; transpose_b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="transpose_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="transpose_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="transpose_a">
              Optional argument
              If true, "a" is transposed before multiplication.
            </param>
        <param name="transpose_b">
              Optional argument
              If true, "b" is transposed before multiplication.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatMul'.
            </param>
        <summary>
              Multiply the matrix "a" by the matrix "b".
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs must be two-dimensional matrices and the inner dimension of
              "a" (after being transposed if transpose_a is true) must match the
              outer dimension of "b" (after being transposed if transposed_b is
              true).
              
              *Note*: The default kernel implementation for MatMul on GPUs uses
              cublas.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixBandPart">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixBandPart (TensorFlow.TFOutput input, TensorFlow.TFOutput num_lower, TensorFlow.TFOutput num_upper, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixBandPart(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput num_lower, valuetype TensorFlow.TFOutput num_upper, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_lower" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_upper" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank <c>k</c> tensor.
            </param>
        <param name="num_lower">
              0-D tensor. Number of subdiagonals to keep. If negative, keep entire
              lower triangle.
            </param>
        <param name="num_upper">
              0-D tensor. Number of superdiagonals to keep. If negative, keep
              entire upper triangle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixBandPart'.
            </param>
        <summary>
              Copy a tensor setting everything outside a central band in each innermost matrix
            </summary>
        <returns>
              Rank <c>k</c> tensor of the same shape as input. The extracted banded tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              to zero.
              
              The <c>band</c> part is computed as follows:
              Assume <c>input</c> has <c>k</c> dimensions <c>[I, J, K, ..., M, N]</c>, then the output is a
              tensor with the same shape where
              
              <c>band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]</c>.
              
              The indicator function
              
              <c>in_band(m, n) = (num_lower &amp;lt; 0 || (m-n) &amp;lt;= num_lower)) &amp;&amp;
              (num_upper &amp;lt; 0 || (n-m) &amp;lt;= num_upper)</c>.
              
              For example:
              
               <code>
              # if 'input' is [[ 0,  1,  2, 3]
              [-1,  0,  1, 2]
              [-2, -1,  0, 1]
              [-3, -2, -1, 0]],
              
              tf.matrix_band_part(input, 1, -1) ==&amp;gt; [[ 0,  1,  2, 3]
              [-1,  0,  1, 2]
              [ 0, -1,  0, 1]
              [ 0,  0, -1, 0]],
              
              tf.matrix_band_part(input, 2, 1) ==&amp;gt; [[ 0,  1,  0, 0]
              [-1,  0,  1, 0]
              [-2, -1,  0, 1]
              [ 0, -2, -1, 0]]
               </code>
              
              Useful special cases:
              
               <code>
              tf.matrix_band_part(input, 0, -1) ==&amp;gt; Upper triangular part.
              tf.matrix_band_part(input, -1, 0) ==&amp;gt; Lower triangular part.
              tf.matrix_band_part(input, 0, 0) ==&amp;gt; Diagonal.
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixDeterminant">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixDeterminant (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixDeterminant(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is <c>[..., M, M]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDeterminant'.
            </param>
        <summary>
              Computes the determinant of one or more square matrices.
            </summary>
        <returns>
              Shape is <c>[...]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a tensor of shape <c>[..., M, M]</c> whose inner-most 2 dimensions
              form square matrices. The output is a tensor containing the determinants
              for all input submatrices <c>[..., :, :]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixDiag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixDiag (TensorFlow.TFOutput diagonal, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixDiag(valuetype TensorFlow.TFOutput diagonal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="diagonal">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixDiagPart">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixDiagPart (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixDiagPart(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank <c>k</c> tensor where <c>k &amp;gt;= 2</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDiagPart'.
            </param>
        <summary>
              Returns the batched diagonal part of a batched tensor.
            </summary>
        <returns>
              The extracted diagonal(s) having shape
              <c>diagonal.shape = input.shape[:-2] + [min(input.shape[-2:])]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns a tensor with the <c>diagonal</c> part
              of the batched <c>input</c>. The <c>diagonal</c> part is computed as follows:
              
              Assume <c>input</c> has <c>k</c> dimensions <c>[I, J, K, ..., M, N]</c>, then the output is a
              tensor of rank <c>k - 1</c> with dimensions <c>[I, J, K, ..., min(M, N)]</c> where:
              
              <c>diagonal[i, j, k, ..., n] = input[i, j, k, ..., n, n]</c>.
              
              The input must be at least a matrix.
              
              For example:
              
               <code>
              # 'input' is [[[1, 0, 0, 0]
              [0, 2, 0, 0]
              [0, 0, 3, 0]
              [0, 0, 0, 4]],
              [[5, 0, 0, 0]
              [0, 6, 0, 0]
              [0, 0, 7, 0]
              [0, 0, 0, 8]]]
              
              and input.shape = (2, 4, 4)
              
              tf.matrix_diag_part(input) ==&amp;gt; [[1, 2, 3, 4], [5, 6, 7, 8]]
              
              which has shape (2, 4)
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixExponential">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixExponential (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixExponential(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixExponential'.
            </param>
        <summary>
              Deprecated, use python implementation tf.linalg.matrix_exponential.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixInverse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixInverse (TensorFlow.TFOutput input, Nullable&lt;bool&gt; adjoint = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixInverse(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; adjoint, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="adjoint" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is <c>[..., M, M]</c>.
            </param>
        <param name="adjoint">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixInverse'.
            </param>
        <summary>
              Computes the inverse of one or more square invertible matrices or their
            </summary>
        <returns>
              Shape is <c>[..., M, M]</c>.
              
              @compatibility(numpy)
              Equivalent to np.linalg.inv
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              adjoints (conjugate transposes).
              
              The input is a tensor of shape <c>[..., M, M]</c> whose inner-most 2 dimensions
              form square matrices. The output is a tensor of the same shape as the input
              containing the inverse for all input submatrices <c>[..., :, :]</c>.
              
              The op uses LU decomposition with partial pivoting to compute the inverses.
              
              If a matrix is not invertible there is no guarantee what the op does. It
              may detect the condition and raise an exception or it may simply return a
              garbage result.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixLogarithm">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixLogarithm (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixLogarithm(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is <c>[..., M, M]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixLogarithm'.
            </param>
        <summary>
              Computes the matrix logarithm of one or more square matrices:
            </summary>
        <returns>
              Shape is <c>[..., M, M]</c>.
              
              @compatibility(scipy)
              Equivalent to scipy.linalg.logm
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              
              \\(log(exp(A)) = A\\)
              
              This op is only defined for complex matrices. If A is positive-definite and
              real, then casting to a complex matrix, taking the logarithm and casting back
              to a real matrix will give the correct result.
              
              This function computes the matrix logarithm using the Schur-Parlett algorithm.
              Details of the algorithm can be found in Section 11.6.2 of:
              Nicholas J. Higham, Functions of Matrices: Theory and Computation, SIAM 2008.
              ISBN 978-0-898716-46-7.
              
              The input is a tensor of shape <c>[..., M, M]</c> whose inner-most 2 dimensions
              form square matrices. The output is a tensor of the same shape as the input
              containing the exponential for all input submatrices <c>[..., :, :]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixSetDiag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixSetDiag (TensorFlow.TFOutput input, TensorFlow.TFOutput diagonal, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixSetDiag(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput diagonal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="diagonal" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank <c>k+1</c>, where <c>k &amp;gt;= 1</c>.
            </param>
        <param name="diagonal">
              Rank <c>k</c>, where <c>k &amp;gt;= 1</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSetDiag'.
            </param>
        <summary>
              Returns a batched matrix tensor with new batched diagonal values.
            </summary>
        <returns>
              Rank <c>k+1</c>, with <c>output.shape = input.shape</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given <c>input</c> and <c>diagonal</c>, this operation returns a tensor with the
              same shape and values as <c>input</c>, except for the main diagonal of the
              innermost matrices.  These will be overwritten by the values in <c>diagonal</c>.
              
              The output is computed as follows:
              
              Assume <c>input</c> has <c>k+1</c> dimensions <c>[I, J, K, ..., M, N]</c> and <c>diagonal</c> has
              <c>k</c> dimensions <c>[I, J, K, ..., min(M, N)]</c>.  Then the output is a
              tensor of rank <c>k+1</c> with dimensions <c>[I, J, K, ..., M, N]</c> where:
              
              * <c>output[i, j, k, ..., m, n] = diagonal[i, j, k, ..., n]</c> for <c>m == n</c>.
              * <c>output[i, j, k, ..., m, n] = input[i, j, k, ..., m, n]</c> for <c>m != n</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixSolve">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixSolve (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, Nullable&lt;bool&gt; adjoint = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixSolve(valuetype TensorFlow.TFOutput matrix, valuetype TensorFlow.TFOutput rhs, valuetype System.Nullable`1&lt;bool&gt; adjoint, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="TensorFlow.TFOutput" />
        <Parameter Name="rhs" Type="TensorFlow.TFOutput" />
        <Parameter Name="adjoint" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matrix">
              Shape is <c>[..., M, M]</c>.
            </param>
        <param name="rhs">
              Shape is <c>[..., M, K]</c>.
            </param>
        <param name="adjoint">
              Optional argument
              Boolean indicating whether to solve with <c>matrix</c> or its (block-wise)
              adjoint.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSolve'.
            </param>
        <summary>
              Solves systems of linear equations.
            </summary>
        <returns>
              Shape is <c>[..., M, K]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>Matrix</c> is a tensor of shape <c>[..., M, M]</c> whose inner-most 2 dimensions
              form square matrices. <c>Rhs</c> is a tensor of shape <c>[..., M, K]</c>. The <c>output</c> is
              a tensor shape <c>[..., M, K]</c>.  If <c>adjoint</c> is <c>False</c> then each output matrix
              satisfies <c>matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]</c>.
              If <c>adjoint</c> is <c>True</c> then each output matrix satisfies
              <c>adjoint(matrix[..., :, :]) * output[..., :, :] = rhs[..., :, :]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixSolveLs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixSolveLs (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, TensorFlow.TFOutput l2_regularizer, Nullable&lt;bool&gt; fast = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixSolveLs(valuetype TensorFlow.TFOutput matrix, valuetype TensorFlow.TFOutput rhs, valuetype TensorFlow.TFOutput l2_regularizer, valuetype System.Nullable`1&lt;bool&gt; fast, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="TensorFlow.TFOutput" />
        <Parameter Name="rhs" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2_regularizer" Type="TensorFlow.TFOutput" />
        <Parameter Name="fast" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matrix">
              Shape is <c>[..., M, N]</c>.
            </param>
        <param name="rhs">
              Shape is <c>[..., M, K]</c>.
            </param>
        <param name="l2_regularizer">
              Scalar tensor.
              
              @compatibility(numpy)
              Equivalent to np.linalg.lstsq
              @end_compatibility
            </param>
        <param name="fast">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSolveLs'.
            </param>
        <summary>
              Solves one or more linear least-squares problems.
            </summary>
        <returns>
              Shape is <c>[..., N, K]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>matrix</c> is a tensor of shape <c>[..., M, N]</c> whose inner-most 2 dimensions
              form real or complex matrices of size <c>[M, N]</c>. <c>Rhs</c> is a tensor of the same
              type as <c>matrix</c> and shape <c>[..., M, K]</c>.
              The output is a tensor shape <c>[..., N, K]</c> where each output matrix solves
              each of the equations
              <c>matrix[..., :, :]</c> * <c>output[..., :, :]</c> = <c>rhs[..., :, :]</c>
              in the least squares sense.
              
              We use the following notation for (complex) matrix and right-hand sides
              in the batch:
              
              <c>matrix</c>=\\(A \in \mathbb{C}^{m \times n}\\),
              <c>rhs</c>=\\(B  \in \mathbb{C}^{m \times k}\\),
              <c>output</c>=\\(X  \in \mathbb{C}^{n \times k}\\),
              <c>l2_regularizer</c>=\\(\lambda \in \mathbb{R}\\).
              
              If <c>fast</c> is <c>True</c>, then the solution is computed by solving the normal
              equations using Cholesky decomposition. Specifically, if \\(m \ge n\\) then
              \\(X = (A^H A + \lambda I)^{-1} A^H B\\), which solves the least-squares
              problem \\(X = \mathrm{argmin}_{Z \in \Re^{n \times k} } ||A Z - B||_F^2 + \lambda ||Z||_F^2\\).
              If \\(m \lt n\\) then <c>output</c> is computed as
              \\(X = A^H (A A^H + \lambda I)^{-1} B\\), which (for \\(\lambda = 0\\)) is the
              minimum-norm solution to the under-determined linear system, i.e.
              \\(X = \mathrm{argmin}_{Z \in \mathbb{C}^{n \times k} } ||Z||_F^2 \\),
              subject to \\(A Z = B\\). Notice that the fast path is only numerically stable
              when \\(A\\) is numerically full rank and has a condition number
              \\(\mathrm{cond}(A) \lt \frac{1}{\sqrt{\epsilon_{mach} } }\\) or \\(\lambda\\) is
              sufficiently large.
              
              If <c>fast</c> is <c>False</c> an algorithm based on the numerically robust complete
              orthogonal decomposition is used. This computes the minimum-norm
              least-squares solution, even when \\(A\\) is rank deficient. This path is
              typically 6-7 times slower than the fast path. If <c>fast</c> is <c>False</c> then
              <c>l2_regularizer</c> is ignored.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixTriangularSolve">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixTriangularSolve (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, Nullable&lt;bool&gt; lower = null, Nullable&lt;bool&gt; adjoint = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixTriangularSolve(valuetype TensorFlow.TFOutput matrix, valuetype TensorFlow.TFOutput rhs, valuetype System.Nullable`1&lt;bool&gt; lower, valuetype System.Nullable`1&lt;bool&gt; adjoint, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="TensorFlow.TFOutput" />
        <Parameter Name="rhs" Type="TensorFlow.TFOutput" />
        <Parameter Name="lower" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="adjoint" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matrix">
              Shape is <c>[..., M, M]</c>.
            </param>
        <param name="rhs">
              Shape is <c>[..., M, K]</c>.
            </param>
        <param name="lower">
              Optional argument
              Boolean indicating whether the innermost matrices in <c>matrix</c> are
              lower or upper triangular.
            </param>
        <param name="adjoint">
              Optional argument
              Boolean indicating whether to solve with <c>matrix</c> or its (block-wise)
              adjoint.
              
              @compatibility(numpy)
              Equivalent to scipy.linalg.solve_triangular
              @end_compatibility
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixTriangularSolve'.
            </param>
        <summary>
              Solves systems of linear equations with upper or lower triangular matrices by
            </summary>
        <returns>
              Shape is <c>[..., M, K]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              backsubstitution.
              
              <c>matrix</c> is a tensor of shape <c>[..., M, M]</c> whose inner-most 2 dimensions form
              square matrices. If <c>lower</c> is <c>True</c> then the strictly upper triangular part
              of each inner-most matrix is assumed to be zero and not accessed.
              If <c>lower</c> is False then the strictly lower triangular part of each inner-most
              matrix is assumed to be zero and not accessed.
              <c>rhs</c> is a tensor of shape <c>[..., M, K]</c>.
              
              The output is a tensor of shape <c>[..., M, K]</c>. If <c>adjoint</c> is
              <c>True</c> then the innermost matrices in <c>output</c> satisfy matrix equations
              <c>matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]</c>.
              If <c>adjoint</c> is <c>False</c> then the strictly then the  innermost matrices in
              <c>output</c> satisfy matrix equations
              <c>adjoint(matrix[..., i, k]) * output[..., k, j] = rhs[..., i, j]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Max (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Max(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce. Must be in the range
              <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Max'.
            </param>
        <summary>
              Computes the maximum of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces <c>input</c> along the dimensions given in <c>axis</c>. Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>axis</c>. If <c>keep_dims</c> is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Maximum (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Maximum(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Maximum'.
            </param>
        <summary>
              Returns the max of x and y (i.e. x &amp;gt; y ? x : y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Maximum</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D input to pool over.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool'.
            </param>
        <summary>
              Performs max pooling on the input.
            </summary>
        <returns>
              The max pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool3D (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool3D(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape <c>[batch, depth, rows, cols, channels]</c> tensor to pool over.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have <c>ksize[0] = ksize[4] = 1</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3D'.
            </param>
        <summary>
              Performs 3D max pooling on the input.
            </summary>
        <returns>
              The max pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool3DGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool3DGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool3DGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              Output backprop of shape <c>[batch, depth, rows, cols, channels]</c>.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have <c>ksize[0] = ksize[4] = 1</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3DGrad'.
            </param>
        <summary>
              Computes gradients of max pooling function.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool3DGradGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool3DGradGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool3DGradGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              Output backprop of shape <c>[batch, depth, rows, cols, channels]</c>.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have <c>ksize[0] = ksize[4] = 1</c>.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of <c>input</c>. Must have <c>strides[0] = strides[4] = 1</c>.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
              [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
              [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3DGradGrad'.
            </param>
        <summary>
              Computes second-order gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients of gradients w.r.t. the input to <c>max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              4-D.  Gradients w.r.t. the output of <c>max_pool</c>.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGrad'.
            </param>
        <summary>
              Computes gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients w.r.t. the input to <c>max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              4-D.  Gradients of gradients w.r.t. the input of <c>max_pool</c>.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradGrad'.
            </param>
        <summary>
              Computes second-order gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients of gradients w.r.t. the input to <c>max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradGradV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradGradV2 (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, TensorFlow.TFOutput ksize, TensorFlow.TFOutput strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradGradV2(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput ksize, valuetype TensorFlow.TFOutput strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              4-D.  Gradients of gradients w.r.t. the input of <c>max_pool</c>.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradGradV2'.
            </param>
        <summary>
              Computes second-order gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients of gradients w.r.t. the input to <c>max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradGradWithArgmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradGradWithArgmax (TensorFlow.TFOutput input, TensorFlow.TFOutput grad, TensorFlow.TFOutput argmax, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradGradWithArgmax(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput argmax, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="argmax" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The original input.
            </param>
        <param name="grad">
              4-D with shape <c>[batch, height, width, channels]</c>.  Gradients w.r.t. the
              input of <c>max_pool</c>.
            </param>
        <param name="argmax">
              The indices of the maximum values chosen for each output of <c>max_pool</c>.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradGradWithArgmax'.
            </param>
        <summary>
              Computes second-order gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients of gradients w.r.t. the input of <c>max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradV2 (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, TensorFlow.TFOutput ksize, TensorFlow.TFOutput strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradV2(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput ksize, valuetype TensorFlow.TFOutput strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              4-D.  Gradients w.r.t. the output of <c>max_pool</c>.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradV2'.
            </param>
        <summary>
              Computes gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients w.r.t. the input to <c>max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradWithArgmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradWithArgmax (TensorFlow.TFOutput input, TensorFlow.TFOutput grad, TensorFlow.TFOutput argmax, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradWithArgmax(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput argmax, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="argmax" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The original input.
            </param>
        <param name="grad">
              4-D with shape <c>[batch, height, width, channels]</c>.  Gradients w.r.t. the
              output of <c>max_pool</c>.
            </param>
        <param name="argmax">
              The indices of the maximum values chosen for each output of <c>max_pool</c>.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradWithArgmax'.
            </param>
        <summary>
              Computes gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients w.r.t. the input of <c>max_pool</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput ksize, TensorFlow.TFOutput strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput ksize, valuetype TensorFlow.TFOutput strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D input to pool over.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
              [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
              [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolV2'.
            </param>
        <summary>
              Performs max pooling on the input.
            </summary>
        <returns>
              The max pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolWithArgmax">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; MaxPoolWithArgmax (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, Nullable&lt;TensorFlow.TFDataType&gt; Targmax = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; MaxPoolWithArgmax(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Targmax, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="Targmax" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, height, width, channels]</c>.  Input to pool over.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="Targmax">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolWithArgmax'.
            </param>
        <summary>
              Performs max pooling on the input and outputs both max values and indices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: The max pooled output tensor.
              argmax: 4-D.  The flattened indices of the max values chosen for each output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The indices in <c>argmax</c> are flattened, so that a maximum value at position
              <c>[b, y, x, c]</c> becomes flattened index
              <c>((b * height + y) * width + x) * channels + c</c>.
              
              The indices returned are always in <c>[0, height) x [0, width)</c> before flattening,
              even if padding is involved and the mathematically correct answer is outside
              (either negative or too large).  This is a bug, but fixing it is difficult to do
              in a safe backwards compatible way, especially due to flattening.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mean">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mean (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mean(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce. Must be in the range
              <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mean'.
            </param>
        <summary>
              Computes the mean of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces <c>input</c> along the dimensions given in <c>axis</c>. Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>axis</c>. If <c>keep_dims</c> is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Merge (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Merge(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              The input tensors, exactly one of which will become available.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Merge'.
            </param>
        <summary>
              Forwards the value of an available tensor from <c>inputs</c> to <c>output</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: Will be set to the available input tensor.
              value_index: The index of the chosen input tensor in <c>inputs</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
          <c>Merge</c> waits for at least one of the tensors in <c>inputs</c> to become available.
              It is usually combined with <c>Switch</c> to implement branching.
              
              <c>Merge</c> forwards the first tensor to become available to <c>output</c>, and sets
              <c>value_index</c> to its index in <c>inputs</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MergeSummary (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MergeSummary(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              Can be of any shape.  Each must contain serialized <c>Summary</c> protocol
              buffers.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MergeSummary'.
            </param>
        <summary>
              Merges summaries.
            </summary>
        <returns>
              Scalar. Serialized <c>Summary</c> protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a
              [<c>Summary</c>](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)
              protocol buffer that contains the union of all the values in the input
              summaries.
              
              When the Op is run, it reports an <c>InvalidArgument</c> error if multiple values
              in the summaries to merge use the same tag.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeV2Checkpoints">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MergeV2Checkpoints (TensorFlow.TFOutput checkpoint_prefixes, TensorFlow.TFOutput destination_prefix, Nullable&lt;bool&gt; delete_old_dirs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MergeV2Checkpoints(valuetype TensorFlow.TFOutput checkpoint_prefixes, valuetype TensorFlow.TFOutput destination_prefix, valuetype System.Nullable`1&lt;bool&gt; delete_old_dirs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkpoint_prefixes" Type="TensorFlow.TFOutput" />
        <Parameter Name="destination_prefix" Type="TensorFlow.TFOutput" />
        <Parameter Name="delete_old_dirs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="checkpoint_prefixes">
              prefixes of V2 checkpoints to merge.
            </param>
        <param name="destination_prefix">
              scalar.  The desired final prefix.  Allowed to be the same
              as one of the checkpoint_prefixes.
            </param>
        <param name="delete_old_dirs">
              Optional argument
              see above.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MergeV2Checkpoints'.
            </param>
        <summary>
              V2 format specific: merges the metadata files of sharded checkpoints.  The
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              result is one logical checkpoint, with one physical metadata file and renamed
              data files.
              
              Intended for "grouping" multiple checkpoints in a sharded checkpoint setup.
              
              If delete_old_dirs is true, attempts to delete recursively the dirname of each
              path in the input checkpoint_prefixes.  This is useful when those paths are non
              user-facing temporary locations.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mfcc">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mfcc (TensorFlow.TFOutput spectrogram, TensorFlow.TFOutput sample_rate, Nullable&lt;float&gt; upper_frequency_limit = null, Nullable&lt;float&gt; lower_frequency_limit = null, Nullable&lt;long&gt; filterbank_channel_count = null, Nullable&lt;long&gt; dct_coefficient_count = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mfcc(valuetype TensorFlow.TFOutput spectrogram, valuetype TensorFlow.TFOutput sample_rate, valuetype System.Nullable`1&lt;float32&gt; upper_frequency_limit, valuetype System.Nullable`1&lt;float32&gt; lower_frequency_limit, valuetype System.Nullable`1&lt;int64&gt; filterbank_channel_count, valuetype System.Nullable`1&lt;int64&gt; dct_coefficient_count, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spectrogram" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="upper_frequency_limit" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="lower_frequency_limit" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="filterbank_channel_count" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="dct_coefficient_count" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="spectrogram">
              Typically produced by the Spectrogram op, with magnitude_squared
              set to true.
            </param>
        <param name="sample_rate">
              How many samples per second the source audio used.
            </param>
        <param name="upper_frequency_limit">
              Optional argument
              The highest frequency to use when calculating the
              ceptstrum.
            </param>
        <param name="lower_frequency_limit">
              Optional argument
              The lowest frequency to use when calculating the
              ceptstrum.
            </param>
        <param name="filterbank_channel_count">
              Optional argument
              Resolution of the Mel bank used internally.
            </param>
        <param name="dct_coefficient_count">
              Optional argument
              How many output channels to produce per time slice.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mfcc'.
            </param>
        <summary>
              Transforms a spectrogram into a form that's useful for speech recognition.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Mel Frequency Cepstral Coefficients are a way of representing audio data that's
              been effective as an input feature for machine learning. They are created by
              taking the spectrum of a spectrogram (a 'cepstrum'), and discarding some of the
              higher frequencies that are less significant to the human ear. They have a long
              history in the speech recognition world, and https://en.wikipedia.org/wiki/Mel-frequency_cepstrum
              is a good resource to learn more.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Min (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Min(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce. Must be in the range
              <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Min'.
            </param>
        <summary>
              Computes the minimum of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces <c>input</c> along the dimensions given in <c>axis</c>. Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>axis</c>. If <c>keep_dims</c> is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Minimum (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Minimum(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Minimum'.
            </param>
        <summary>
              Returns the min of x and y (i.e. x &amp;lt; y ? x : y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Minimum</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MirrorPad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MirrorPad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string mode, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MirrorPad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, string mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The input tensor to be padded.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of <c>input</c>.
            </param>
        <param name="mode">
              Either <c>REFLECT</c> or <c>SYMMETRIC</c>. In reflect mode the padded regions
              do not include the borders, while in symmetric mode the padded regions
              do include the borders. For example, if <c>input</c> is <c>[1, 2, 3]</c> and <c>paddings</c>
              is <c>[0, 2]</c>, then the output is <c>[1, 2, 3, 2, 1]</c> in reflect mode, and
              it is <c>[1, 2, 3, 3, 2]</c> in symmetric mode.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MirrorPad'.
            </param>
        <summary>
              Pads a tensor with mirrored values.
            </summary>
        <returns>
              The padded tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation pads a <c>input</c> with mirrored values according to the <c>paddings</c>
              you specify. <c>paddings</c> is an integer tensor with shape <c>[n, 2]</c>, where n is
              the rank of <c>input</c>. For each dimension D of <c>input</c>, <c>paddings[D, 0]</c> indicates
              how many values to add before the contents of <c>input</c> in that dimension, and
              <c>paddings[D, 1]</c> indicates how many values to add after the contents of <c>input</c>
              in that dimension. Both <c>paddings[D, 0]</c> and <c>paddings[D, 1]</c> must be no greater
              than <c>input.dim_size(D)</c> (or <c>input.dim_size(D) - 1</c>) if <c>copy_border</c> is true
              (if false, respectively).
              
              The padded size of each dimension D of the output is:
              
              <c>paddings(D, 0) + input.dim_size(D) + paddings(D, 1)</c>
              
              For example:
              
               <code>
              # 't' is [[1, 2, 3], [4, 5, 6]].
              # 'paddings' is [[1, 1]], [2, 2]].
              # 'mode' is SYMMETRIC.
              # rank of 't' is 2.
              pad(t, paddings) ==&amp;gt; [[2, 1, 1, 2, 3, 3, 2]
              [2, 1, 1, 2, 3, 3, 2]
              [5, 4, 4, 5, 6, 6, 5]
              [5, 4, 4, 5, 6, 6, 5]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="MirrorPadGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MirrorPadGrad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string mode, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MirrorPadGrad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, string mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The input tensor to be folded.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of <c>input</c>.
            </param>
        <param name="mode">
              The mode used in the <c>MirrorPad</c> op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MirrorPadGrad'.
            </param>
        <summary>
              Gradient op for <c>MirrorPad</c> op. This op folds a mirror-padded tensor.
            </summary>
        <returns>
              The folded tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation folds the padded areas of <c>input</c> by <c>MirrorPad</c> according to the
              <c>paddings</c> you specify. <c>paddings</c> must be the same as <c>paddings</c> argument
              given to the corresponding <c>MirrorPad</c> op.
              
              The folded size of each dimension D of the output is:
              
              <c>input.dim_size(D) - paddings(D, 0) - paddings(D, 1)</c>
              
              For example:
              
               <code>
              # 't' is [[1, 2, 3], [4, 5, 6], [7, 8, 9]].
              # 'paddings' is [[0, 1]], [0, 1]].
              # 'mode' is SYMMETRIC.
              # rank of 't' is 2.
              pad(t, paddings) ==&amp;gt; [[ 1,  5]
              [11, 28]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mod'.
            </param>
        <summary>
              Returns element-wise remainder of division. This emulates C semantics in that
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              the result here is consistent with a truncating divide. E.g.
              <c>tf.truncatediv(x, y) * y + truncate_mod(x, y) = x</c>.
              
              *NOTE*: <c>Mod</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ModelDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ModelDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
              A variant tensor representing the input dataset.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ModelDataset'.
            </param>
        <summary>
              Identity transformation that models performance.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Identity transformation that models performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mul(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mul'.
            </param>
        <summary>
              Returns x * y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Multiply</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiDeviceIterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MultiDeviceIterator (string[] devices, string shared_name, string container, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MultiDeviceIterator(string[] devices, string shared_name, string container, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="devices" Type="System.String[]" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="devices">
              A list of devices the iterator works across.
            </param>
        <param name="shared_name">
              If non-empty, this resource will be shared under the given name
              across multiple sessions.
            </param>
        <param name="container">
              If non-empty, this resource is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="output_types">
              The type list for the return values.
            </param>
        <param name="output_shapes">
              The list of shapes being produced.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MultiDeviceIterator'.
            </param>
        <summary>
              Creates a MultiDeviceIterator resource.
            </summary>
        <returns>
              Handle to the resource created.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiDeviceIteratorFromStringHandle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MultiDeviceIteratorFromStringHandle (TensorFlow.TFOutput string_handle, TensorFlow.TFDataType[] output_types = null, TensorFlow.TFShape[] output_shapes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MultiDeviceIteratorFromStringHandle(valuetype TensorFlow.TFOutput string_handle, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string_handle">
              String representing the resource.
            </param>
        <param name="output_types">
              Optional argument
              The type list for the return values.
            </param>
        <param name="output_shapes">
              Optional argument
              The list of shapes being produced.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MultiDeviceIteratorFromStringHandle'.
            </param>
        <summary>
              Generates a MultiDeviceIterator resource from its provided string handle.
            </summary>
        <returns>
              A MultiDeviceIterator resource.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiDeviceIteratorGetNextFromShard">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] MultiDeviceIteratorGetNextFromShard (TensorFlow.TFOutput multi_device_iterator, TensorFlow.TFOutput shard_num, TensorFlow.TFOutput incarnation_id, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] MultiDeviceIteratorGetNextFromShard(valuetype TensorFlow.TFOutput multi_device_iterator, valuetype TensorFlow.TFOutput shard_num, valuetype TensorFlow.TFOutput incarnation_id, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multi_device_iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="shard_num" Type="TensorFlow.TFOutput" />
        <Parameter Name="incarnation_id" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="multi_device_iterator">
              A MultiDeviceIterator resource.
            </param>
        <param name="shard_num">
              Integer representing which shard to fetch data for.
            </param>
        <param name="incarnation_id">
              Which incarnation of the MultiDeviceIterator is running.
            </param>
        <param name="output_types">
              The type list for the return values.
            </param>
        <param name="output_shapes">
              The list of shapes being produced.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MultiDeviceIteratorGetNextFromShard'.
            </param>
        <summary>
              Gets next element for the provided shard number.
            </summary>
        <returns>
              Result of the get_next on the dataset.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiDeviceIteratorInit">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MultiDeviceIteratorInit (TensorFlow.TFOutput dataset, TensorFlow.TFOutput multi_device_iterator, TensorFlow.TFOutput max_buffer_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MultiDeviceIteratorInit(valuetype TensorFlow.TFOutput dataset, valuetype TensorFlow.TFOutput multi_device_iterator, valuetype TensorFlow.TFOutput max_buffer_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="multi_device_iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataset">
              Dataset to be iterated upon.
            </param>
        <param name="multi_device_iterator">
              A MultiDeviceIteratorResource.
            </param>
        <param name="max_buffer_size">
              The maximum size of the host side per device buffer to keep.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MultiDeviceIteratorInit'.
            </param>
        <summary>
              Initializes the multi device iterator with the given dataset.
            </summary>
        <returns>
              An int64 indicating which incarnation of the MultiDeviceIterator
              is running.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiDeviceIteratorToStringHandle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MultiDeviceIteratorToStringHandle (TensorFlow.TFOutput multi_device_iterator, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MultiDeviceIteratorToStringHandle(valuetype TensorFlow.TFOutput multi_device_iterator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multi_device_iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="multi_device_iterator">
              A MultiDeviceIterator resource.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MultiDeviceIteratorToStringHandle'.
            </param>
        <summary>
              Produces a string handle for the given MultiDeviceIterator.
            </summary>
        <returns>
              A string representing the resource.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multinomial">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Multinomial (TensorFlow.TFOutput logits, TensorFlow.TFOutput num_samples, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, Nullable&lt;TensorFlow.TFDataType&gt; output_dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Multinomial(valuetype TensorFlow.TFOutput logits, valuetype TensorFlow.TFOutput num_samples, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; output_dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_samples" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="output_dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logits">
              2-D Tensor with shape <c>[batch_size, num_classes]</c>.  Each slice <c>[i, :]</c>
              represents the unnormalized log probabilities for all classes.
            </param>
        <param name="num_samples">
              0-D.  Number of independent samples to draw for each row slice.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 is set to be non-zero, the internal random number
              generator is seeded by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="output_dtype">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Multinomial'.
            </param>
        <summary>
              Draws samples from a multinomial distribution.
            </summary>
        <returns>
              2-D Tensor with shape <c>[batch_size, num_samples]</c>.  Each slice <c>[i, :]</c>
              contains the drawn class labels with range <c>[0, num_classes)</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableDenseHashTable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableDenseHashTable (TensorFlow.TFOutput empty_key, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, Nullable&lt;long&gt; initial_num_buckets = null, Nullable&lt;float&gt; max_load_factor = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableDenseHashTable(valuetype TensorFlow.TFOutput empty_key, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, class TensorFlow.TFShape value_shape, valuetype System.Nullable`1&lt;int64&gt; initial_num_buckets, valuetype System.Nullable`1&lt;float32&gt; max_load_factor, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="empty_key" Type="TensorFlow.TFOutput" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="value_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="initial_num_buckets" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="max_load_factor" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="empty_key">
              The key used to represent empty key buckets internally. Must not
              be used in insert or lookup operations.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
            </param>
        <param name="value_shape">
              Optional argument
              The shape of each value.
            </param>
        <param name="initial_num_buckets">
              Optional argument
              The initial number of hash table buckets. Must be a power
              to 2.
            </param>
        <param name="max_load_factor">
              Optional argument
              The maximum ratio between number of entries and number of
              buckets before growing the table. Must be between 0 and 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableDenseHashTable'.
            </param>
        <summary>
              Creates an empty hash table that uses tensors as the backing store.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It uses "open addressing" with quadratic reprobing to resolve
              collisions.
              
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a scalar. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableDenseHashTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableDenseHashTableV2 (TensorFlow.TFOutput empty_key, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, Nullable&lt;long&gt; initial_num_buckets = null, Nullable&lt;float&gt; max_load_factor = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableDenseHashTableV2(valuetype TensorFlow.TFOutput empty_key, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, class TensorFlow.TFShape value_shape, valuetype System.Nullable`1&lt;int64&gt; initial_num_buckets, valuetype System.Nullable`1&lt;float32&gt; max_load_factor, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="empty_key" Type="TensorFlow.TFOutput" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="value_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="initial_num_buckets" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="max_load_factor" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="empty_key">
              The key used to represent empty key buckets internally. Must not
              be used in insert or lookup operations.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
            </param>
        <param name="value_shape">
              Optional argument
              The shape of each value.
            </param>
        <param name="initial_num_buckets">
              Optional argument
              The initial number of hash table buckets. Must be a power
              to 2.
            </param>
        <param name="max_load_factor">
              Optional argument
              The maximum ratio between number of entries and number of
              buckets before growing the table. Must be between 0 and 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableDenseHashTableV2'.
            </param>
        <summary>
              Creates an empty hash table that uses tensors as the backing store.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It uses "open addressing" with quadratic reprobing to resolve
              collisions.
              
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a scalar. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableHashTable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableHashTable (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableHashTable(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
              If true and shared_name is empty, the table is shared
              using the node name.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTable'.
            </param>
        <summary>
              Creates an empty hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a scalar. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableHashTableOfTensors">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableHashTableOfTensors (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableHashTableOfTensors(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, class TensorFlow.TFShape value_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="value_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
            </param>
        <param name="value_shape">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTableOfTensors'.
            </param>
        <summary>
              Creates an empty hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a vector. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableHashTableOfTensorsV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableHashTableOfTensorsV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableHashTableOfTensorsV2(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, class TensorFlow.TFShape value_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="value_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
            </param>
        <param name="value_shape">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTableOfTensorsV2'.
            </param>
        <summary>
              Creates an empty hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a vector. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableHashTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableHashTableV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableHashTableV2(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
              If true and shared_name is empty, the table is shared
              using the node name.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTableV2'.
            </param>
        <summary>
              Creates an empty hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a scalar. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutexLock">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutexLock (TensorFlow.TFOutput mutex, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutexLock(valuetype TensorFlow.TFOutput mutex, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutex" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mutex">
              The mutex resource to lock.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutexLock'.
            </param>
        <summary>
              Locks a mutex resource.  The output is the lock.  So long as the lock tensor
            </summary>
        <returns>
              A tensor that keeps a shared pointer to a lock on the mutex;
              when the Tensor is destroyed, the use count on the shared pointer is decreased
              by 1.  When it reaches 0, the lock is released.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              is alive, any other request to use <c>MutexLock</c> with this mutex will wait.
              
              This is particularly useful for creating a critical section when used in
              conjunction with <c>MutexLockIdentity</c>:
              
               <code>
              
              mutex = mutex_v2(
              shared_name=handle_name, container=container, name=name)
              
              def execute_in_critical_section(fn, *args, **kwargs):
              lock = gen_resource_variable_ops.mutex_lock(mutex)
              
              with ops.control_dependencies([lock]):
              r = fn(*args, **kwargs)
              
              with ops.control_dependencies(nest.flatten(r)):
              with ops.colocate_with(mutex):
              ensure_lock_exists = mutex_lock_identity(lock)
              
              # Make sure that if any element of r is accessed, all of
              # them are executed together.
              r = nest.map_structure(tf.identity, r)
              
              with ops.control_dependencies([ensure_lock_exists]):
              return nest.map_structure(tf.identity, r)
               </code>
              
              While <c>fn</c> is running in the critical section, no other functions which wish to
              use this critical section may run.
              
              Often the use case is that two executions of the same graph, in parallel,
              wish to run <c>fn</c>; and we wish to ensure that only one of them executes
              at a time.  This is especially important if <c>fn</c> modifies one or more
              variables at a time.
              
              It is also useful if two separate functions must share a resource, but we
              wish to ensure the usage is exclusive.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutexV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutexV2 (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutexV2(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this variable is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this variable is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutexV2'.
            </param>
        <summary>
              Creates a Mutex resource that can be locked by <c>MutexLock</c>.
            </summary>
        <returns>
              The mutex resource.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Neg (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Neg(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Neg'.
            </param>
        <summary>
              Computes numerical negative value element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = -x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegTrain">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation NegTrain (TensorFlow.TFOutput w_in, TensorFlow.TFOutput w_out, TensorFlow.TFOutput examples, TensorFlow.TFOutput labels, TensorFlow.TFOutput lr, long[] vocab_count, long num_negative_samples, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation NegTrain(valuetype TensorFlow.TFOutput w_in, valuetype TensorFlow.TFOutput w_out, valuetype TensorFlow.TFOutput examples, valuetype TensorFlow.TFOutput labels, valuetype TensorFlow.TFOutput lr, int64[] vocab_count, int64 num_negative_samples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="w_out" Type="TensorFlow.TFOutput" />
        <Parameter Name="examples" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="vocab_count" Type="System.Int64[]" />
        <Parameter Name="num_negative_samples" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="w_in">
              input word embedding.
            </param>
        <param name="w_out">
              output word embedding.
            </param>
        <param name="examples">
              A vector of word ids.
            </param>
        <param name="labels">
              A vector of word ids.
            </param>
        <param name="lr">
        </param>
        <param name="vocab_count">
              Count of words in the vocabulary.
            </param>
        <param name="num_negative_samples">
              Number of negative samples per example.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NegTrain'.
            </param>
        <summary>
              Training via negative sampling.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextIteration">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NextIteration (TensorFlow.TFOutput data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NextIteration(valuetype TensorFlow.TFOutput data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the next iteration.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NextIteration'.
            </param>
        <summary>
              Makes its input available to the next iteration.
            </summary>
        <returns>
              The same tensor as <c>data</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonMaxSuppression">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NonMaxSuppression (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, Nullable&lt;float&gt; iou_threshold = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NonMaxSuppression(valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput scores, valuetype TensorFlow.TFOutput max_output_size, valuetype System.Nullable`1&lt;float32&gt; iou_threshold, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="scores" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_output_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="iou_threshold" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="boxes">
              A 2-D float tensor of shape <c>[num_boxes, 4]</c>.
            </param>
        <param name="scores">
              A 1-D float tensor of shape <c>[num_boxes]</c> representing a single
              score corresponding to each box (each row of boxes).
            </param>
        <param name="max_output_size">
              A scalar integer tensor representing the maximum number of
              boxes to be selected by non max suppression.
            </param>
        <param name="iou_threshold">
              Optional argument
              A float representing the threshold for deciding whether boxes
              overlap too much with respect to IOU.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppression'.
            </param>
        <summary>
              Greedily selects a subset of bounding boxes in descending order of score,
            </summary>
        <returns>
              A 1-D integer tensor of shape <c>[M]</c> representing the selected
              indices from the boxes tensor, where <c>M &amp;lt;= max_output_size</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              pruning away boxes that have high intersection-over-union (IOU) overlap
              with previously selected boxes.  Bounding boxes are supplied as
              [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
              diagonal pair of box corners and the coordinates can be provided as normalized
              (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
              is agnostic to where the origin is in the coordinate system.  Note that this
              algorithm is invariant to orthogonal transformations and translations
              of the coordinate system; thus translating or reflections of the coordinate
              system result in the same boxes being selected by the algorithm.
              The output of this operation is a set of integers indexing into the input
              collection of bounding boxes representing the selected boxes.  The bounding
              box coordinates corresponding to the selected indices can then be obtained
              using the <c>tf.gather operation</c>.  For example:
              selected_indices = tf.image.non_max_suppression(
              boxes, scores, max_output_size, iou_threshold)
              selected_boxes = tf.gather(boxes, selected_indices)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonMaxSuppressionV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NonMaxSuppressionV2 (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, TensorFlow.TFOutput iou_threshold, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NonMaxSuppressionV2(valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput scores, valuetype TensorFlow.TFOutput max_output_size, valuetype TensorFlow.TFOutput iou_threshold, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="scores" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_output_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="iou_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="boxes">
              A 2-D float tensor of shape <c>[num_boxes, 4]</c>.
            </param>
        <param name="scores">
              A 1-D float tensor of shape <c>[num_boxes]</c> representing a single
              score corresponding to each box (each row of boxes).
            </param>
        <param name="max_output_size">
              A scalar integer tensor representing the maximum number of
              boxes to be selected by non max suppression.
            </param>
        <param name="iou_threshold">
              A 0-D float tensor representing the threshold for deciding whether
              boxes overlap too much with respect to IOU.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppressionV2'.
            </param>
        <summary>
              Greedily selects a subset of bounding boxes in descending order of score,
            </summary>
        <returns>
              A 1-D integer tensor of shape <c>[M]</c> representing the selected
              indices from the boxes tensor, where <c>M &amp;lt;= max_output_size</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              pruning away boxes that have high intersection-over-union (IOU) overlap
              with previously selected boxes.  Bounding boxes are supplied as
              [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
              diagonal pair of box corners and the coordinates can be provided as normalized
              (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
              is agnostic to where the origin is in the coordinate system.  Note that this
              algorithm is invariant to orthogonal transformations and translations
              of the coordinate system; thus translating or reflections of the coordinate
              system result in the same boxes being selected by the algorithm.
              
              The output of this operation is a set of integers indexing into the input
              collection of bounding boxes representing the selected boxes.  The bounding
              box coordinates corresponding to the selected indices can then be obtained
              using the <c>tf.gather operation</c>.  For example:
              
              selected_indices = tf.image.non_max_suppression_v2(
              boxes, scores, max_output_size, iou_threshold)
              selected_boxes = tf.gather(boxes, selected_indices)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonMaxSuppressionV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NonMaxSuppressionV3 (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, TensorFlow.TFOutput iou_threshold, TensorFlow.TFOutput score_threshold, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NonMaxSuppressionV3(valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput scores, valuetype TensorFlow.TFOutput max_output_size, valuetype TensorFlow.TFOutput iou_threshold, valuetype TensorFlow.TFOutput score_threshold, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="scores" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_output_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="iou_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="score_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="boxes">
              A 2-D float tensor of shape <c>[num_boxes, 4]</c>.
            </param>
        <param name="scores">
              A 1-D float tensor of shape <c>[num_boxes]</c> representing a single
              score corresponding to each box (each row of boxes).
            </param>
        <param name="max_output_size">
              A scalar integer tensor representing the maximum number of
              boxes to be selected by non max suppression.
            </param>
        <param name="iou_threshold">
              A 0-D float tensor representing the threshold for deciding whether
              boxes overlap too much with respect to IOU.
            </param>
        <param name="score_threshold">
              A 0-D float tensor representing the threshold for deciding when to remove
              boxes based on score.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppressionV3'.
            </param>
        <summary>
              Greedily selects a subset of bounding boxes in descending order of score,
            </summary>
        <returns>
              A 1-D integer tensor of shape <c>[M]</c> representing the selected
              indices from the boxes tensor, where <c>M &amp;lt;= max_output_size</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              pruning away boxes that have high intersection-over-union (IOU) overlap
              with previously selected boxes.  Bounding boxes with score less than
              <c>score_threshold</c> are removed.  Bounding boxes are supplied as
              [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
              diagonal pair of box corners and the coordinates can be provided as normalized
              (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
              is agnostic to where the origin is in the coordinate system and more
              generally is invariant to orthogonal transformations and translations
              of the coordinate system; thus translating or reflections of the coordinate
              system result in the same boxes being selected by the algorithm.
              The output of this operation is a set of integers indexing into the input
              collection of bounding boxes representing the selected boxes.  The bounding
              box coordinates corresponding to the selected indices can then be obtained
              using the <c>tf.gather operation</c>.  For example:
              selected_indices = tf.image.non_max_suppression_v2(
              boxes, scores, max_output_size, iou_threshold, score_threshold)
              selected_boxes = tf.gather(boxes, selected_indices)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonMaxSuppressionV4">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; NonMaxSuppressionV4 (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, TensorFlow.TFOutput iou_threshold, TensorFlow.TFOutput score_threshold, Nullable&lt;bool&gt; pad_to_max_output_size = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; NonMaxSuppressionV4(valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput scores, valuetype TensorFlow.TFOutput max_output_size, valuetype TensorFlow.TFOutput iou_threshold, valuetype TensorFlow.TFOutput score_threshold, valuetype System.Nullable`1&lt;bool&gt; pad_to_max_output_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="scores" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_output_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="iou_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="score_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="pad_to_max_output_size" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="boxes">
              A 2-D float tensor of shape <c>[num_boxes, 4]</c>.
            </param>
        <param name="scores">
              A 1-D float tensor of shape <c>[num_boxes]</c> representing a single
              score corresponding to each box (each row of boxes).
            </param>
        <param name="max_output_size">
              A scalar integer tensor representing the maximum number of
              boxes to be selected by non max suppression.
            </param>
        <param name="iou_threshold">
              A 0-D float tensor representing the threshold for deciding whether
              boxes overlap too much with respect to IOU.
            </param>
        <param name="score_threshold">
              A 0-D float tensor representing the threshold for deciding when to remove
              boxes based on score.
            </param>
        <param name="pad_to_max_output_size">
              Optional argument
              If true, the output <c>selected_indices</c> is padded to be of length
              <c>max_output_size</c>. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppressionV4'.
            </param>
        <summary>
              Greedily selects a subset of bounding boxes in descending order of score,
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              selected_indices: A 1-D integer tensor of shape <c>[M]</c> representing the selected
              indices from the boxes tensor, where <c>M &amp;lt;= max_output_size</c>.
              valid_outputs: A 0-D integer tensor representing the number of valid elements in
              <c>selected_indices</c>, with the valid elements appearing first.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              pruning away boxes that have high intersection-over-union (IOU) overlap
              with previously selected boxes.  Bounding boxes with score less than
              <c>score_threshold</c> are removed.  Bounding boxes are supplied as
              [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
              diagonal pair of box corners and the coordinates can be provided as normalized
              (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
              is agnostic to where the origin is in the coordinate system and more
              generally is invariant to orthogonal transformations and translations
              of the coordinate system; thus translating or reflections of the coordinate
              system result in the same boxes being selected by the algorithm.
              The output of this operation is a set of integers indexing into the input
              collection of bounding boxes representing the selected boxes.  The bounding
              box coordinates corresponding to the selected indices can then be obtained
              using the <c>tf.gather operation</c>.  For example:
              selected_indices = tf.image.non_max_suppression_v2(
              boxes, scores, max_output_size, iou_threshold, score_threshold)
              selected_boxes = tf.gather(boxes, selected_indices)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonMaxSuppressionWithOverlaps">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NonMaxSuppressionWithOverlaps (TensorFlow.TFOutput overlaps, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, TensorFlow.TFOutput overlap_threshold, TensorFlow.TFOutput score_threshold, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NonMaxSuppressionWithOverlaps(valuetype TensorFlow.TFOutput overlaps, valuetype TensorFlow.TFOutput scores, valuetype TensorFlow.TFOutput max_output_size, valuetype TensorFlow.TFOutput overlap_threshold, valuetype TensorFlow.TFOutput score_threshold, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlaps" Type="TensorFlow.TFOutput" />
        <Parameter Name="scores" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_output_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="overlap_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="score_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="overlaps">
              A 2-D float tensor of shape <c>[num_boxes, num_boxes]</c> representing
              the n-by-n box overlap values.
            </param>
        <param name="scores">
              A 1-D float tensor of shape <c>[num_boxes]</c> representing a single
              score corresponding to each box (each row of boxes).
            </param>
        <param name="max_output_size">
              A scalar integer tensor representing the maximum number of
              boxes to be selected by non max suppression.
            </param>
        <param name="overlap_threshold">
              A 0-D float tensor representing the threshold for deciding whether
              boxes overlap too.
            </param>
        <param name="score_threshold">
              A 0-D float tensor representing the threshold for deciding when to remove
              boxes based on score.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppressionWithOverlaps'.
            </param>
        <summary>
              Greedily selects a subset of bounding boxes in descending order of score,
            </summary>
        <returns>
              A 1-D integer tensor of shape <c>[M]</c> representing the selected
              indices from the boxes tensor, where <c>M &amp;lt;= max_output_size</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              pruning away boxes that have high overlaps
              with previously selected boxes.  Bounding boxes with score less than
              <c>score_threshold</c> are removed. N-by-n overlap values are supplied as square matrix,
              which allows for defining a custom overlap criterium (eg. intersection over union,
              intersection over area, etc.).
              
              The output of this operation is a set of integers indexing into the input
              collection of bounding boxes representing the selected boxes.  The bounding
              box coordinates corresponding to the selected indices can then be obtained
              using the <c>tf.gather operation</c>.  For example:
              
              selected_indices = tf.image.non_max_suppression_with_overlaps(
              overlaps, scores, max_output_size, overlap_threshold, score_threshold)
              selected_boxes = tf.gather(boxes, selected_indices)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation NoOp (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation NoOp(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NoOp'.
            </param>
        <summary>
              Does nothing. Only useful as a placeholder for control edges.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NotEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NotEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NotEqual'.
            </param>
        <summary>
              Returns the truth value of (x != y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>NotEqual</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NthElement">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NthElement (TensorFlow.TFOutput input, TensorFlow.TFOutput n, Nullable&lt;bool&gt; reverse = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NthElement(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput n, valuetype System.Nullable`1&lt;bool&gt; reverse, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="n" Type="TensorFlow.TFOutput" />
        <Parameter Name="reverse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D or higher with last dimension at least <c>n+1</c>.
            </param>
        <param name="n">
              0-D. Position of sorted vector to select along the last dimension (along
              each row for matrices). Valid range of n is <c>[0, input.shape[:-1])</c></param>
        <param name="reverse">
              Optional argument
              When set to True, find the nth-largest value in the vector and vice
              versa.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NthElement'.
            </param>
        <summary>
              Finds values of the <c>n</c>-th order statistic for the last dimension.
            </summary>
        <returns>
              The <c>n</c>-th order statistic along each last dimensional slice.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If the input is a vector (rank-1), finds the entries which is the nth-smallest
              value in the vector and outputs their values as scalar tensor.
              
              For matrices (resp. higher rank input), computes the entries which is the
              nth-smallest value in each row (resp. vector along the last dimension). Thus,
              
              values.shape = input.shape[:-1]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumFunctions">
      <MemberSignature Language="C#" Value="public int NumFunctions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumFunctions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the number of TF_Functions registered in this graph.
            </summary>
        <value>The number functions.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OneHot">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OneHot (TensorFlow.TFOutput indices, TensorFlow.TFOutput depth, TensorFlow.TFOutput on_value, TensorFlow.TFOutput off_value, Nullable&lt;long&gt; axis = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OneHot(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput depth, valuetype TensorFlow.TFOutput on_value, valuetype TensorFlow.TFOutput off_value, valuetype System.Nullable`1&lt;int64&gt; axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="depth" Type="TensorFlow.TFOutput" />
        <Parameter Name="on_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="off_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">To be added.</param>
        <param name="depth">To be added.</param>
        <param name="on_value">To be added.</param>
        <param name="off_value">To be added.</param>
        <param name="axis">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ones">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Ones (TensorFlow.TFShape shape, TensorFlow.TFDataType dtype = TensorFlow.TFDataType.Double, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Ones(class TensorFlow.TFShape shape, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">Shape of the output tensor</param>
        <param name="dtype">Optional Type of the Zero value. Default: Double</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Outputs One values based on shape of tensor
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesLike">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OnesLike (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OnesLike(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              a tensor of type T.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OnesLike'.
            </param>
        <summary>
              Returns a tensor of ones with the same shape and type as x.
            </summary>
        <returns>
              a tensor of the same shape and type as x but filled with ones.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptimizeDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OptimizeDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput optimizations, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OptimizeDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput optimizations, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="optimizations" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
              A variant tensor representing the input dataset.
            </param>
        <param name="optimizations">
              A <c>tf.string</c> vector <c>tf.Tensor</c> identifying optimizations to use.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OptimizeDataset'.
            </param>
        <summary>
              Creates a dataset by applying optimizations to <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Creates a dataset by applying optimizations to <c>input_dataset</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionalFromValue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OptionalFromValue (TensorFlow.TFOutput[] components, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OptionalFromValue(valuetype TensorFlow.TFOutput[] components, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="components">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OptionalFromValue'.
            </param>
        <summary>
              Constructs an Optional variant from a tuple of tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionalGetValue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] OptionalGetValue (TensorFlow.TFOutput optional, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] OptionalGetValue(valuetype TensorFlow.TFOutput optional, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optional" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="optional">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OptionalGetValue'.
            </param>
        <summary>
              Returns the value stored in an Optional variant or raises an error if none exists.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionalHasValue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OptionalHasValue (TensorFlow.TFOutput optional, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OptionalHasValue(valuetype TensorFlow.TFOutput optional, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optional" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="optional">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OptionalHasValue'.
            </param>
        <summary>
              Returns true if and only if the given Optional variant has a value.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionalNone">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OptionalNone (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OptionalNone(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OptionalNone'.
            </param>
        <summary>
              Creates an Optional variant with no value.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapClear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation OrderedMapClear (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation OrderedMapClear(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapClear'.
            </param>
        <summary>
              Op removes all elements in the underlying container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapIncompleteSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OrderedMapIncompleteSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OrderedMapIncompleteSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapIncompleteSize'.
            </param>
        <summary>
              Op returns the number of incomplete elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapPeek">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] OrderedMapPeek (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] OrderedMapPeek(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapPeek'.
            </param>
        <summary>
              Op peeks at the values at the specified key.  If the
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              underlying container does not contain this key
              this op will block until it does.   This Op is optimized for
              performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OrderedMapSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OrderedMapSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapSize'.
            </param>
        <summary>
              Op returns the number of elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapStage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation OrderedMapStage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFOutput[] values, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation OrderedMapStage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
              int64
            </param>
        <param name="indices">
        </param>
        <param name="values">
              a list of tensors
              dtypes A list of data types that inserted values should adhere to.
            </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
              Maximum number of elements in the Staging Area. If &amp;gt; 0, inserts
              on the container will block when the capacity is reached.
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container. Otherwise,
              a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              It is necessary to match this name to the matching Unstage Op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapStage'.
            </param>
        <summary>
              Stage (key, values) in the underlying container which behaves like a ordered
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              associative container.   Elements are ordered by key.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapUnstage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] OrderedMapUnstage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] OrderedMapUnstage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapUnstage'.
            </param>
        <summary>
              Op removes and returns the values associated with the key
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              from the underlying container.   If the underlying container
              does not contain this key, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapUnstageNoKey">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt; OrderedMapUnstageNoKey (TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[]&gt; OrderedMapUnstageNoKey(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapUnstageNoKey'.
            </param>
        <summary>
              Op removes and returns the (key, value) element with the smallest
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              key:
              values:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              key from the underlying container.   If the underlying container
              does not contain elements, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutfeedDequeue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OutfeedDequeue (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, Nullable&lt;long&gt; device_ordinal = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OutfeedDequeue(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, valuetype System.Nullable`1&lt;int64&gt; device_ordinal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="device_ordinal" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of elements in the tensor.
            </param>
        <param name="shape">
              The shape of the tensor.
            </param>
        <param name="device_ordinal">
              Optional argument
              The TPU device to use. This should be -1 when the Op
              is running on a TPU device, and &amp;gt;= 0 when the Op is running on the CPU
              device.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OutfeedDequeue'.
            </param>
        <summary>
              Retrieves a single tensor from the computation outfeed.  This operation will
            </summary>
        <returns>
              A tensor that will be read from the device outfeed.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              block indefinitely until data is available.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutfeedDequeueTuple">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] OutfeedDequeueTuple (TensorFlow.TFDataType[] dtypes, TensorFlow.TFShape[] shapes, Nullable&lt;long&gt; device_ordinal = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] OutfeedDequeueTuple(valuetype TensorFlow.TFDataType[] dtypes, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; device_ordinal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="device_ordinal" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
              The element types of each element in <c>outputs</c>.
            </param>
        <param name="shapes">
              The shapes of each tensor in <c>outputs</c>.
            </param>
        <param name="device_ordinal">
              Optional argument
              The TPU device to use. This should be -1 when the Op
              is running on a TPU device, and &amp;gt;= 0 when the Op is running on the CPU
              device.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OutfeedDequeueTuple'.
            </param>
        <summary>
              Retrieve multiple values that will be emitted by the computation as an XLA
            </summary>
        <returns>
              A list of tensors that will be read from the outfeed.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              tuple.  This operations will block indefinitely until data is available.
              Output <c>i</c> corresponds to XLA tuple element <c>i</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutfeedEnqueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation OutfeedEnqueue (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation OutfeedEnqueue(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A tensor that will be inserted into the outfeed queue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OutfeedEnqueue'.
            </param>
        <summary>
              An op which emits a single Tensor value from an XLA computation.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutfeedEnqueueTuple">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation OutfeedEnqueueTuple (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation OutfeedEnqueueTuple(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              A list of tensors that will be inserted into the outfeed queue as an
              XLA tuple.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OutfeedEnqueueTuple'.
            </param>
        <summary>
              An op which emits multiple Tensor values from an XLA computation.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Pack (TensorFlow.TFOutput[] values, Nullable&lt;long&gt; axis = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Pack(valuetype TensorFlow.TFOutput[] values, valuetype System.Nullable`1&lt;int64&gt; axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="axis" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              Must be of same shape and type.
            </param>
        <param name="axis">
              Optional argument
              Dimension along which to pack.  Negative values wrap around, so the
              valid range is <c>[-(R+1), R+1)</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Pack'.
            </param>
        <summary>
              Packs a list of <c>N</c> rank-<c>R</c> tensors into one rank-<c>(R+1)</c> tensor.
            </summary>
        <returns>
              The packed tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Packs the <c>N</c> tensors in <c>values</c> into a tensor with rank one higher than each
              tensor in <c>values</c>, by packing them along the <c>axis</c> dimension.
              Given a list of tensors of shape <c>(A, B, C)</c>;
              
              if <c>axis == 0</c> then the <c>output</c> tensor will have the shape <c>(N, A, B, C)</c>.
              if <c>axis == 1</c> then the <c>output</c> tensor will have the shape <c>(A, N, B, C)</c>.
              Etc.
              
              For example:
              
               <code>
              # 'x' is [1, 4]
              # 'y' is [2, 5]
              # 'z' is [3, 6]
              pack([x, y, z]) =&amp;gt; [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.
              pack([x, y, z], axis=1) =&amp;gt; [[1, 2, 3], [4, 5, 6]]
               </code>
              
              This is the opposite of <c>unpack</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Pad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Pad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="paddings">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Pad'.
            </param>
        <summary>
              Pads a tensor with zeros.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation pads a <c>input</c> with zeros according to the <c>paddings</c> you
              specify. <c>paddings</c> is an integer tensor with shape <c>[Dn, 2]</c>, where n is the
              rank of <c>input</c>. For each dimension D of <c>input</c>, <c>paddings[D, 0]</c> indicates
              how many zeros to add before the contents of <c>input</c> in that dimension, and
              <c>paddings[D, 1]</c> indicates how many zeros to add after the contents of <c>input</c>
              in that dimension.
              
              The padded size of each dimension D of the output is:
              
              <c>paddings(D, 0) + input.dim_size(D) + paddings(D, 1)</c>
              
              For example:
              
               <code>
              # 't' is [[1, 1], [2, 2]]
              # 'paddings' is [[1, 1], [2, 2]]
              # rank of 't' is 2
              pad(t, paddings) ==&amp;gt; [[0, 0, 0, 0, 0, 0]
              [0, 0, 1, 1, 0, 0]
              [0, 0, 2, 2, 0, 0]
              [0, 0, 0, 0, 0, 0]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddedBatchDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PaddedBatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFOutput[] padded_shapes, TensorFlow.TFOutput[] padding_values, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PaddedBatchDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput batch_size, valuetype TensorFlow.TFOutput[] padded_shapes, valuetype TensorFlow.TFOutput[] padding_values, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="padded_shapes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="padding_values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="batch_size">
              A scalar representing the number of elements to accumulate in a
              batch.
            </param>
        <param name="padded_shapes">
              A list of int64 tensors representing the desired padded shapes
              of the corresponding output components. These shapes may be partially
              specified, using <c>-1</c> to indicate that a particular dimension should be
              padded to the maximum size of all batch elements.
            </param>
        <param name="padding_values">
              A list of scalars containing the padding value to use for
              each of the outputs.
            </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddedBatchDataset'.
            </param>
        <summary>
              Creates a dataset that batches and pads <c>batch_size</c> elements from the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddedBatchDatasetV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PaddedBatchDatasetV2 (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFOutput[] padded_shapes, TensorFlow.TFOutput[] padding_values, TensorFlow.TFOutput drop_remainder, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PaddedBatchDatasetV2(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput batch_size, valuetype TensorFlow.TFOutput[] padded_shapes, valuetype TensorFlow.TFOutput[] padding_values, valuetype TensorFlow.TFOutput drop_remainder, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="padded_shapes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="padding_values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="drop_remainder" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="batch_size">
              A scalar representing the number of elements to accumulate in a
              batch.
            </param>
        <param name="padded_shapes">
              A list of int64 tensors representing the desired padded shapes
              of the corresponding output components. These shapes may be partially
              specified, using <c>-1</c> to indicate that a particular dimension should be
              padded to the maximum size of all batch elements.
            </param>
        <param name="padding_values">
              A list of scalars containing the padding value to use for
              each of the outputs.
            </param>
        <param name="drop_remainder">
              A scalar representing whether the last batch should be dropped in case its size
              is smaller than desired.
            </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddedBatchDatasetV2'.
            </param>
        <summary>
              Creates a dataset that batches and pads <c>batch_size</c> elements from the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingFIFOQueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PaddingFIFOQueue (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PaddingFIFOQueue(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types.
              Shapes of fixed rank but variable size are allowed by setting
              any shape dimension to -1.  In this case, the inputs' shape may vary along
              the given dimension, and DequeueMany will pad the given dimension with
              zeros up to the maximum shape of all elements in the given batch.
              If the length of this attr is 0, different queue elements may have
              different ranks and shapes, but only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddingFIFOQueue'.
            </param>
        <summary>
              A queue that produces elements in first-in first-out order.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Variable-size shapes are allowed by setting the corresponding shape dimensions
              to 0 in the shape attr.  In this case DequeueMany will pad up to the maximum
              size of any given element in the minibatch.  See below for details.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingFIFOQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PaddingFIFOQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PaddingFIFOQueueV2(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types.
              Shapes of fixed rank but variable size are allowed by setting
              any shape dimension to -1.  In this case, the inputs' shape may vary along
              the given dimension, and DequeueMany will pad the given dimension with
              zeros up to the maximum shape of all elements in the given batch.
              If the length of this attr is 0, different queue elements may have
              different ranks and shapes, but only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddingFIFOQueueV2'.
            </param>
        <summary>
              A queue that produces elements in first-in first-out order.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Variable-size shapes are allowed by setting the corresponding shape dimensions
              to 0 in the shape attr.  In this case DequeueMany will pad up to the maximum
              size of any given element in the minibatch.  See below for details.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PadV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PadV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, TensorFlow.TFOutput constant_values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PadV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, valuetype TensorFlow.TFOutput constant_values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="constant_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="paddings">
        </param>
        <param name="constant_values">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PadV2'.
            </param>
        <summary>
              Pads a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation pads <c>input</c> according to the <c>paddings</c> and <c>constant_values</c>
              you specify. <c>paddings</c> is an integer tensor with shape <c>[Dn, 2]</c>, where n is
              the rank of <c>input</c>. For each dimension D of <c>input</c>, <c>paddings[D, 0]</c> indicates
              how many padding values to add before the contents of <c>input</c> in that dimension,
              and <c>paddings[D, 1]</c> indicates how many padding values to add after the contents
              of <c>input</c> in that dimension. <c>constant_values</c> is a scalar tensor of the same
              type as <c>input</c> that indicates the value to use for padding <c>input</c>.
              
              The padded size of each dimension D of the output is:
              
              <c>paddings(D, 0) + input.dim_size(D) + paddings(D, 1)</c>
              
              For example:
              
               <code>
              # 't' is [[1, 1], [2, 2]]
              # 'paddings' is [[1, 1], [2, 2]]
              # 'constant_values' is 0
              # rank of 't' is 2
              pad(t, paddings) ==&amp;gt; [[0, 0, 0, 0, 0, 0]
              [0, 0, 1, 1, 0, 0]
              [0, 0, 2, 2, 0, 0]
              [0, 0, 0, 0, 0, 0]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ParallelConcat">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ParallelConcat (TensorFlow.TFOutput[] values, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ParallelConcat(valuetype TensorFlow.TFOutput[] values, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              Tensors to be concatenated. All must have size 1 in the first dimension
              and same shape.
            </param>
        <param name="shape">
              the final shape of the result; should be equal to the shapes of any input
              but with the number of input values in the first dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParallelConcat'.
            </param>
        <summary>
              Concatenates a list of <c>N</c> tensors along the first dimension.
            </summary>
        <returns>
              The concatenated tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input tensors are all required to have size 1 in the first dimension.
              
              For example:
              
               <code>
              # 'x' is [[1, 4]]
              # 'y' is [[2, 5]]
              # 'z' is [[3, 6]]
              parallel_concat([x, y, z]) =&amp;gt; [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.
               </code>
              
              The difference between concat and parallel_concat is that concat requires all
              of the inputs be computed before the operation will begin but doesn't require
              that the input shapes be known during graph construction.  Parallel concat
              will copy pieces of the input into the output as they become available, in
              some situations this can provide a performance benefit.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParallelDynamicStitch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ParallelDynamicStitch (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ParallelDynamicStitch(valuetype TensorFlow.TFOutput[] indices, valuetype TensorFlow.TFOutput[] data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="data">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParallelDynamicStitch'.
            </param>
        <summary>
              Interleave the values from the <c>data</c> tensors into a single tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Builds a merged tensor such that
              
               <code>
              merged[indices[m][i, ..., j], ...] = data[m][i, ..., j, ...]
               </code>
              
              For example, if each <c>indices[m]</c> is scalar or vector, we have
              
               <code>
              # Scalar indices:
              merged[indices[m], ...] = data[m][...]
              
              # Vector indices:
              merged[indices[m][i], ...] = data[m][i, ...]
               </code>
              
              Each <c>data[i].shape</c> must start with the corresponding <c>indices[i].shape</c>,
              and the rest of <c>data[i].shape</c> must be constant w.r.t. <c>i</c>.  That is, we
              must have <c>data[i].shape = indices[i].shape + constant</c>.  In terms of this
              <c>constant</c>, the output shape is
              
              merged.shape = [max(indices)] + constant
              
              Values may be merged in parallel, so if an index appears in both <c>indices[m][i]</c>
              and <c>indices[n][j]</c>, the result may be invalid. This differs from the normal
              DynamicStitch operator that defines the behavior in that case.
              
              For example:
              
               <code>
              indices[0] = 6
              indices[1] = [4, 1]
              indices[2] = [[5, 2], [0, 3]]
              data[0] = [61, 62]
              data[1] = [[41, 42], [11, 12]]
              data[2] = [[[51, 52], [21, 22]], [[1, 2], [31, 32]]]
              merged = [[1, 2], [11, 12], [21, 22], [31, 32], [41, 42],
              [51, 52], [61, 62]]
               </code>
              
              This method can be used to merge partitions created by <c>dynamic_partition</c>
              as illustrated on the following example:
              
               <code>
              # Apply function (increments x_i) on elements for which a certain condition
              # apply (x_i != -1 in this example).
              x=tf.constant([0.1, -1., 5.2, 4.3, -1., 7.4])
              condition_mask=tf.not_equal(x,tf.constant(-1.))
              partitioned_data = tf.dynamic_partition(
              x, tf.cast(condition_mask, tf.int32) , 2)
              partitioned_data[1] = partitioned_data[1] + 1.0
              condition_indices = tf.dynamic_partition(
              tf.range(tf.shape(x)[0]), tf.cast(condition_mask, tf.int32) , 2)
              x = tf.dynamic_stitch(condition_indices, partitioned_data)
              # Here x=[1.1, -1., 6.2, 5.3, -1, 8.4], the -1. values remain
              # unchanged.
               </code>
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/DynamicStitch.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterizedTruncatedNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ParameterizedTruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput means, TensorFlow.TFOutput stdevs, TensorFlow.TFOutput minvals, TensorFlow.TFOutput maxvals, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ParameterizedTruncatedNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput means, valuetype TensorFlow.TFOutput stdevs, valuetype TensorFlow.TFOutput minvals, valuetype TensorFlow.TFOutput maxvals, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="means" Type="TensorFlow.TFOutput" />
        <Parameter Name="stdevs" Type="TensorFlow.TFOutput" />
        <Parameter Name="minvals" Type="TensorFlow.TFOutput" />
        <Parameter Name="maxvals" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor. Batches are indexed by the 0th dimension.
            </param>
        <param name="means">
              The mean parameter of each batch.
            </param>
        <param name="stdevs">
              The standard deviation parameter of each batch. Must be greater than 0.
            </param>
        <param name="minvals">
              The minimum cutoff. May be -infinity.
            </param>
        <param name="maxvals">
              The maximum cutoff. May be +infinity, and must be more than the minval
              for each batch.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParameterizedTruncatedNormal'.
            </param>
        <summary>
              Outputs random values from a normal distribution. The parameters may each be a
            </summary>
        <returns>
              A matrix of shape num_batches x samples_per_batch, filled with random
              truncated normal values using the parameters for each row.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              scalar which applies to the entire output, or a vector of length shape[0] which
              stores the parameters for each batch.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExample">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; ParseExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput names, TensorFlow.TFOutput[] sparse_keys, TensorFlow.TFOutput[] dense_keys, TensorFlow.TFOutput[] dense_defaults, TensorFlow.TFDataType[] sparse_types, TensorFlow.TFShape[] dense_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; ParseExample(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFOutput names, valuetype TensorFlow.TFOutput[] sparse_keys, valuetype TensorFlow.TFOutput[] dense_keys, valuetype TensorFlow.TFOutput[] dense_defaults, valuetype TensorFlow.TFDataType[] sparse_types, class TensorFlow.TFShape[] dense_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="names" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A vector containing a batch of binary serialized Example protos.
            </param>
        <param name="names">
              A vector containing the names of the serialized protos.
              May contain, for example, table key (descriptive) names for the
              corresponding serialized protos.  These are purely useful for debugging
              purposes, and the presence of values here has no effect on the output.
              May also be an empty vector if no names are available.
              If non-empty, this vector must be the same length as "serialized".
            </param>
        <param name="sparse_keys">
              A list of Nsparse string Tensors (scalars).
              The keys expected in the Examples' features associated with sparse values.
            </param>
        <param name="dense_keys">
              A list of Ndense string Tensors (scalars).
              The keys expected in the Examples' features associated with dense values.
            </param>
        <param name="dense_defaults">
              A list of Ndense Tensors (some may be empty).
              dense_defaults[j] provides default values
              when the example's feature_map lacks dense_key[j].  If an empty Tensor is
              provided for dense_defaults[j], then the Feature dense_keys[j] is required.
              The input type is inferred from dense_defaults[j], even when it's empty.
              If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined,
              then the shape of dense_defaults[j] must match that of dense_shapes[j].
              If dense_shapes[j] has an undefined major dimension (variable strides dense
              feature), dense_defaults[j] must contain a single element:
              the padding element.
            </param>
        <param name="sparse_types">
              A list of Nsparse types; the data types of data in each Feature
              given in sparse_keys.
              Currently the ParseExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="dense_shapes">
              A list of Ndense shapes; the shapes of data in each Feature
              given in dense_keys.
              The number of elements in the Feature corresponding to dense_key[j]
              must always equal dense_shapes[j].NumEntries().
              If dense_shapes[j] == (D0, D1, ..., DN) then the shape of output
              Tensor dense_values[j] will be (|serialized|, D0, D1, ..., DN):
              The dense outputs are just the inputs row-stacked by batch.
              This works for dense_shapes[j] = (-1, D1, ..., DN).  In this case
              the shape of the output Tensor dense_values[j] will be
              (|serialized|, M, D1, .., DN), where M is the maximum number of blocks
              of elements of length D1 * .... * DN, across all minibatch entries
              in the input.  Any minibatch entry with less than M blocks of elements of
              length D1 * ... * DN will be padded with the corresponding default_value
              scalar element along the second dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseExample'.
            </param>
        <summary>
              Transforms a vector of brain.Example protos (as strings) into typed tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices:
              sparse_values:
              sparse_shapes:
              dense_values:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSequenceExample">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;&gt; ParseSequenceExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput debug_name, TensorFlow.TFOutput[] context_dense_defaults, string[] feature_list_dense_missing_assumed_empty, string[] context_sparse_keys, string[] context_dense_keys, string[] feature_list_sparse_keys, string[] feature_list_dense_keys, Nullable&lt;long&gt; Ncontext_sparse = null, Nullable&lt;long&gt; Ncontext_dense = null, Nullable&lt;long&gt; Nfeature_list_sparse = null, Nullable&lt;long&gt; Nfeature_list_dense = null, TensorFlow.TFDataType[] context_sparse_types = null, TensorFlow.TFDataType[] feature_list_dense_types = null, TensorFlow.TFShape[] context_dense_shapes = null, TensorFlow.TFDataType[] feature_list_sparse_types = null, TensorFlow.TFShape[] feature_list_dense_shapes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`8&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt;&gt; ParseSequenceExample(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFOutput debug_name, valuetype TensorFlow.TFOutput[] context_dense_defaults, string[] feature_list_dense_missing_assumed_empty, string[] context_sparse_keys, string[] context_dense_keys, string[] feature_list_sparse_keys, string[] feature_list_dense_keys, valuetype System.Nullable`1&lt;int64&gt; Ncontext_sparse, valuetype System.Nullable`1&lt;int64&gt; Ncontext_dense, valuetype System.Nullable`1&lt;int64&gt; Nfeature_list_sparse, valuetype System.Nullable`1&lt;int64&gt; Nfeature_list_dense, valuetype TensorFlow.TFDataType[] context_sparse_types, valuetype TensorFlow.TFDataType[] feature_list_dense_types, class TensorFlow.TFShape[] context_dense_shapes, valuetype TensorFlow.TFDataType[] feature_list_sparse_types, class TensorFlow.TFShape[] feature_list_dense_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="debug_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="context_dense_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="feature_list_dense_missing_assumed_empty" Type="System.String[]" />
        <Parameter Name="context_sparse_keys" Type="System.String[]" />
        <Parameter Name="context_dense_keys" Type="System.String[]" />
        <Parameter Name="feature_list_sparse_keys" Type="System.String[]" />
        <Parameter Name="feature_list_dense_keys" Type="System.String[]" />
        <Parameter Name="Ncontext_sparse" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="Ncontext_dense" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="Nfeature_list_sparse" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="Nfeature_list_dense" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="context_sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="feature_list_dense_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="context_dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="feature_list_sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="feature_list_dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A vector containing binary serialized SequenceExample protos.
            </param>
        <param name="debug_name">
              A vector containing the names of the serialized protos.
              May contain, for example, table key (descriptive) name for the
              corresponding serialized proto.  This is purely useful for debugging
              purposes, and the presence of values here has no effect on the output.
              May also be an empty vector if no name is available.
            </param>
        <param name="context_dense_defaults">
              A list of Ncontext_dense Tensors (some may be empty).
              context_dense_defaults[j] provides default values
              when the SequenceExample's context map lacks context_dense_key[j].
              If an empty Tensor is provided for context_dense_defaults[j],
              then the Feature context_dense_keys[j] is required.
              The input type is inferred from context_dense_defaults[j], even when it's
              empty.  If context_dense_defaults[j] is not empty, its shape must match
              context_dense_shapes[j].
            </param>
        <param name="feature_list_dense_missing_assumed_empty">
              A vector listing the
              FeatureList keys which may be missing from the SequenceExamples.  If the
              associated FeatureList is missing, it is treated as empty.  By default,
              any FeatureList not listed in this vector must exist in the SequenceExamples.
            </param>
        <param name="context_sparse_keys">
              A list of Ncontext_sparse string Tensors (scalars).
              The keys expected in the Examples' features associated with context_sparse
              values.
            </param>
        <param name="context_dense_keys">
              A list of Ncontext_dense string Tensors (scalars).
              The keys expected in the SequenceExamples' context features associated with
              dense values.
            </param>
        <param name="feature_list_sparse_keys">
              A list of Nfeature_list_sparse string Tensors
              (scalars).  The keys expected in the FeatureLists associated with sparse
              values.
            </param>
        <param name="feature_list_dense_keys">
              A list of Nfeature_list_dense string Tensors (scalars).
              The keys expected in the SequenceExamples' feature_lists associated
              with lists of dense values.
            </param>
        <param name="Ncontext_sparse">
              Optional argument
            </param>
        <param name="Ncontext_dense">
              Optional argument
            </param>
        <param name="Nfeature_list_sparse">
              Optional argument
            </param>
        <param name="Nfeature_list_dense">
              Optional argument
            </param>
        <param name="context_sparse_types">
              Optional argument
              A list of Ncontext_sparse types; the data types of data in
              each context Feature given in context_sparse_keys.
              Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="feature_list_dense_types">
              Optional argument
            </param>
        <param name="context_dense_shapes">
              Optional argument
              A list of Ncontext_dense shapes; the shapes of data in
              each context Feature given in context_dense_keys.
              The number of elements in the Feature corresponding to context_dense_key[j]
              must always equal context_dense_shapes[j].NumEntries().
              The shape of context_dense_values[j] will match context_dense_shapes[j].
            </param>
        <param name="feature_list_sparse_types">
              Optional argument
              A list of Nfeature_list_sparse types; the data types
              of data in each FeatureList given in feature_list_sparse_keys.
              Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="feature_list_dense_shapes">
              Optional argument
              A list of Nfeature_list_dense shapes; the shapes of
              data in each FeatureList given in feature_list_dense_keys.
              The shape of each Feature in the FeatureList corresponding to
              feature_list_dense_key[j] must always equal
              feature_list_dense_shapes[j].NumEntries().
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseSequenceExample'.
            </param>
        <summary>
              Transforms a vector of brain.SequenceExample protos (as strings) into typed tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              context_sparse_indices:
              context_sparse_values:
              context_sparse_shapes:
              context_dense_values:
              feature_list_sparse_indices:
              feature_list_sparse_values:
              feature_list_sparse_shapes:
              feature_list_dense_values:
              feature_list_dense_lengths:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSingleExample">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; ParseSingleExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput[] dense_defaults, long num_sparse, string[] sparse_keys, string[] dense_keys, TensorFlow.TFDataType[] sparse_types, TensorFlow.TFShape[] dense_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; ParseSingleExample(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFOutput[] dense_defaults, int64 num_sparse, string[] sparse_keys, string[] dense_keys, valuetype TensorFlow.TFDataType[] sparse_types, class TensorFlow.TFShape[] dense_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="num_sparse" Type="System.Int64" />
        <Parameter Name="sparse_keys" Type="System.String[]" />
        <Parameter Name="dense_keys" Type="System.String[]" />
        <Parameter Name="sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A vector containing a batch of binary serialized Example protos.
            </param>
        <param name="dense_defaults">
              A list of Tensors (some may be empty), whose length matches
              the length of <c>dense_keys</c>. dense_defaults[j] provides default values
              when the example's feature_map lacks dense_key[j].  If an empty Tensor is
              provided for dense_defaults[j], then the Feature dense_keys[j] is required.
              The input type is inferred from dense_defaults[j], even when it's empty.
              If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined,
              then the shape of dense_defaults[j] must match that of dense_shapes[j].
              If dense_shapes[j] has an undefined major dimension (variable strides dense
              feature), dense_defaults[j] must contain a single element:
              the padding element.
            </param>
        <param name="num_sparse">
              The number of sparse features to be parsed from the example. This
              must match the lengths of <c>sparse_keys</c> and <c>sparse_types</c>.
            </param>
        <param name="sparse_keys">
              A list of <c>num_sparse</c> strings.
              The keys expected in the Examples' features associated with sparse values.
            </param>
        <param name="dense_keys">
              The keys expected in the Examples' features associated with dense
              values.
            </param>
        <param name="sparse_types">
              A list of <c>num_sparse</c> types; the data types of data in each
              Feature given in sparse_keys.
              Currently the ParseSingleExample op supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="dense_shapes">
              The shapes of data in each Feature given in dense_keys.
              The length of this list must match the length of <c>dense_keys</c>.  The
              number of elements in the Feature corresponding to dense_key[j] must
              always equal dense_shapes[j].NumEntries().  If dense_shapes[j] ==
              (D0, D1, ..., DN) then the shape of output Tensor dense_values[j]
              will be (D0, D1, ..., DN): In the case dense_shapes[j] = (-1, D1,
              ..., DN), the shape of the output Tensor dense_values[j] will be (M,
              D1, .., DN), where M is the number of blocks of elements of length
              D1 * .... * DN, in the input.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseSingleExample'.
            </param>
        <summary>
              Transforms a tf.Example proto (as a string) into typed tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices:
              sparse_values:
              sparse_shapes:
              dense_values:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSingleSequenceExample">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],ValueTuple&lt;TensorFlow.TFOutput[]&gt;&gt; ParseSingleSequenceExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput feature_list_dense_missing_assumed_empty, TensorFlow.TFOutput[] context_sparse_keys, TensorFlow.TFOutput[] context_dense_keys, TensorFlow.TFOutput[] feature_list_sparse_keys, TensorFlow.TFOutput[] feature_list_dense_keys, TensorFlow.TFOutput[] context_dense_defaults, TensorFlow.TFOutput debug_name, TensorFlow.TFDataType[] context_sparse_types = null, TensorFlow.TFDataType[] feature_list_dense_types = null, TensorFlow.TFShape[] context_dense_shapes = null, TensorFlow.TFDataType[] feature_list_sparse_types = null, TensorFlow.TFShape[] feature_list_dense_shapes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`8&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype System.ValueTuple`1&lt;valuetype TensorFlow.TFOutput[]&gt;&gt; ParseSingleSequenceExample(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFOutput feature_list_dense_missing_assumed_empty, valuetype TensorFlow.TFOutput[] context_sparse_keys, valuetype TensorFlow.TFOutput[] context_dense_keys, valuetype TensorFlow.TFOutput[] feature_list_sparse_keys, valuetype TensorFlow.TFOutput[] feature_list_dense_keys, valuetype TensorFlow.TFOutput[] context_dense_defaults, valuetype TensorFlow.TFOutput debug_name, valuetype TensorFlow.TFDataType[] context_sparse_types, valuetype TensorFlow.TFDataType[] feature_list_dense_types, class TensorFlow.TFShape[] context_dense_shapes, valuetype TensorFlow.TFDataType[] feature_list_sparse_types, class TensorFlow.TFShape[] feature_list_dense_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.ValueTuple&lt;TensorFlow.TFOutput[]&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="feature_list_dense_missing_assumed_empty" Type="TensorFlow.TFOutput" />
        <Parameter Name="context_sparse_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="context_dense_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="feature_list_sparse_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="feature_list_dense_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="context_dense_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="debug_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="context_sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="feature_list_dense_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="context_dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="feature_list_sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="feature_list_dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A scalar containing a binary serialized SequenceExample proto.
            </param>
        <param name="feature_list_dense_missing_assumed_empty">
              A vector listing the
              FeatureList keys which may be missing from the SequenceExample.  If the
              associated FeatureList is missing, it is treated as empty.  By default,
              any FeatureList not listed in this vector must exist in the SequenceExample.
            </param>
        <param name="context_sparse_keys">
              A list of Ncontext_sparse string Tensors (scalars).
              The keys expected in the Examples' features associated with context_sparse
              values.
            </param>
        <param name="context_dense_keys">
              A list of Ncontext_dense string Tensors (scalars).
              The keys expected in the SequenceExamples' context features associated with
              dense values.
            </param>
        <param name="feature_list_sparse_keys">
              A list of Nfeature_list_sparse string Tensors
              (scalars).  The keys expected in the FeatureLists associated with sparse
              values.
            </param>
        <param name="feature_list_dense_keys">
              A list of Nfeature_list_dense string Tensors (scalars).
              The keys expected in the SequenceExamples' feature_lists associated
              with lists of dense values.
            </param>
        <param name="context_dense_defaults">
              A list of Ncontext_dense Tensors (some may be empty).
              context_dense_defaults[j] provides default values
              when the SequenceExample's context map lacks context_dense_key[j].
              If an empty Tensor is provided for context_dense_defaults[j],
              then the Feature context_dense_keys[j] is required.
              The input type is inferred from context_dense_defaults[j], even when it's
              empty.  If context_dense_defaults[j] is not empty, its shape must match
              context_dense_shapes[j].
            </param>
        <param name="debug_name">
              A scalar containing the name of the serialized proto.
              May contain, for example, table key (descriptive) name for the
              corresponding serialized proto.  This is purely useful for debugging
              purposes, and the presence of values here has no effect on the output.
              May also be an empty scalar if no name is available.
            </param>
        <param name="context_sparse_types">
              Optional argument
              A list of Ncontext_sparse types; the data types of data in
              each context Feature given in context_sparse_keys.
              Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="feature_list_dense_types">
              Optional argument
            </param>
        <param name="context_dense_shapes">
              Optional argument
              A list of Ncontext_dense shapes; the shapes of data in
              each context Feature given in context_dense_keys.
              The number of elements in the Feature corresponding to context_dense_key[j]
              must always equal context_dense_shapes[j].NumEntries().
              The shape of context_dense_values[j] will match context_dense_shapes[j].
            </param>
        <param name="feature_list_sparse_types">
              Optional argument
              A list of Nfeature_list_sparse types; the data types
              of data in each FeatureList given in feature_list_sparse_keys.
              Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="feature_list_dense_shapes">
              Optional argument
              A list of Nfeature_list_dense shapes; the shapes of
              data in each FeatureList given in feature_list_dense_keys.
              The shape of each Feature in the FeatureList corresponding to
              feature_list_dense_key[j] must always equal
              feature_list_dense_shapes[j].NumEntries().
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseSingleSequenceExample'.
            </param>
        <summary>
              Transforms a scalar brain.SequenceExample proto (as strings) into typed tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              context_sparse_indices:
              context_sparse_values:
              context_sparse_shapes:
              context_dense_values:
              feature_list_sparse_indices:
              feature_list_sparse_values:
              feature_list_sparse_shapes:
              feature_list_dense_values:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ParseTensor (TensorFlow.TFOutput serialized, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ParseTensor(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A scalar string containing a serialized TensorProto proto.
            </param>
        <param name="out_type">
              The type of the serialized tensor.  The provided type must match the
              type of the serialized tensor and no implicit conversion will take place.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseTensor'.
            </param>
        <summary>
              Transforms a serialized tensorflow.TensorProto proto into a Tensor.
            </summary>
        <returns>
              A Tensor of type <c>out_type</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Placeholder">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Placeholder (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Placeholder(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of elements in the tensor.
            </param>
        <param name="shape">
              Optional argument
              (Optional) The shape of the tensor. If the shape has 0 dimensions, the
              shape is unconstrained.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Placeholder'.
            </param>
        <summary>
              A placeholder op for a value that will be fed into the computation.
            </summary>
        <returns>
              A placeholder tensor that must be replaced using the feed mechanism.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              N.B. This operation will fail with an error if it is executed. It is
              intended as a way to represent a value that will always be fed, and to
              provide attrs that enable the fed value to be checked at runtime.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaceholderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PlaceholderV2 (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PlaceholderV2(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of elements in the tensor.
            </param>
        <param name="shape">
              The shape of the tensor. The shape can be any partially-specified
              shape.  To be unconstrained, pass in a shape with unknown rank.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PlaceholderV2'.
            </param>
        <summary>
              A placeholder op for a value that will be fed into the computation.
            </summary>
        <returns>
              A placeholder tensor that must be replaced using the feed mechanism.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              N.B. This operation will fail with an error if it is executed. It is
              intended as a way to represent a value that will always be fed, and to
              provide attrs that enable the fed value to be checked at runtime.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaceholderWithDefault">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PlaceholderWithDefault (TensorFlow.TFOutput input, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PlaceholderWithDefault(valuetype TensorFlow.TFOutput input, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The default value to produce when <c>output</c> is not fed.
            </param>
        <param name="shape">
              The (possibly partial) shape of the tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PlaceholderWithDefault'.
            </param>
        <summary>
              A placeholder op that passes through <c>input</c> when its output is not fed.
            </summary>
        <returns>
              A placeholder tensor that defaults to <c>input</c> if it is not fed.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Polygamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Polygamma (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Polygamma(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Polygamma'.
            </param>
        <summary>
              Compute the polygamma function \\(\psi^{(n)}(x)\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The polygamma function is defined as:
              
              
              \\(\psi^{(n)}(x) = \frac{d^n}{dx^n} \psi(x)\\)
              
              where \\(\psi(x)\\) is the digamma function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulationCount">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PopulationCount (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PopulationCount(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PopulationCount'.
            </param>
        <summary>
              Computes element-wise population count (a.k.a. popcount, bitsum, bitcount).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each entry in <c>x</c>, calculates the number of <c>1</c> (on) bits in the binary
              representation of that entry.
              
              **NOTE**: It is more efficient to first <c>tf.bitcast</c> your tensors into
              <c>int32</c> or <c>int64</c> and perform the bitcount on the result, than to feed in
              8- or 16-bit inputs and then aggregate the resulting counts.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Pow (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Pow(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Pow'.
            </param>
        <summary>
              Computes the power of one value to another.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>x</c> and a tensor <c>y</c>, this operation computes \\(x^y\\) for
              corresponding elements in <c>x</c> and <c>y</c>. For example:
              
               <code>
              # tensor 'x' is [[2, 2]], [3, 3]]
              # tensor 'y' is [[8, 16], [2, 3]]
              tf.pow(x, y) ==&amp;gt; [[256, 65536], [9, 27]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefetchDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PrefetchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput buffer_size, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PrefetchDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput buffer_size, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="buffer_size">
              The maximum number of elements to buffer in an iterator over
              this dataset.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PrefetchDataset'.
            </param>
        <summary>
              Creates a dataset that asynchronously prefetches elements from <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreventGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PreventGradient (TensorFlow.TFOutput input, string message = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PreventGradient(valuetype TensorFlow.TFOutput input, string message, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              any tensor.
            </param>
        <param name="message">
              Optional argument
              Will be printed in the error when anyone tries to differentiate
              this operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PreventGradient'.
            </param>
        <summary>
              An identity op that triggers an error if a gradient is requested.
            </summary>
        <returns>
              the same input tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              When executed in a graph, this op outputs its input tensor as-is.
              
              When building ops to compute gradients, the TensorFlow gradient system
              will return an error when trying to lookup the gradient of this op,
              because no gradient must ever be registered for this function.  This
              op exists to prevent subtle bugs from silently returning unimplemented
              gradients in some corner cases.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Print (TensorFlow.TFOutput input, TensorFlow.TFOutput[] data, string message = null, Nullable&lt;long&gt; first_n = null, Nullable&lt;long&gt; summarize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Print(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput[] data, string message, valuetype System.Nullable`1&lt;int64&gt; first_n, valuetype System.Nullable`1&lt;int64&gt; summarize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="first_n" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="summarize" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor passed to <c>output</c></param>
        <param name="data">
              A list of tensors to print out when op is evaluated.
            </param>
        <param name="message">
              Optional argument
              A string, prefix of the error message.
            </param>
        <param name="first_n">
              Optional argument
              Only log <c>first_n</c> number of times. -1 disables logging.
            </param>
        <param name="summarize">
              Optional argument
              Only print this many entries of each tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Print'.
            </param>
        <summary>
              Prints a list of tensors.
            </summary>
        <returns>
              = The unmodified <c>input</c> tensor
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Passes <c>input</c> through to <c>output</c> and prints <c>data</c> when evaluating.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation PrintV2 (TensorFlow.TFOutput input, string output_stream = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation PrintV2(valuetype TensorFlow.TFOutput input, string output_stream, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_stream" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The string scalar to print.
            </param>
        <param name="output_stream">
              Optional argument
              A string specifying the output stream or logging level to print to.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PrintV2'.
            </param>
        <summary>
              Prints a string scalar.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Prints a string scalar to the desired output_stream.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriorityQueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PriorityQueue (TensorFlow.TFShape[] shapes, TensorFlow.TFDataType[] component_types = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PriorityQueue(class TensorFlow.TFShape[] shapes, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shapes">
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="component_types">
              Optional argument
              The type of each component in a value.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PriorityQueue'.
            </param>
        <summary>
              A queue that produces elements sorted by the first component value.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that the PriorityQueue requires the first component of any element
              to be a scalar int64, in addition to the other elements declared by
              component_types.  Therefore calls to Enqueue and EnqueueMany (resp. Dequeue
              and DequeueMany) on a PriorityQueue will all require (resp. output) one extra
              entry in their input (resp. output) lists.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriorityQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PriorityQueueV2 (TensorFlow.TFShape[] shapes, TensorFlow.TFDataType[] component_types = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PriorityQueueV2(class TensorFlow.TFShape[] shapes, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shapes">
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="component_types">
              Optional argument
              The type of each component in a value.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PriorityQueueV2'.
            </param>
        <summary>
              A queue that produces elements sorted by the first component value.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that the PriorityQueue requires the first component of any element
              to be a scalar int64, in addition to the other elements declared by
              component_types.  Therefore calls to Enqueue and EnqueueMany (resp. Dequeue
              and DequeueMany) on a PriorityQueue will all require (resp. output) one extra
              entry in their input (resp. output) lists.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Prod (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Prod(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce. Must be in the range
              <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Prod'.
            </param>
        <summary>
              Computes the product of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces <c>input</c> along the dimensions given in <c>axis</c>. Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>axis</c>. If <c>keep_dims</c> is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Qr">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Qr (TensorFlow.TFOutput input, Nullable&lt;bool&gt; full_matrices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Qr(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; full_matrices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="full_matrices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A tensor of shape <c>[..., M, N]</c> whose inner-most 2 dimensions
              form matrices of size <c>[M, N]</c>. Let <c>P</c> be the minimum of <c>M</c> and <c>N</c>.
            </param>
        <param name="full_matrices">
              Optional argument
              If true, compute full-sized <c>q</c> and <c>r</c>. If false
              (the default), compute only the leading <c>P</c> columns of <c>q</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Qr'.
            </param>
        <summary>
              Computes the QR decompositions of one or more matrices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              q: Orthonormal basis for range of <c>a</c>. If <c>full_matrices</c> is <c>False</c> then
              shape is <c>[..., M, P]</c>; if <c>full_matrices</c> is <c>True</c> then shape is
              <c>[..., M, M]</c>.
              r: Triangular factor. If <c>full_matrices</c> is <c>False</c> then shape is
              <c>[..., P, N]</c>. If <c>full_matrices</c> is <c>True</c> then shape is <c>[..., M, N]</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the QR decomposition of each inner matrix in <c>tensor</c> such that
              <c>tensor[..., :, :] = q[..., :, :] * r[..., :,:])</c><code>
              # a is a tensor.
              # q is a tensor of orthonormal matrices.
              # r is a tensor of upper triangular matrices.
              q, r = qr(a)
              q_full, r_full = qr(a, full_matrices=True)
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeAndDequantize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QuantizeAndDequantize (TensorFlow.TFOutput input, Nullable&lt;bool&gt; signed_input = null, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; range_given = null, Nullable&lt;float&gt; input_min = null, Nullable&lt;float&gt; input_max = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QuantizeAndDequantize(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; signed_input, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; range_given, valuetype System.Nullable`1&lt;float32&gt; input_min, valuetype System.Nullable`1&lt;float32&gt; input_max, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="signed_input" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="range_given" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="input_min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="input_max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="signed_input">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="range_given">
              Optional argument
            </param>
        <param name="input_min">
              Optional argument
            </param>
        <param name="input_max">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeAndDequantize'.
            </param>
        <summary>
              Use QuantizeAndDequantizeV2 instead.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeAndDequantizeV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QuantizeAndDequantizeV3 (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, TensorFlow.TFOutput num_bits, Nullable&lt;bool&gt; signed_input = null, Nullable&lt;bool&gt; range_given = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QuantizeAndDequantizeV3(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, valuetype TensorFlow.TFOutput num_bits, valuetype System.Nullable`1&lt;bool&gt; signed_input, valuetype System.Nullable`1&lt;bool&gt; range_given, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="TensorFlow.TFOutput" />
        <Parameter Name="signed_input" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="range_given" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_min">
        </param>
        <param name="input_max">
        </param>
        <param name="num_bits">
        </param>
        <param name="signed_input">
              Optional argument
            </param>
        <param name="range_given">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeAndDequantizeV3'.
            </param>
        <summary>
              Quantizes then dequantizes a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is almost identical to QuantizeAndDequantizeV2, except that num_bits is a
              tensor, so its value can change during training.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedAdd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedAdd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, TensorFlow.TFOutput min_x, TensorFlow.TFOutput max_x, TensorFlow.TFOutput min_y, TensorFlow.TFOutput max_y, Nullable&lt;TensorFlow.TFDataType&gt; Toutput = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedAdd(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput min_x, valuetype TensorFlow.TFOutput max_x, valuetype TensorFlow.TFOutput min_y, valuetype TensorFlow.TFOutput max_y, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Toutput, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="Toutput" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="min_x">
              The float value that the lowest quantized <c>x</c> value represents.
            </param>
        <param name="max_x">
              The float value that the highest quantized <c>x</c> value represents.
            </param>
        <param name="min_y">
              The float value that the lowest quantized <c>y</c> value represents.
            </param>
        <param name="max_y">
              The float value that the highest quantized <c>y</c> value represents.
            </param>
        <param name="Toutput">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedAdd'.
            </param>
        <summary>
              Returns x + y element-wise, working on quantized buffers.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              z:
              min_z: The float value that the lowest quantized output value represents.
              max_z: The float value that the highest quantized output value represents.
              
              *NOTE*: <c>QuantizedAdd</c> supports limited forms of broadcasting. More about
              broadcasting [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedAvgPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedAvgPool (TensorFlow.TFOutput input, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedAvgPool(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
              The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor.  The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedAvgPool'.
            </param>
        <summary>
              Produces the average pool of the input tensor for quantized types.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              min_output: The float value that the lowest quantized output value represents.
              max_output: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedBatchNormWithGlobalNormalization">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedBatchNormWithGlobalNormalization (TensorFlow.TFOutput t, TensorFlow.TFOutput t_min, TensorFlow.TFOutput t_max, TensorFlow.TFOutput m, TensorFlow.TFOutput m_min, TensorFlow.TFOutput m_max, TensorFlow.TFOutput v, TensorFlow.TFOutput v_min, TensorFlow.TFOutput v_max, TensorFlow.TFOutput beta, TensorFlow.TFOutput beta_min, TensorFlow.TFOutput beta_max, TensorFlow.TFOutput gamma, TensorFlow.TFOutput gamma_min, TensorFlow.TFOutput gamma_max, TensorFlow.TFDataType out_type, float variance_epsilon, bool scale_after_normalization, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedBatchNormWithGlobalNormalization(valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput t_min, valuetype TensorFlow.TFOutput t_max, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput m_min, valuetype TensorFlow.TFOutput m_max, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput v_min, valuetype TensorFlow.TFOutput v_max, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput beta_min, valuetype TensorFlow.TFOutput beta_max, valuetype TensorFlow.TFOutput gamma, valuetype TensorFlow.TFOutput gamma_min, valuetype TensorFlow.TFOutput gamma_max, valuetype TensorFlow.TFDataType out_type, float32 variance_epsilon, bool scale_after_normalization, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="t_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="t_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="m_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="m_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="v_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="v_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="variance_epsilon" Type="System.Single" />
        <Parameter Name="scale_after_normalization" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              A 4D input Tensor.
            </param>
        <param name="t_min">
              The value represented by the lowest quantized input.
            </param>
        <param name="t_max">
              The value represented by the highest quantized input.
            </param>
        <param name="m">
              A 1D mean Tensor with size matching the last dimension of t.
              This is the first output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="m_min">
              The value represented by the lowest quantized mean.
            </param>
        <param name="m_max">
              The value represented by the highest quantized mean.
            </param>
        <param name="v">
              A 1D variance Tensor with size matching the last dimension of t.
              This is the second output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="v_min">
              The value represented by the lowest quantized variance.
            </param>
        <param name="v_max">
              The value represented by the highest quantized variance.
            </param>
        <param name="beta">
              A 1D beta Tensor with size matching the last dimension of t.
              An offset to be added to the normalized tensor.
            </param>
        <param name="beta_min">
              The value represented by the lowest quantized offset.
            </param>
        <param name="beta_max">
              The value represented by the highest quantized offset.
            </param>
        <param name="gamma">
              A 1D gamma Tensor with size matching the last dimension of t.
              If "scale_after_normalization" is true, this tensor will be multiplied
              with the normalized tensor.
            </param>
        <param name="gamma_min">
              The value represented by the lowest quantized gamma.
            </param>
        <param name="gamma_max">
              The value represented by the highest quantized gamma.
            </param>
        <param name="out_type">
        </param>
        <param name="variance_epsilon">
              A small float number to avoid dividing by 0.
            </param>
        <param name="scale_after_normalization">
              A bool indicating whether the resulted tensor
              needs to be multiplied with gamma.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedBatchNormWithGlobalNormalization'.
            </param>
        <summary>
              Quantized Batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result:
              result_min:
              result_max:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This op is deprecated and will be removed in the future. Prefer
              <c>tf.nn.batch_normalization</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedBiasAdd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedBiasAdd (TensorFlow.TFOutput input, TensorFlow.TFOutput bias, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, TensorFlow.TFOutput min_bias, TensorFlow.TFOutput max_bias, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedBiasAdd(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput bias, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, valuetype TensorFlow.TFOutput min_bias, valuetype TensorFlow.TFOutput max_bias, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="bias">
              A 1D bias Tensor with size matching the last dimension of 'input'.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="min_bias">
              The float value that the lowest quantized bias value represents.
            </param>
        <param name="max_bias">
              The float value that the highest quantized bias value represents.
            </param>
        <param name="out_type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedBiasAdd'.
            </param>
        <summary>
              Adds Tensor 'bias' to Tensor 'input' for Quantized types.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              min_out: The float value that the lowest quantized output value represents.
              max_out: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Broadcasts the values of bias on dimensions 0..N-2 of 'input'.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedConcat">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedConcat (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] input_mins, TensorFlow.TFOutput[] input_maxes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedConcat(valuetype TensorFlow.TFOutput concat_dim, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput[] input_mins, valuetype TensorFlow.TFOutput[] input_maxes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concat_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="input_mins" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="input_maxes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="concat_dim">
              0-D.  The dimension along which to concatenate.  Must be in the
              range [0, rank(values)).
            </param>
        <param name="values">
              The <c>N</c> Tensors to concatenate. Their ranks and types must match,
              and their sizes must match in all dimensions except <c>concat_dim</c>.
            </param>
        <param name="input_mins">
              The minimum scalar values for each of the input tensors.
            </param>
        <param name="input_maxes">
              The maximum scalar values for each of the input tensors.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedConcat'.
            </param>
        <summary>
              Concatenates quantized tensors along one dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: A <c>Tensor</c> with the concatenation of values stacked along the
              <c>concat_dim</c> dimension.  This tensor's shape matches that of <c>values</c> except
              in <c>concat_dim</c> where it has the sum of the sizes.
              output_min: The float value that the minimum quantized output value represents.
              output_max: The float value that the maximum quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedConv2D">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, TensorFlow.TFOutput min_filter, TensorFlow.TFOutput max_filter, long[] strides, string padding, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, long[] dilations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedConv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, valuetype TensorFlow.TFOutput min_filter, valuetype TensorFlow.TFOutput max_filter, int64[] strides, string padding, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, int64[] dilations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="dilations" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="filter">
              filter's input_depth dimension must match input's depth dimensions.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="min_filter">
              The float value that the lowest quantized filter value represents.
            </param>
        <param name="max_filter">
              The float value that the highest quantized filter value represents.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="dilations">
              Optional argument
              1-D tensor of length 4.  The dilation factor for each dimension of
              <c>input</c>. If set to k &amp;gt; 1, there will be k-1 skipped cells between each
              filter element on that dimension. The dimension order is determined by the
              value of <c>data_format</c>, see above for details. Dilations in the batch and
              depth dimensions must be 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedConv2D'.
            </param>
        <summary>
              Computes a 2D convolution given quantized 4D input and filter tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              min_output: The float value that the lowest quantized output value represents.
              max_output: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The inputs are quantized tensors where the lowest value represents the real
              number of the associated minimum, and the highest represents the maximum.
              This means that you can only interpret the quantized output in the same way, by
              taking the returned minimum and maximum values into account.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedInstanceNorm">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedInstanceNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput x_min, TensorFlow.TFOutput x_max, Nullable&lt;bool&gt; output_range_given = null, Nullable&lt;float&gt; given_y_min = null, Nullable&lt;float&gt; given_y_max = null, Nullable&lt;float&gt; variance_epsilon = null, Nullable&lt;float&gt; min_separation = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedInstanceNorm(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput x_min, valuetype TensorFlow.TFOutput x_max, valuetype System.Nullable`1&lt;bool&gt; output_range_given, valuetype System.Nullable`1&lt;float32&gt; given_y_min, valuetype System.Nullable`1&lt;float32&gt; given_y_max, valuetype System.Nullable`1&lt;float32&gt; variance_epsilon, valuetype System.Nullable`1&lt;float32&gt; min_separation, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="x_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="x_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_range_given" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="given_y_min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="given_y_max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="variance_epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="min_separation" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A 4D input Tensor.
            </param>
        <param name="x_min">
              The value represented by the lowest quantized input.
            </param>
        <param name="x_max">
              The value represented by the highest quantized input.
            </param>
        <param name="output_range_given">
              Optional argument
              If True, <c>given_y_min</c> and <c>given_y_min</c>
              and <c>given_y_max</c> are used as the output range. Otherwise,
              the implementation computes the output range.
            </param>
        <param name="given_y_min">
              Optional argument
              Output in <c>y_min</c> if <c>output_range_given</c> is True.
            </param>
        <param name="given_y_max">
              Optional argument
              Output in <c>y_max</c> if <c>output_range_given</c> is True.
            </param>
        <param name="variance_epsilon">
              Optional argument
              A small float number to avoid dividing by 0.
            </param>
        <param name="min_separation">
              Optional argument
              Minimum value of <c>y_max - y_min</c></param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedInstanceNorm'.
            </param>
        <summary>
              Quantized Instance normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: A 4D Tensor.
              y_min: The value represented by the lowest quantized output.
              y_max: The value represented by the highest quantized output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedMatMul">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedMatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, TensorFlow.TFOutput min_a, TensorFlow.TFOutput max_a, TensorFlow.TFOutput min_b, TensorFlow.TFOutput max_b, Nullable&lt;TensorFlow.TFDataType&gt; Toutput = null, Nullable&lt;bool&gt; transpose_a = null, Nullable&lt;bool&gt; transpose_b = null, Nullable&lt;TensorFlow.TFDataType&gt; Tactivation = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedMatMul(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype TensorFlow.TFOutput min_a, valuetype TensorFlow.TFOutput max_a, valuetype TensorFlow.TFOutput min_b, valuetype TensorFlow.TFOutput max_b, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Toutput, valuetype System.Nullable`1&lt;bool&gt; transpose_a, valuetype System.Nullable`1&lt;bool&gt; transpose_b, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tactivation, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_a" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_a" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_b" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_b" Type="TensorFlow.TFOutput" />
        <Parameter Name="Toutput" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="transpose_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="transpose_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="Tactivation" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
              Must be a two-dimensional tensor.
            </param>
        <param name="b">
              Must be a two-dimensional tensor.
            </param>
        <param name="min_a">
              The float value that the lowest quantized <c>a</c> value represents.
            </param>
        <param name="max_a">
              The float value that the highest quantized <c>a</c> value represents.
            </param>
        <param name="min_b">
              The float value that the lowest quantized <c>b</c> value represents.
            </param>
        <param name="max_b">
              The float value that the highest quantized <c>b</c> value represents.
            </param>
        <param name="Toutput">
              Optional argument
            </param>
        <param name="transpose_a">
              Optional argument
              If true, <c>a</c> is transposed before multiplication.
            </param>
        <param name="transpose_b">
              Optional argument
              If true, <c>b</c> is transposed before multiplication.
            </param>
        <param name="Tactivation">
              Optional argument
              The type of output produced by activation function
              following this operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMatMul'.
            </param>
        <summary>
              Perform a quantized matrix multiplication of  <c>a</c> by the matrix <c>b</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              min_out: The float value that the lowest quantized output value represents.
              max_out: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The inputs must be two-dimensional matrices and the inner dimension of
              <c>a</c> (after being transposed if <c>transpose_a</c> is non-zero) must match the
              outer dimension of <c>b</c> (after being transposed if <c>transposed_b</c> is
              non-zero).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedMaxPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedMaxPool (TensorFlow.TFOutput input, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedMaxPool(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The 4D (batch x rows x cols x depth) Tensor to MaxReduce over.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
              The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor. The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMaxPool'.
            </param>
        <summary>
              Produces the max pool of the input tensor for quantized types.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              min_output: The float value that the lowest quantized output value represents.
              max_output: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedMul">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedMul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, TensorFlow.TFOutput min_x, TensorFlow.TFOutput max_x, TensorFlow.TFOutput min_y, TensorFlow.TFOutput max_y, Nullable&lt;TensorFlow.TFDataType&gt; Toutput = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedMul(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput min_x, valuetype TensorFlow.TFOutput max_x, valuetype TensorFlow.TFOutput min_y, valuetype TensorFlow.TFOutput max_y, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Toutput, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="Toutput" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="min_x">
              The float value that the lowest quantized <c>x</c> value represents.
            </param>
        <param name="max_x">
              The float value that the highest quantized <c>x</c> value represents.
            </param>
        <param name="min_y">
              The float value that the lowest quantized <c>y</c> value represents.
            </param>
        <param name="max_y">
              The float value that the highest quantized <c>y</c> value represents.
            </param>
        <param name="Toutput">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMul'.
            </param>
        <summary>
              Returns x * y element-wise, working on quantized buffers.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              z:
              min_z: The float value that the lowest quantized output value represents.
              max_z: The float value that the highest quantized output value represents.
              
              *NOTE*: <c>QuantizedMul</c> supports limited forms of broadcasting. More about
              broadcasting [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeDownAndShrinkRange">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizeDownAndShrinkRange (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizeDownAndShrinkRange(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_min">
              The float value that the minimum quantized input value represents.
            </param>
        <param name="input_max">
              The float value that the maximum quantized input value represents.
            </param>
        <param name="out_type">
              The type of the output. Should be a lower bit depth than Tinput.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeDownAndShrinkRange'.
            </param>
        <summary>
              Convert the quantized 'input' tensor into a lower-precision 'output', using the
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              output_min: The float value that the minimum quantized output value represents.
              output_max: The float value that the maximum quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              actual distribution of the values to maximize the usage of the lower bit depth
              and adjusting the output min and max ranges accordingly.
              
              [input_min, input_max] are scalar floats that specify the range for the float
              interpretation of the 'input' data. For example, if input_min is -1.0f and
              input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0
              value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f.
              
              This operator tries to squeeze as much precision as possible into an output with
              a lower bit depth by calculating the actual min and max values found in the
              data. For example, maybe that quint16 input has no values lower than 16,384 and
              none higher than 49,152. That means only half the range is actually needed, all
              the float interpretations are between -0.5f and 0.5f, so if we want to compress
              the data into a quint8 output, we can use that range rather than the theoretical
              -1.0f to 1.0f that is suggested by the input min and max.
              
              In practice, this is most useful for taking output from operations like
              QuantizedMatMul that can produce higher bit-depth outputs than their inputs and
              may have large potential output ranges, but in practice have a distribution of
              input values that only uses a small fraction of the possible range. By feeding
              that output into this operator, we can reduce it from 32 bits down to 8 with
              minimal loss of accuracy.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedRelu">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedRelu (TensorFlow.TFOutput features, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedRelu(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput min_features, valuetype TensorFlow.TFOutput max_features, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="min_features">
              The float value that the lowest quantized value represents.
            </param>
        <param name="max_features">
              The float value that the highest quantized value represents.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedRelu'.
            </param>
        <summary>
              Computes Quantized Rectified Linear: <c>max(features, 0)</c></summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              activations: Has the same output shape as "features".
              min_activations: The float value that the lowest quantized value represents.
              max_activations: The float value that the highest quantized value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedRelu6">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedRelu6 (TensorFlow.TFOutput features, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedRelu6(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput min_features, valuetype TensorFlow.TFOutput max_features, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="min_features">
              The float value that the lowest quantized value represents.
            </param>
        <param name="max_features">
              The float value that the highest quantized value represents.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedRelu6'.
            </param>
        <summary>
              Computes Quantized Rectified Linear 6: <c>min(max(features, 0), 6)</c></summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              activations: Has the same output shape as "features".
              min_activations: The float value that the lowest quantized value represents.
              max_activations: The float value that the highest quantized value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedReluX">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedReluX (TensorFlow.TFOutput features, TensorFlow.TFOutput max_value, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedReluX(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput max_value, valuetype TensorFlow.TFOutput min_features, valuetype TensorFlow.TFOutput max_features, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="max_value">
        </param>
        <param name="min_features">
              The float value that the lowest quantized value represents.
            </param>
        <param name="max_features">
              The float value that the highest quantized value represents.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedReluX'.
            </param>
        <summary>
              Computes Quantized Rectified Linear X: <c>min(max(features, 0), max_value)</c></summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              activations: Has the same output shape as "features".
              min_activations: The float value that the lowest quantized value represents.
              max_activations: The float value that the highest quantized value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedReshape">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedReshape (TensorFlow.TFOutput tensor, TensorFlow.TFOutput shape, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedReshape(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">To be added.</param>
        <param name="shape">To be added.</param>
        <param name="input_min">To be added.</param>
        <param name="input_max">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedResizeBilinear">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedResizeBilinear (TensorFlow.TFOutput images, TensorFlow.TFOutput size, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedResizeBilinear(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: <c>new_height, new_width</c>.  The
              new size for the images.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and output tensors are
              aligned, preserving the values at the corner pixels. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedResizeBilinear'.
            </param>
        <summary>
              Resize quantized <c>images</c> to <c>size</c> using quantized bilinear interpolation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              resized_images: 4-D with shape
              <c>[batch, new_height, new_width, channels]</c>.
              out_min:
              out_max:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Input images and output images must be quantized types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizeV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput min_range, TensorFlow.TFOutput max_range, TensorFlow.TFDataType T, string mode = null, string round_mode = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizeV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_range, valuetype TensorFlow.TFOutput max_range, valuetype TensorFlow.TFDataType T, string mode, string round_mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="T" Type="TensorFlow.TFDataType" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="round_mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="min_range">
              The minimum scalar value possibly produced for the input.
            </param>
        <param name="max_range">
              The maximum scalar value possibly produced for the input.
            </param>
        <param name="T">
        </param>
        <param name="mode">
              Optional argument
            </param>
        <param name="round_mode">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeV2'.
            </param>
        <summary>
              Quantize the 'input' tensor of type float to 'output' tensor of type 'T'.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: The quantized data produced from the float input.
              output_min: The actual minimum scalar value used for the output.
              output_max: The actual maximum scalar value used for the output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              [min_range, max_range] are scalar floats that specify the range for
              the 'input' data. The 'mode' attribute controls exactly which calculations are
              used to convert the float values to their quantized equivalents.  The
              'round_mode' attribute controls which rounding tie-breaking algorithm is used
              when rounding float values to their quantized equivalents.
              
              In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:
              
               <code>
              out[i] = (in[i] - min_range) * range(T) / (max_range - min_range)
              if T == qint8: out[i] -= (range(T) + 1) / 2.0
               </code>
              
              here <c>range(T) = numeric_limits&amp;lt;T&amp;gt;::max() - numeric_limits&amp;lt;T&amp;gt;::min()</c>
              
              *MIN_COMBINED Mode Example*
              
              Assume the input is type float and has a possible range of [0.0, 6.0] and the
              output type is quint8 ([0, 255]). The min_range and max_range values should be
              specified as 0.0 and 6.0. Quantizing from float to quint8 will multiply each
              value of the input by 255/6 and cast to quint8.
              
              If the output type was qint8 ([-128, 127]), the operation will additionally
              subtract each value by 128 prior to casting, so that the range of values aligns
              with the range of qint8.
              
              If the mode is 'MIN_FIRST', then this approach is used:
              
               <code>
              num_discrete_values = 1 &amp;lt;&amp;lt; (# of bits in T)
              range_adjust = num_discrete_values / (num_discrete_values - 1)
              range = (range_max - range_min) * range_adjust
              range_scale = num_discrete_values / range
              quantized = round(input * range_scale) - round(range_min * range_scale) +
              numeric_limits&amp;lt;T&amp;gt;::min()
              quantized = max(quantized, numeric_limits&amp;lt;T&amp;gt;::min())
              quantized = min(quantized, numeric_limits&amp;lt;T&amp;gt;::max())
               </code>
              
              The biggest difference between this and MIN_COMBINED is that the minimum range
              is rounded first, before it's subtracted from the rounded value. With
              MIN_COMBINED, a small bias is introduced where repeated iterations of quantizing
              and dequantizing will introduce a larger and larger error.
              
              *SCALED mode Example*
              
              <c>SCALED</c> mode matches the quantization approach used in
              <c>QuantizeAndDequantize{V2|V3}</c>.
              
              If the mode is <c>SCALED</c>, we do not use the full range of the output type,
              choosing to elide the lowest possible value for symmetry (e.g., output range is
              -127 to 127, not -128 to 127 for signed 8 bit quantization), so that 0.0 maps to
              0.
              
              We first find the range of values in our tensor. The
              range we use is always centered on 0, so we find m such that
              
               <code>
              m = max(abs(input_min), abs(input_max))
               </code>
              
              Our input tensor range is then <c>[-m, m]</c>.
              
              Next, we choose our fixed-point quantization buckets, <c>[min_fixed, max_fixed]</c>.
              If T is signed, this is
              
               <code>
              num_bits = sizeof(T) * 8
              [min_fixed, max_fixed] =
              [-(1 &amp;lt;&amp;lt; (num_bits - 1) - 1), (1 &amp;lt;&amp;lt; (num_bits - 1)) - 1]
               </code>
              
              Otherwise, if T is unsigned, the fixed-point range is
              
               <code>
              [min_fixed, max_fixed] = [0, (1 &amp;lt;&amp;lt; num_bits) - 1]
               </code>
              
              From this we compute our scaling factor, s:
              
               <code>
              s = (max_fixed - min_fixed) / (2 * m)
               </code>
              
              Now we can quantize the elements of our tensor:
              
               <code>
              result = round(input * s)
               </code>
              
              One thing to watch out for is that the operator may choose to adjust the
              requested minimum and maximum values slightly during the quantization process,
              so you should always use the output ports as the range for further calculations.
              For example, if the requested minimum and maximum values are close to equal,
              they will be separated by a small epsilon value to prevent ill-formed quantized
              buffers from being created. Otherwise, you can end up with buffers where all the
              quantized values map to the same float value, which causes problems for
              operations that have to perform further calculations on them.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueClose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueClose (TensorFlow.TFOutput handle, Nullable&lt;bool&gt; cancel_pending_enqueues = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueClose(valuetype TensorFlow.TFOutput handle, valuetype System.Nullable`1&lt;bool&gt; cancel_pending_enqueues, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="cancel_pending_enqueues" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="cancel_pending_enqueues">
              Optional argument
              If true, all pending enqueue requests that are
              blocked on the given queue will be canceled.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueClose'.
            </param>
        <summary>
              Closes the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation signals that no more elements will be enqueued in the
              given queue. Subsequent Enqueue(Many) operations will fail.
              Subsequent Dequeue(Many) operations will continue to succeed if
              sufficient elements remain in the queue. Subsequent Dequeue(Many)
              operations that would block will fail immediately.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueCloseV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueCloseV2 (TensorFlow.TFOutput handle, Nullable&lt;bool&gt; cancel_pending_enqueues = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueCloseV2(valuetype TensorFlow.TFOutput handle, valuetype System.Nullable`1&lt;bool&gt; cancel_pending_enqueues, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="cancel_pending_enqueues" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="cancel_pending_enqueues">
              Optional argument
              If true, all pending enqueue requests that are
              blocked on the given queue will be canceled.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueCloseV2'.
            </param>
        <summary>
              Closes the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation signals that no more elements will be enqueued in the
              given queue. Subsequent Enqueue(Many) operations will fail.
              Subsequent Dequeue(Many) operations will continue to succeed if
              sufficient elements remain in the queue. Subsequent Dequeue(Many)
              operations that would block will fail immediately.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeue (TensorFlow.TFOutput handle, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeue(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is empty, this operation will block for up to
              timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeue'.
            </param>
        <summary>
              Dequeues a tuple of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation has k outputs, where k is the number of components
              in the tuples stored in the given queue, and output i is the ith
              component of the dequeued tuple.
              
              N.B. If the queue is empty, this operation will block until an element
              has been dequeued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueMany">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueMany (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueMany(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput n, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="n" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="n">
              The number of tuples to dequeue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue has fewer than n elements, this operation
              will block for up to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueMany'.
            </param>
        <summary>
              Dequeues <c>n</c> tuples of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If the queue is closed and there are fewer than <c>n</c> elements, then an
              OutOfRange error is returned.
              
              This operation concatenates queue-element component tensors along the
              0th dimension to make a single component tensor.  All of the components
              in the dequeued tuple will have size <c>n</c> in the 0th dimension.
              
              This operation has <c>k</c> outputs, where <c>k</c> is the number of components in
              the tuples stored in the given queue, and output <c>i</c> is the ith
              component of the dequeued tuple.
              
              N.B. If the queue is empty, this operation will block until <c>n</c> elements
              have been dequeued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueManyV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueManyV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueManyV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput n, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="n" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="n">
              The number of tuples to dequeue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue has fewer than n elements, this operation
              will block for up to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueManyV2'.
            </param>
        <summary>
              Dequeues <c>n</c> tuples of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If the queue is closed and there are fewer than <c>n</c> elements, then an
              OutOfRange error is returned.
              
              This operation concatenates queue-element component tensors along the
              0th dimension to make a single component tensor.  All of the components
              in the dequeued tuple will have size <c>n</c> in the 0th dimension.
              
              This operation has <c>k</c> outputs, where <c>k</c> is the number of components in
              the tuples stored in the given queue, and output <c>i</c> is the ith
              component of the dequeued tuple.
              
              N.B. If the queue is empty, this operation will block until <c>n</c> elements
              have been dequeued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueUpTo">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueUpTo (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueUpTo(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput n, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="n" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="n">
              The number of tuples to dequeue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue has fewer than n elements, this operation
              will block for up to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueUpTo'.
            </param>
        <summary>
              Dequeues <c>n</c> tuples of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation is not supported by all queues.  If a queue does not support
              DequeueUpTo, then an Unimplemented error is returned.
              
              If the queue is closed and there are more than 0 but less than <c>n</c>
              elements remaining, then instead of returning an OutOfRange error like
              QueueDequeueMany, less than <c>n</c> elements are returned immediately.  If
              the queue is closed and there are 0 elements left in the queue, then
              an OutOfRange error is returned just like in QueueDequeueMany.
              Otherwise the behavior is identical to QueueDequeueMany:
              
              This operation concatenates queue-element component tensors along the
              0th dimension to make a single component tensor.  All of the components
              in the dequeued tuple will have size <c>n</c> in the 0th dimension.
              
              This operation has k outputs, where <c>k</c> is the number of components in
              the tuples stored in the given queue, and output <c>i</c> is the ith
              component of the dequeued tuple.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueUpToV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueUpToV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueUpToV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput n, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="n" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="n">
              The number of tuples to dequeue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue has fewer than n elements, this operation
              will block for up to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueUpToV2'.
            </param>
        <summary>
              Dequeues <c>n</c> tuples of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation is not supported by all queues.  If a queue does not support
              DequeueUpTo, then an Unimplemented error is returned.
              
              If the queue is closed and there are more than 0 but less than <c>n</c>
              elements remaining, then instead of returning an OutOfRange error like
              QueueDequeueMany, less than <c>n</c> elements are returned immediately.  If
              the queue is closed and there are 0 elements left in the queue, then
              an OutOfRange error is returned just like in QueueDequeueMany.
              Otherwise the behavior is identical to QueueDequeueMany:
              
              This operation concatenates queue-element component tensors along the
              0th dimension to make a single component tensor.  All of the components
              in the dequeued tuple will have size n in the 0th dimension.
              
              This operation has <c>k</c> outputs, where <c>k</c> is the number of components in
              the tuples stored in the given queue, and output <c>i</c> is the ith
              component of the dequeued tuple.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueV2 (TensorFlow.TFOutput handle, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is empty, this operation will block for up to
              timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueV2'.
            </param>
        <summary>
              Dequeues a tuple of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation has k outputs, where k is the number of components
              in the tuples stored in the given queue, and output i is the ith
              component of the dequeued tuple.
              
              N.B. If the queue is empty, this operation will block until an element
              has been dequeued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueEnqueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueEnqueue (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueEnqueue(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput[] components, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="components">
              One or more tensors from which the enqueued tensors should be taken.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is full, this operation will block for up to
              timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueue'.
            </param>
        <summary>
              Enqueues a tuple of one or more tensors in the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The components input has k elements, which correspond to the components of
              tuples stored in the given queue.
              
              N.B. If the queue is full, this operation will block until the given
              element has been enqueued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueEnqueueMany">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueEnqueueMany (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueEnqueueMany(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput[] components, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="components">
              One or more tensors from which the enqueued tensors should
              be taken.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is too full, this operation will block for up
              to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueueMany'.
            </param>
        <summary>
              Enqueues zero or more tuples of one or more tensors in the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation slices each component tensor along the 0th dimension to
              make multiple queue elements. All of the tuple components must have the
              same size in the 0th dimension.
              
              The components input has k elements, which correspond to the components of
              tuples stored in the given queue.
              
              N.B. If the queue is full, this operation will block until the given
              elements have been enqueued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueEnqueueManyV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueEnqueueManyV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueEnqueueManyV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput[] components, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="components">
              One or more tensors from which the enqueued tensors should
              be taken.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is too full, this operation will block for up
              to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueueManyV2'.
            </param>
        <summary>
              Enqueues zero or more tuples of one or more tensors in the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation slices each component tensor along the 0th dimension to
              make multiple queue elements. All of the tuple components must have the
              same size in the 0th dimension.
              
              The components input has k elements, which correspond to the components of
              tuples stored in the given queue.
              
              N.B. If the queue is full, this operation will block until the given
              elements have been enqueued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueEnqueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueEnqueueV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueEnqueueV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput[] components, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="components">
              One or more tensors from which the enqueued tensors should be taken.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is full, this operation will block for up to
              timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueueV2'.
            </param>
        <summary>
              Enqueues a tuple of one or more tensors in the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The components input has k elements, which correspond to the components of
              tuples stored in the given queue.
              
              N.B. If the queue is full, this operation will block until the given
              element has been enqueued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueIsClosed">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QueueIsClosed (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QueueIsClosed(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueIsClosed'.
            </param>
        <summary>
              Returns true if queue is closed.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns true if the queue is closed and false if the queue
              is open.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueIsClosedV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QueueIsClosedV2 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QueueIsClosedV2(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueIsClosedV2'.
            </param>
        <summary>
              Returns true if queue is closed.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns true if the queue is closed and false if the queue
              is open.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QueueSize (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QueueSize(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueSize'.
            </param>
        <summary>
              Computes the number of elements in the given queue.
            </summary>
        <returns>
              The number of elements in the given queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueSizeV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QueueSizeV2 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QueueSizeV2(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueSizeV2'.
            </param>
        <summary>
              Computes the number of elements in the given queue.
            </summary>
        <returns>
              The number of elements in the given queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomCrop">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomCrop (TensorFlow.TFOutput image, TensorFlow.TFOutput size, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomCrop(valuetype TensorFlow.TFOutput image, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              3-D of shape <c>[height, width, channels]</c>.
            </param>
        <param name="size">
              1-D of length 2 containing: <c>crop_height</c>, <c>crop_width</c>..
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomCrop'.
            </param>
        <summary>
              Randomly crop <c>image</c>.
            </summary>
        <returns>
              3-D of shape <c>[crop_height, crop_width, channels].</c>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>size</c> is a 1-D int64 tensor with 2 elements representing the crop height and
              width.  The values must be non negative.
              
              This Op picks a random location in <c>image</c> and crops a <c>height</c> by <c>width</c>
              rectangle from that location.  The random location is picked so the cropped
              area will fit inside the original image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomGamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomGamma (TensorFlow.TFOutput shape, TensorFlow.TFOutput alpha, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomGamma(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput alpha, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              1-D integer tensor. Shape of independent samples to draw from each
              distribution described by the shape parameters given in alpha.
            </param>
        <param name="alpha">
              A tensor in which each scalar is a "shape" parameter describing the
              associated gamma distribution.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomGamma'.
            </param>
        <summary>
              Outputs random values from the Gamma distribution(s) described by alpha.
            </summary>
        <returns>
              A tensor with shape <c>shape + shape(alpha)</c>. Each slice
              <c>[:, ..., :, i0, i1, ...iN]</c> contains the samples drawn for
              <c>alpha[i0, i1, ...iN]</c>. The dtype of the output matches the dtype of alpha.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op uses the algorithm by Marsaglia et al. to acquire samples via
              transformation-rejection from pairs of uniform and normal random variables.
              See http://dl.acm.org/citation.cfm?id=358414
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomGammaGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomGammaGrad (TensorFlow.TFOutput alpha, TensorFlow.TFOutput sample, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomGammaGrad(valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput sample, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="alpha">
        </param>
        <param name="sample">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomGammaGrad'.
            </param>
        <summary>
              Computes the derivative of a Gamma random sample w.r.t. <c>alpha</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomNormal (TensorFlow.TFShape shape, double mean = 0, double stddev = 1, Nullable&lt;int&gt; seed = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomNormal(class TensorFlow.TFShape shape, float64 mean, float64 stddev, valuetype System.Nullable`1&lt;int32&gt; seed, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stddev" Type="System.Double" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">Shape of the output tensor.</param>
        <param name="mean">The mean of the standard distribution.</param>
        <param name="stddev">The standard deviation of the normal distribution.</param>
        <param name="seed">Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Outputs random values from a normal distribution
            </summary>
        <returns>A tensor of the specified shape filled with random normal values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomPoisson">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomPoisson (TensorFlow.TFOutput shape, TensorFlow.TFOutput rate, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomPoisson(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput rate, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
        </param>
        <param name="rate">
        </param>
        <param name="seed">
              Optional argument
            </param>
        <param name="seed2">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomPoisson'.
            </param>
        <summary>
              Use RandomPoissonV2 instead.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomPoissonV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomPoissonV2 (TensorFlow.TFOutput shape, TensorFlow.TFOutput rate, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomPoissonV2(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput rate, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              1-D integer tensor. Shape of independent samples to draw from each
              distribution described by the shape parameters given in rate.
            </param>
        <param name="rate">
              A tensor in which each scalar is a "rate" parameter describing the
              associated poisson distribution.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="dtype">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomPoissonV2'.
            </param>
        <summary>
              Outputs random values from the Poisson distribution(s) described by rate.
            </summary>
        <returns>
              A tensor with shape <c>shape + shape(rate)</c>. Each slice
              <c>[:, ..., :, i0, i1, ...iN]</c> contains the samples drawn for
              <c>rate[i0, i1, ...iN]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op uses two algorithms, depending on rate. If rate &amp;gt;= 10, then
              the algorithm by Hormann is used to acquire samples via
              transformation-rejection.
              See http://www.sciencedirect.com/science/article/pii/0167668793909974.
              
              Otherwise, Knuth's algorithm is used to acquire samples via multiplying uniform
              random variables.
              See Donald E. Knuth (1969). Seminumerical Algorithms. The Art of Computer
              Programming, Volume 2. Addison Wesley
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomShuffle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomShuffle (TensorFlow.TFOutput value, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomShuffle(valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to be shuffled.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomShuffle'.
            </param>
        <summary>
              Randomly shuffles a tensor along its first dimension.
            </summary>
        <returns>
              A tensor of same shape and type as <c>value</c>, shuffled along its first
              dimension.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The tensor is shuffled along dimension 0, such that each <c>value[j]</c> is mapped
              to one and only one <c>output[i]</c>. For example, a mapping that might occur for a
              3x2 tensor is:
              
               <code>
              [[1, 2],       [[5, 6],
              [3, 4],  ==&amp;gt;   [1, 2],
              [5, 6]]        [3, 4]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomShuffleQueue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomShuffleQueue (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; min_after_dequeue = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomShuffleQueue(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; min_after_dequeue, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="min_after_dequeue" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="min_after_dequeue">
              Optional argument
              Dequeue will block unless there would be this
              many elements after the dequeue or the queue is closed. This
              ensures a minimum level of mixing of elements.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 is set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomShuffleQueue'.
            </param>
        <summary>
              A queue that randomizes the order of elements.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomShuffleQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomShuffleQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; min_after_dequeue = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomShuffleQueueV2(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; min_after_dequeue, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="min_after_dequeue" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="min_after_dequeue">
              Optional argument
              Dequeue will block unless there would be this
              many elements after the dequeue or the queue is closed. This
              ensures a minimum level of mixing of elements.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 is set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomShuffleQueueV2'.
            </param>
        <summary>
              A queue that randomizes the order of elements.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomStandardNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomStandardNormal (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomStandardNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="dtype">
              The type of the output.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomStandardNormal'.
            </param>
        <summary>
              Outputs random values from a normal distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with random normal values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values will have mean 0 and standard deviation 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomUniform">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomUniform (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomUniform(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="dtype">
              The type of the output.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomUniform'.
            </param>
        <summary>
              Outputs random values from a uniform distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with uniform random values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a uniform distribution in the range <c>[0, 1)</c>. The
              lower bound 0 is included in the range, while the upper bound 1 is excluded.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomUniform">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomUniform (TensorFlow.TFShape shape, double minval = 0, double maxval = 1, Nullable&lt;int&gt; seed = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomUniform(class TensorFlow.TFShape shape, float64 minval, float64 maxval, valuetype System.Nullable`1&lt;int32&gt; seed, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="minval" Type="System.Double" />
        <Parameter Name="maxval" Type="System.Double" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">Shape.</param>
        <param name="minval">Minval.</param>
        <param name="maxval">Maxval.</param>
        <param name="seed">Seed.</param>
        <param name="operName">Oper name.</param>
        <summary>
            Randoms the uniform.
            </summary>
        <returns>The uniform.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomUniformInt">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomUniformInt (TensorFlow.TFOutput shape, TensorFlow.TFOutput minval, TensorFlow.TFOutput maxval, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomUniformInt(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput minval, valuetype TensorFlow.TFOutput maxval, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="minval" Type="TensorFlow.TFOutput" />
        <Parameter Name="maxval" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="minval">
              0-D.  Inclusive lower bound on the generated integers.
            </param>
        <param name="maxval">
              0-D.  Exclusive upper bound on the generated integers.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomUniformInt'.
            </param>
        <summary>
              Outputs random integers from a uniform distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with uniform random integers.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values are uniform integers in the range <c>[minval, maxval)</c>.
              The lower bound <c>minval</c> is included in the range, while the upper bound
              <c>maxval</c> is excluded.
              
              The random integers are slightly biased unless <c>maxval - minval</c> is an exact
              power of two.  The bias is small for values of <c>maxval - minval</c> significantly
              smaller than the range of the output (either <c>2^32</c> or <c>2^64</c>).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Range (TensorFlow.TFOutput start, TensorFlow.TFOutput limit, TensorFlow.TFOutput delta, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Range(valuetype TensorFlow.TFOutput start, valuetype TensorFlow.TFOutput limit, valuetype TensorFlow.TFOutput delta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="limit" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">
              0-D (scalar). First entry in the sequence.
            </param>
        <param name="limit">
              0-D (scalar). Upper limit of sequence, exclusive.
            </param>
        <param name="delta">
              0-D (scalar). Optional. Default is 1. Number that increments <c>start</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Range'.
            </param>
        <summary>
              Creates a sequence of numbers.
            </summary>
        <returns>
              1-D.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation creates a sequence of numbers that begins at <c>start</c> and
              extends by increments of <c>delta</c> up to but not including <c>limit</c>.
              
              For example:
              
               <code>
              # 'start' is 3
              # 'limit' is 18
              # 'delta' is 3
              tf.range(start, limit, delta) ==&amp;gt; [3, 6, 9, 12, 15]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Range (TensorFlow.TFOutput start, Nullable&lt;TensorFlow.TFOutput&gt; limit = null, Nullable&lt;TensorFlow.TFOutput&gt; delta = null, Nullable&lt;TensorFlow.TFDataType&gt; dataType = null, string operName = &quot;range&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Range(valuetype TensorFlow.TFOutput start, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; limit, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; delta, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dataType, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="limit" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="delta" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="dataType" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">A 0 - D `Tensor` (scalar).Acts as first entry in the range if `limit` is not None; otherwise, acts as range limit and first entry defaults to 0.</param>
        <param name="limit">A 0 - D `Tensor` (scalar).Upper limit of sequence, exclusive. If None, defaults to the value of `start` while the first entry of the range defaults to 0.</param>
        <param name="delta">A 0 - D `Tensor` (scalar).Number that increments `start`. Defaults to 1.</param>
        <param name="dataType">The type of the elements of the resulting tensor.</param>
        <param name="operName">A name for the operation.Defaults to "range".</param>
        <summary>
            Creates a sequence of numbers.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Creates a sequence of numbers that begins at `start` and extends by increments of `delta` up to but not including 
            `limit`. The dtype of the resulting tensor is inferred from the inputs unless it is provided explicitly.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RangeDataset (TensorFlow.TFOutput start, TensorFlow.TFOutput stop, TensorFlow.TFOutput step, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RangeDataset(valuetype TensorFlow.TFOutput start, valuetype TensorFlow.TFOutput stop, valuetype TensorFlow.TFOutput step, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="stop" Type="TensorFlow.TFOutput" />
        <Parameter Name="step" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">
              corresponds to start in python's xrange().
            </param>
        <param name="stop">
              corresponds to stop in python's xrange().
            </param>
        <param name="step">
              corresponds to step in python's xrange().
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RangeDataset'.
            </param>
        <summary>
              Creates a dataset with a range of values. Corresponds to python's xrange.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Rank (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Rank(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Rank'.
            </param>
        <summary>
              Returns the rank of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns an integer representing the rank of <c>input</c>.
              
              For example:
              
               <code>
              # 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]
              # shape of tensor 't' is [2, 2, 3]
              rank(t) ==&amp;gt; 3
               </code>
              
              **Note**: The rank of a tensor is not the same as the rank of a matrix. The rank
              of a tensor is the number of indices required to uniquely select each element
              of the tensor. Rank is also known as "order", "degree", or "ndims."
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderNumRecordsProduced">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderNumRecordsProduced (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderNumRecordsProduced(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumRecordsProduced'.
            </param>
        <summary>
              Returns the number of records this Reader has produced.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is the same as the number of ReaderRead executions that have
              succeeded.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderNumRecordsProducedV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderNumRecordsProducedV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderNumRecordsProducedV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumRecordsProducedV2'.
            </param>
        <summary>
              Returns the number of records this Reader has produced.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is the same as the number of ReaderRead executions that have
              succeeded.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderNumWorkUnitsCompleted">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderNumWorkUnitsCompleted (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderNumWorkUnitsCompleted(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumWorkUnitsCompleted'.
            </param>
        <summary>
              Returns the number of work units this Reader has finished processing.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderNumWorkUnitsCompletedV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderNumWorkUnitsCompletedV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderNumWorkUnitsCompletedV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumWorkUnitsCompletedV2'.
            </param>
        <summary>
              Returns the number of work units this Reader has finished processing.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderRead">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ReaderRead (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ReaderRead(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput queue_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="queue_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="queue_handle">
              Handle to a Queue, with string work items.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderRead'.
            </param>
        <summary>
              Returns the next record (key, value pair) produced by a Reader.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              key: A scalar.
              value: A scalar.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Will dequeue from the input queue if necessary (e.g. when the
              Reader needs to start reading from a new file since it has finished
              with the previous file).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderReadUpTo">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ReaderReadUpTo (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, TensorFlow.TFOutput num_records, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ReaderReadUpTo(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput queue_handle, valuetype TensorFlow.TFOutput num_records, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="queue_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_records" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a <c>Reader</c>.
            </param>
        <param name="queue_handle">
              Handle to a <c>Queue</c>, with string work items.
            </param>
        <param name="num_records">
              number of records to read from <c>Reader</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReadUpTo'.
            </param>
        <summary>
              Returns up to <c>num_records</c> (key, value) pairs produced by a Reader.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              keys: A 1-D tensor.
              values: A 1-D tensor.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Will dequeue from the input queue if necessary (e.g. when the
              Reader needs to start reading from a new file since it has finished
              with the previous file).
              It may return less than <c>num_records</c> even before the last batch.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderReadUpToV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ReaderReadUpToV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, TensorFlow.TFOutput num_records, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ReaderReadUpToV2(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput queue_handle, valuetype TensorFlow.TFOutput num_records, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="queue_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_records" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a <c>Reader</c>.
            </param>
        <param name="queue_handle">
              Handle to a <c>Queue</c>, with string work items.
            </param>
        <param name="num_records">
              number of records to read from <c>Reader</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReadUpToV2'.
            </param>
        <summary>
              Returns up to <c>num_records</c> (key, value) pairs produced by a Reader.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              keys: A 1-D tensor.
              values: A 1-D tensor.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Will dequeue from the input queue if necessary (e.g. when the
              Reader needs to start reading from a new file since it has finished
              with the previous file).
              It may return less than <c>num_records</c> even before the last batch.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderReadV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ReaderReadV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ReaderReadV2(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput queue_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="queue_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="queue_handle">
              Handle to a Queue, with string work items.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReadV2'.
            </param>
        <summary>
              Returns the next record (key, value pair) produced by a Reader.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              key: A scalar.
              value: A scalar.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Will dequeue from the input queue if necessary (e.g. when the
              Reader needs to start reading from a new file since it has finished
              with the previous file).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderReset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ReaderReset (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ReaderReset(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReset'.
            </param>
        <summary>
              Restore a Reader to its initial clean state.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderResetV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ReaderResetV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ReaderResetV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderResetV2'.
            </param>
        <summary>
              Restore a Reader to its initial clean state.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderRestoreState">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ReaderRestoreState (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput state, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ReaderRestoreState(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput state, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="state" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="state">
              Result of a ReaderSerializeState of a Reader with type
              matching reader_handle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderRestoreState'.
            </param>
        <summary>
              Restore a reader to a previously saved state.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Not all Readers support being restored, so this can produce an
              Unimplemented error.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderRestoreStateV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ReaderRestoreStateV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput state, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ReaderRestoreStateV2(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput state, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="state" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="state">
              Result of a ReaderSerializeState of a Reader with type
              matching reader_handle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderRestoreStateV2'.
            </param>
        <summary>
              Restore a reader to a previously saved state.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Not all Readers support being restored, so this can produce an
              Unimplemented error.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderSerializeState">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderSerializeState (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderSerializeState(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderSerializeState'.
            </param>
        <summary>
              Produce a string tensor that encodes the state of a Reader.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Not all Readers support being serialized, so this can produce an
              Unimplemented error.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderSerializeStateV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderSerializeStateV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderSerializeStateV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderSerializeStateV2'.
            </param>
        <summary>
              Produce a string tensor that encodes the state of a Reader.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Not all Readers support being serialized, so this can produce an
              Unimplemented error.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFile">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReadFile (TensorFlow.TFOutput filename, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReadFile(valuetype TensorFlow.TFOutput filename, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReadFile'.
            </param>
        <summary>
              Reads and outputs the entire contents of the input filename.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReadVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReadVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="dtype">
              the dtype of the value.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReadVariableOp'.
            </param>
        <summary>
              Reads the value of a variable.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The tensor returned by this operation is immutable.
              
              The value returned by this operation is guaranteed to be influenced by all the
              writes on which this operation depends directly or indirectly, and to not be
              influenced by any of the writes which depend directly or indirectly on this
              operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Real (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Real(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Real'.
            </param>
        <summary>
              Returns the real part of a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>input</c> of complex numbers, this operation returns a tensor of
              type <c>float</c> that is the real part of each element in <c>input</c>. All elements in
              <c>input</c> must be complex numbers of the form \\(a + bj\\), where *a* is the real
              part returned by this operation and *b* is the imaginary part.
              
              For example:
              
               <code>
              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
              tf.real(input) ==&amp;gt; [-2.25, 3.25]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="RealDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RealDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RealDiv(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RealDiv'.
            </param>
        <summary>
              Returns x / y element-wise for real types.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If <c>x</c> and <c>y</c> are reals, this will return the floating-point division.
              
              *NOTE*: <c>Div</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reciprocal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Reciprocal (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Reciprocal(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Reciprocal'.
            </param>
        <summary>
              Computes the reciprocal of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = 1 / x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReciprocalGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReciprocalGrad (TensorFlow.TFOutput y, TensorFlow.TFOutput dy, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReciprocalGrad(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput dy, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="dy">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReciprocalGrad'.
            </param>
        <summary>
              Computes the gradient for the inverse of <c>x</c> wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, <c>grad = -dy * y*y</c>, where <c>y = 1/x</c>, and <c>dy</c>
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecordInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RecordInput (string file_pattern, Nullable&lt;long&gt; file_random_seed = null, Nullable&lt;float&gt; file_shuffle_shift_ratio = null, Nullable&lt;long&gt; file_buffer_size = null, Nullable&lt;long&gt; file_parallelism = null, Nullable&lt;long&gt; batch_size = null, string compression_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RecordInput(string file_pattern, valuetype System.Nullable`1&lt;int64&gt; file_random_seed, valuetype System.Nullable`1&lt;float32&gt; file_shuffle_shift_ratio, valuetype System.Nullable`1&lt;int64&gt; file_buffer_size, valuetype System.Nullable`1&lt;int64&gt; file_parallelism, valuetype System.Nullable`1&lt;int64&gt; batch_size, string compression_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file_pattern" Type="System.String" />
        <Parameter Name="file_random_seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="file_shuffle_shift_ratio" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="file_buffer_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="file_parallelism" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="batch_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="compression_type" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file_pattern">
              Glob pattern for the data files.
            </param>
        <param name="file_random_seed">
              Optional argument
              Random seeds used to produce randomized records.
            </param>
        <param name="file_shuffle_shift_ratio">
              Optional argument
              Shifts the list of files after the list is randomly
              shuffled.
            </param>
        <param name="file_buffer_size">
              Optional argument
              The randomization shuffling buffer.
            </param>
        <param name="file_parallelism">
              Optional argument
              How many sstables are opened and concurrently iterated over.
            </param>
        <param name="batch_size">
              Optional argument
              The batch size.
            </param>
        <param name="compression_type">
              Optional argument
              The type of compression for the file. Currently ZLIB and
              GZIP are supported. Defaults to none.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RecordInput'.
            </param>
        <summary>
              Emits randomized records.
            </summary>
        <returns>
              A tensor of shape [batch_size].
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecvTPUEmbeddingActivations">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] RecvTPUEmbeddingActivations (long num_outputs, string config, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] RecvTPUEmbeddingActivations(int64 num_outputs, string config, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_outputs" Type="System.Int64" />
        <Parameter Name="config" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_outputs">
              The number of output activation tensors, equal to the number of
              embedding tables in the model.
            </param>
        <param name="config">
              Serialized TPUEmbeddingConfiguration proto.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RecvTPUEmbeddingActivations'.
            </param>
        <summary>
              An op that receives embedding activations on the TPU.
            </summary>
        <returns>
              A TensorList of embedding activations containing one Tensor per
              embedding table in the model.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The TPU system performs the embedding lookups and aggregations specified by
              the arguments to TPUEmbeddingEnqueue(Integer/Sparse/SparseTensor)Batch. The
              results of these aggregations are visible to the Tensorflow Graph as the
              outputs of a RecvTPUEmbeddingActivations op. This op returns a list containing
              one Tensor of activations per table specified in the model. There can be at
              most one RecvTPUEmbeddingActivations op in the TPU graph.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceJoin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReduceJoin (TensorFlow.TFOutput inputs, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string separator = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReduceJoin(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string separator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              The input to be joined.  All reduced indices must have non-zero size.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce over.  Dimensions are reduced in the
              order specified.  Omitting <c>reduction_indices</c> is equivalent to passing
              <c>[n-1, n-2, ..., 0]</c>.  Negative indices from <c>-n</c> to <c>-1</c> are supported.
            </param>
        <param name="keep_dims">
              Optional argument
              If <c>True</c>, retain reduced dimensions with length <c>1</c>.
            </param>
        <param name="separator">
              Optional argument
              The separator to use when joining.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReduceJoin'.
            </param>
        <summary>
              Joins a string Tensor across the given dimensions.
            </summary>
        <returns>
              Has shape equal to that of the input with reduced dimensions removed or
              set to <c>1</c> depending on <c>keep_dims</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the string join across dimensions in the given string Tensor of shape
              <c>[\\(d_0, d_1, ..., d_{n-1}\\)]</c>.  Returns a new Tensor created by joining the input
              strings with the given separator (default: empty string).  Negative indices are
              counted backwards from the end, with <c>-1</c> being equivalent to <c>n - 1</c>.  If
              indices are not specified, joins across all dimensions beginning from <c>n - 1</c>
              through <c>0</c>.
              
              For example:
              
               <code>
              # tensor <c>a</c> is [["a", "b"], ["c", "d"]]
              tf.reduce_join(a, 0) ==&amp;gt; ["ac", "bd"]
              tf.reduce_join(a, 1) ==&amp;gt; ["ab", "cd"]
              tf.reduce_join(a, -2) = tf.reduce_join(a, 0) ==&amp;gt; ["ac", "bd"]
              tf.reduce_join(a, -1) = tf.reduce_join(a, 1) ==&amp;gt; ["ab", "cd"]
              tf.reduce_join(a, 0, keep_dims=True) ==&amp;gt; [["ac", "bd"]]
              tf.reduce_join(a, 1, keep_dims=True) ==&amp;gt; [["ab"], ["cd"]]
              tf.reduce_join(a, 0, separator=".") ==&amp;gt; ["a.c", "b.d"]
              tf.reduce_join(a, [0, 1]) ==&amp;gt; "acbd"
              tf.reduce_join(a, [1, 0]) ==&amp;gt; "abcd"
              tf.reduce_join(a, []) ==&amp;gt; [["a", "b"], ["c", "d"]]
              tf.reduce_join(a) = tf.reduce_join(a, [1, 0]) ==&amp;gt; "abcd"
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceMean">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReduceMean (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFOutput&gt; axis = null, Nullable&lt;bool&gt; keep_dims = false, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReduceMean(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; axis, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The tensor to reduce. Should have numeric type.</param>
        <param name="axis">The dimensions to reduce. If not set (the default), reduces all dimensions.</param>
        <param name="keep_dims">If set to <c>true</c> retains reduced dimensions with length 1.</param>
        <param name="operName">A name for the operation, optional.</param>
        <summary>
            Computes the mean of elements across dimensions of a tensor.
            </summary>
        <returns>The reduced tensor.</returns>
        <remarks>
          <para>
              Reduces input_tensor along the dimensions given in axis.
            Unless keep_dims is true, the rank of the tensor is reduced by 1 for each
            entry in axis. If keep_dims is true, the reduced dimensions
            are retained with length 1.</para>
          <para>
            If axis has no entries, all dimensions are reduced, and a
            tensor with a single element is returned.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceProd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReduceProd (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFOutput&gt; axis = null, Nullable&lt;bool&gt; keep_dims = false, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReduceProd(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; axis, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The tensor to reduce. Should have numeric type.</param>
        <param name="axis">The dimensions to reduce. If not se (the default), reduces all dimensions.</param>
        <param name="keep_dims">If set to <c>true</c> retains reduced dimensions with length 1.</param>
        <param name="operName">A name for the operation, optional.</param>
        <summary>
            Computes the product of elements across dimensions of a tensor.
            </summary>
        <returns>The reduced tensor.</returns>
        <remarks>
              Reduces input_tensor along the dimensions given in axis.
            Unless keep_dims is true, the rank of the tensor is reduced by 1 for each
            entry in axis. If keep_dims is true, the reduced dimensions
            are retained with length 1.
            
            If axis has no entries, all dimensions are reduced, and a
            tensor with a single element is returned.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReduceSum (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFOutput&gt; axis = null, Nullable&lt;bool&gt; keep_dims = false, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReduceSum(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; axis, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The tensor to reduce. Should have numeric type.</param>
        <param name="axis">The dimensions to reduce. If not se (the default), reduces all dimensions.</param>
        <param name="keep_dims">If set to <c>true</c> retains reduced dimensions with length 1.</param>
        <param name="operName">A name for the operation, optional.</param>
        <summary>
            Computes the sum of elements across dimensions of a tensor.
            </summary>
        <returns>The reduced tensor.</returns>
        <remarks>
              Reduces input_tensor along the dimensions given in axis.
            Unless keep_dims is true, the rank of the tensor is reduced by 1 for each
            entry in axis. If keep_dims is true, the reduced dimensions
            are retained with length 1.
            
            If axis has no entries, all dimensions are reduced, and a
            tensor with a single element is returned.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefEnter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RefEnter (TensorFlow.TFOutput data, string frame_name, Nullable&lt;bool&gt; is_constant = null, Nullable&lt;long&gt; parallel_iterations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RefEnter(valuetype TensorFlow.TFOutput data, string frame_name, valuetype System.Nullable`1&lt;bool&gt; is_constant, valuetype System.Nullable`1&lt;int64&gt; parallel_iterations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="frame_name" Type="System.String" />
        <Parameter Name="is_constant" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="parallel_iterations" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the child frame.
            </param>
        <param name="frame_name">
              The name of the child frame.
            </param>
        <param name="is_constant">
              Optional argument
              If true, the output is constant within the child frame.
            </param>
        <param name="parallel_iterations">
              Optional argument
              The number of iterations allowed to run in parallel.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RefEnter'.
            </param>
        <summary>
              Creates or finds a child frame, and makes <c>data</c> available to the child frame.
            </summary>
        <returns>
              The same tensor as <c>data</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The unique <c>frame_name</c> is used by the <c>Executor</c> to identify frames. If
              <c>is_constant</c> is true, <c>output</c> is a constant in the child frame; otherwise
              it may be changed in the child frame. At most <c>parallel_iterations</c> iterations
              are run in parallel in the child frame.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefExit">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RefExit (TensorFlow.TFOutput data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RefExit(valuetype TensorFlow.TFOutput data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the parent frame.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RefExit'.
            </param>
        <summary>
              Exits the current frame to its parent frame.
            </summary>
        <returns>
              The same tensor as <c>data</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Exit makes its input <c>data</c> available to the parent frame.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefIdentity">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RefIdentity (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RefIdentity(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RefIdentity'.
            </param>
        <summary>
              Return the same ref tensor as the input ref tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefMerge">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RefMerge (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RefMerge(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              The input tensors, exactly one of which will become available.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RefMerge'.
            </param>
        <summary>
              Forwards the value of an available tensor from <c>inputs</c> to <c>output</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: Will be set to the available input tensor.
              value_index: The index of the chosen input tensor in <c>inputs</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
          <c>Merge</c> waits for at least one of the tensors in <c>inputs</c> to become available.
              It is usually combined with <c>Switch</c> to implement branching.
              
              <c>Merge</c> forwards the first tensor for become available to <c>output</c>, and sets
              <c>value_index</c> to its index in <c>inputs</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefNextIteration">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RefNextIteration (TensorFlow.TFOutput data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RefNextIteration(valuetype TensorFlow.TFOutput data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the next iteration.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RefNextIteration'.
            </param>
        <summary>
              Makes its input available to the next iteration.
            </summary>
        <returns>
              The same tensor as <c>data</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefSelect">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RefSelect (TensorFlow.TFOutput index, TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RefSelect(valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">
              A scalar that determines the input that gets selected.
            </param>
        <param name="inputs">
              A list of ref tensors, one of which will be forwarded to <c>output</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RefSelect'.
            </param>
        <summary>
              Forwards the <c>index</c>th element of <c>inputs</c> to <c>output</c>.
            </summary>
        <returns>
              The forwarded tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefSwitch">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RefSwitch (TensorFlow.TFOutput data, TensorFlow.TFOutput pred, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RefSwitch(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput pred, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="pred" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The ref tensor to be forwarded to the appropriate output.
            </param>
        <param name="pred">
              A scalar that specifies which output port will receive data.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RefSwitch'.
            </param>
        <summary>
              Forwards the ref tensor <c>data</c> to the output port determined by <c>pred</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_false: If <c>pred</c> is false, data will be forwarded to this output.
              output_true: If <c>pred</c> is true, data will be forwarded to this output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If <c>pred</c> is true, the <c>data</c> input is forwarded to <c>output_true</c>. Otherwise,
              the data goes to <c>output_false</c>.
              
              See also <c>Switch</c> and <c>Merge</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegexFullMatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RegexFullMatch (TensorFlow.TFOutput input, TensorFlow.TFOutput pattern, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RegexFullMatch(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput pattern, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A string tensor of the text to be processed.
            </param>
        <param name="pattern">
              A scalar string tensor containing the regular expression to match the input.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RegexFullMatch'.
            </param>
        <summary>
              Check if the input matches the regex pattern.
            </summary>
        <returns>
              A bool tensor with the same shape as <c>input</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a string tensor of any shape. The pattern is a scalar
              string tensor which is applied to every element of the input tensor.
              The boolean values (True or False) of the output tensor indicate
              if the input matches the regex pattern provided.
              
              The pattern follows the re2 syntax (https://github.com/google/re2/wiki/Syntax)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegexReplace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RegexReplace (TensorFlow.TFOutput input, TensorFlow.TFOutput pattern, TensorFlow.TFOutput rewrite, Nullable&lt;bool&gt; replace_global = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RegexReplace(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput pattern, valuetype TensorFlow.TFOutput rewrite, valuetype System.Nullable`1&lt;bool&gt; replace_global, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="rewrite" Type="TensorFlow.TFOutput" />
        <Parameter Name="replace_global" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The text to be processed.
            </param>
        <param name="pattern">
              The regular expression to match the input.
            </param>
        <param name="rewrite">
              The rewrite to be applied to the matched expresion.
            </param>
        <param name="replace_global">
              Optional argument
              If True, the replacement is global, otherwise the replacement
              is done only on the first match.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RegexReplace'.
            </param>
        <summary>
              Replaces the match of pattern in input with rewrite.
            </summary>
        <returns>
              The text after applying pattern and rewrite.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It follows the re2 syntax (https://github.com/google/re2/wiki/Syntax)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Relu">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Relu (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Relu(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu'.
            </param>
        <summary>
              Computes rectified linear: <c>max(features, 0)</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relu6">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Relu6 (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Relu6(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu6'.
            </param>
        <summary>
              Computes rectified linear 6: <c>min(max(features, 0), 6)</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relu6Grad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Relu6Grad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Relu6Grad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding Relu6 operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding Relu6 operation, or
              its output; using either one produces the same result.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu6Grad'.
            </param>
        <summary>
              Computes rectified linear 6 gradients for a Relu6 operation.
            </summary>
        <returns>
              The gradients:
              <c>gradients * (features &amp;gt; 0) * (features &amp;lt; 6)</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReluGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReluGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReluGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding Relu operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding Relu operation, OR
              the outputs of that operation (both work equivalently).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReluGrad'.
            </param>
        <summary>
              Computes rectified linear gradients for a Relu operation.
            </summary>
        <returns>
          <c>gradients * (features &amp;gt; 0)</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteFusedGraphExecute">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] RemoteFusedGraphExecute (TensorFlow.TFOutput[] inputs, TensorFlow.TFDataType[] Toutputs, string serialized_remote_fused_graph_execute_info, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] RemoteFusedGraphExecute(valuetype TensorFlow.TFOutput[] inputs, valuetype TensorFlow.TFDataType[] Toutputs, string serialized_remote_fused_graph_execute_info, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="Toutputs" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="serialized_remote_fused_graph_execute_info" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              Arbitrary number of tensors with arbitrary data types
            </param>
        <param name="Toutputs">
        </param>
        <param name="serialized_remote_fused_graph_execute_info">
              Serialized protocol buffer
              of RemoteFusedGraphExecuteInfo which contains graph specifications.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RemoteFusedGraphExecute'.
            </param>
        <summary>
              Execute a sub graph on a remote processor.
            </summary>
        <returns>
              Arbitrary number of tensors with arbitrary data types
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The graph specifications(such as graph itself, input tensors and output names)
              are stored as a serialized protocol buffer of RemoteFusedGraphExecuteInfo
              as serialized_remote_fused_graph_execute_info.
              The specifications will be passed to a dedicated registered
              remote fused graph executor.  The executor will send the graph specifications
              to a remote processor and execute that graph.  The execution results
              will be passed to consumer nodes as outputs of this node.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RepeatDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RepeatDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput count, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="count" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="count">
              A scalar representing the number of times that <c>input_dataset</c> should
              be repeated. A value of <c>-1</c> indicates that it should be repeated infinitely.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RepeatDataset'.
            </param>
        <summary>
              Creates a dataset that emits the outputs of <c>input_dataset</c><c>count</c> times.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequantizationRange">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RequantizationRange (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RequantizationRange(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_min">
              The float value that the minimum quantized input value represents.
            </param>
        <param name="input_max">
              The float value that the maximum quantized input value represents.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RequantizationRange'.
            </param>
        <summary>
              Given a quantized tensor described by (input, input_min, input_max), outputs a
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_min: The computed min output.
              output_max: the computed max output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              range that covers the actual values present in that tensor.  This op is
              typically used to produce the requested_output_min and requested_output_max for
              Requantize.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Requantize">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Requantize (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, TensorFlow.TFOutput requested_output_min, TensorFlow.TFOutput requested_output_max, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Requantize(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, valuetype TensorFlow.TFOutput requested_output_min, valuetype TensorFlow.TFOutput requested_output_max, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="requested_output_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="requested_output_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_min">
              The float value that the minimum quantized input value represents.
            </param>
        <param name="input_max">
              The float value that the maximum quantized input value represents.
            </param>
        <param name="requested_output_min">
              The float value that the minimum quantized output value represents.
            </param>
        <param name="requested_output_max">
              The float value that the maximum quantized output value represents.
            </param>
        <param name="out_type">
              The type of the output. Should be a lower bit depth than Tinput.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Requantize'.
            </param>
        <summary>
              Convert the quantized 'input' tensor into a lower-precision 'output', using the
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output:
              output_min: The requested_output_min value is copied into this output.
              output_max: The requested_output_max value is copied into this output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              output range specified with 'requested_output_min' and 'requested_output_max'.
              
              [input_min, input_max] are scalar floats that specify the range for the float
              interpretation of the 'input' data. For example, if input_min is -1.0f and
              input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0
              value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reshape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Reshape (TensorFlow.TFOutput tensor, TensorFlow.TFOutput shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Reshape(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
        </param>
        <param name="shape">
              Defines the shape of the output tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Reshape'.
            </param>
        <summary>
              Reshapes a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given <c>tensor</c>, this operation returns a tensor that has the same values
              as <c>tensor</c> with shape <c>shape</c>.
              
              If one component of <c>shape</c> is the special value -1, the size of that dimension
              is computed so that the total size remains constant.  In particular, a <c>shape</c>
              of <c>[-1]</c> flattens into 1-D.  At most one component of <c>shape</c> can be -1.
              
              If <c>shape</c> is 1-D or higher, then the operation returns a tensor with shape
              <c>shape</c> filled with the values of <c>tensor</c>. In this case, the number of elements
              implied by <c>shape</c> must be the same as the number of elements in <c>tensor</c>.
              
              For example:
              
               <code>
              # tensor 't' is [1, 2, 3, 4, 5, 6, 7, 8, 9]
              # tensor 't' has shape [9]
              reshape(t, [3, 3]) ==&amp;gt; [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]]
              
              # tensor 't' is [[[1, 1], [2, 2]],
              #                [[3, 3], [4, 4]]]
              # tensor 't' has shape [2, 2, 2]
              reshape(t, [2, 4]) ==&amp;gt; [[1, 1, 2, 2],
              [3, 3, 4, 4]]
              
              # tensor 't' is [[[1, 1, 1],
              #                 [2, 2, 2]],
              #                [[3, 3, 3],
              #                 [4, 4, 4]],
              #                [[5, 5, 5],
              #                 [6, 6, 6]]]
              # tensor 't' has shape [3, 2, 3]
              # pass '[-1]' to flatten 't'
              reshape(t, [-1]) ==&amp;gt; [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6]
              
              # -1 can also be used to infer the shape
              
              # -1 is inferred to be 9:
              reshape(t, [2, -1]) ==&amp;gt; [[1, 1, 1, 2, 2, 2, 3, 3, 3],
              [4, 4, 4, 5, 5, 5, 6, 6, 6]]
              # -1 is inferred to be 2:
              reshape(t, [-1, 9]) ==&amp;gt; [[1, 1, 1, 2, 2, 2, 3, 3, 3],
              [4, 4, 4, 5, 5, 5, 6, 6, 6]]
              # -1 is inferred to be 3:
              reshape(t, [ 2, -1, 3]) ==&amp;gt; [[[1, 1, 1],
              [2, 2, 2],
              [3, 3, 3]],
              [[4, 4, 4],
              [5, 5, 5],
              [6, 6, 6]]]
              
              # tensor 't' is [7]
              # shape <c>[]</c> reshapes to a scalar
              reshape(t, []) ==&amp;gt; 7
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeArea">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeArea (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeArea(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: <c>new_height, new_width</c>.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and output tensors are
              aligned, preserving the values at the corner pixels. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeArea'.
            </param>
        <summary>
              Resize <c>images</c> to <c>size</c> using area interpolation.
            </summary>
        <returns>
              4-D with shape
              <c>[batch, new_height, new_width, channels]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input images can be of different types but output images are always float.
              
              The range of pixel values for the output image might be slightly different
              from the range for the input image because of limited numerical precision.
              To guarantee an output range, for example <c>[0.0, 1.0]</c>, apply
              <c>tf.clip_by_value</c> to the output.
              
              Each output pixel is computed by first transforming the pixel's footprint into
              the input tensor and then averaging the pixels that intersect the footprint. An
              input pixel's contribution to the average is weighted by the fraction of its
              area that intersects the footprint.  This is the same as OpenCV's INTER_AREA.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeBicubic">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeBicubic (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeBicubic(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: <c>new_height, new_width</c>.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and output tensors are
              aligned, preserving the values at the corner pixels. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBicubic'.
            </param>
        <summary>
              Resize <c>images</c> to <c>size</c> using bicubic interpolation.
            </summary>
        <returns>
              4-D with shape
              <c>[batch, new_height, new_width, channels]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input images can be of different types but output images are always float.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeBicubicGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeBicubicGrad (TensorFlow.TFOutput grads, TensorFlow.TFOutput original_image, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeBicubicGrad(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput original_image, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="original_image" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="original_image">
              4-D with shape <c>[batch, orig_height, orig_width, channels]</c>,
              The image tensor that was resized.
            </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and grad tensors are
              aligned. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBicubicGrad'.
            </param>
        <summary>
              Computes the gradient of bicubic interpolation.
            </summary>
        <returns>
              4-D with shape <c>[batch, orig_height, orig_width, channels]</c>.
              Gradients with respect to the input image. Input image must have been
              float or double.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeBilinear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeBilinear (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeBilinear(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: <c>new_height, new_width</c>.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and output tensors are
              aligned, preserving the values at the corner pixels. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBilinear'.
            </param>
        <summary>
              Resize <c>images</c> to <c>size</c> using bilinear interpolation.
            </summary>
        <returns>
              4-D with shape
              <c>[batch, new_height, new_width, channels]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input images can be of different types but output images are always float.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeBilinearGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeBilinearGrad (TensorFlow.TFOutput grads, TensorFlow.TFOutput original_image, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeBilinearGrad(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput original_image, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="original_image" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="original_image">
              4-D with shape <c>[batch, orig_height, orig_width, channels]</c>,
              The image tensor that was resized.
            </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and grad tensors are
              aligned. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBilinearGrad'.
            </param>
        <summary>
              Computes the gradient of bilinear interpolation.
            </summary>
        <returns>
              4-D with shape <c>[batch, orig_height, orig_width, channels]</c>.
              Gradients with respect to the input image. Input image must have been
              float or double.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeNearestNeighbor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeNearestNeighbor (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeNearestNeighbor(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: <c>new_height, new_width</c>.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and output tensors are
              aligned, preserving the values at the corner pixels. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeNearestNeighbor'.
            </param>
        <summary>
              Resize <c>images</c> to <c>size</c> using nearest neighbor interpolation.
            </summary>
        <returns>
              4-D with shape
              <c>[batch, new_height, new_width, channels]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeNearestNeighborGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeNearestNeighborGrad (TensorFlow.TFOutput grads, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeNearestNeighborGrad(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">
              4-D with shape <c>[batch, height, width, channels]</c>.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: <c>orig_height, orig_width</c>. The
              original input size.
            </param>
        <param name="align_corners">
              Optional argument
              If true, the centers of the 4 corner pixels of the input and grad tensors are
              aligned. Defaults to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeNearestNeighborGrad'.
            </param>
        <summary>
              Computes the gradient of nearest neighbor interpolation.
            </summary>
        <returns>
              4-D with shape <c>[batch, orig_height, orig_width, channels]</c>. Gradients
              with respect to the input image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdadelta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdadelta(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput accum_update, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum_update" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="accum_update">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Constant factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var, accum and update_accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdadelta'.
            </param>
        <summary>
              Update '*var' according to the adadelta scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum = rho() * accum + (1 - rho()) * grad.square();
              update = (update_accum + epsilon).sqrt() * (accum + epsilon()).rsqrt() * grad;
              update_accum = rho() * update_accum + (1 - rho()) * update.square();
              var -= update;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; update_slots = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; update_slots, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="update_slots" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="update_slots">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdagrad'.
            </param>
        <summary>
              Update '*var' according to the adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum += grad * grad
              var -= lr * grad * (1 / sqrt(accum))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdagradDA">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdagradDA(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput gradient_accumulator, valuetype TensorFlow.TFOutput gradient_squared_accumulator, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput global_step, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_squared_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="global_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="gradient_accumulator">
              Should be from a Variable().
            </param>
        <param name="gradient_squared_accumulator">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="global_step">
              Training step number. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdagradDA'.
            </param>
        <summary>
              Update '*var' according to the proximal adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdam">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdam (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta1_power, TensorFlow.TFOutput beta2_power, TensorFlow.TFOutput lr, TensorFlow.TFOutput beta1, TensorFlow.TFOutput beta2, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdam(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput beta1_power, valuetype TensorFlow.TFOutput beta2_power, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput beta1, valuetype TensorFlow.TFOutput beta2, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="v">
              Should be from a Variable().
            </param>
        <param name="beta1_power">
              Must be a scalar.
            </param>
        <param name="beta2_power">
              Must be a scalar.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="beta1">
              Momentum factor. Must be a scalar.
            </param>
        <param name="beta2">
              Momentum factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, m, and v tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If <c>True</c>, uses the nesterov update.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdam'.
            </param>
        <summary>
              Update '*var' according to the Adam algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              $$lr_t := \text{learning\_rate} * \sqrt{1 - beta_2^t} / (1 - beta_1^t)$$
              $$m_t := beta_1 * m_{t-1} + (1 - beta_1) * g$$
              $$v_t := beta_2 * v_{t-1} + (1 - beta_2) * g * g$$
              $$variable := variable - lr_t * m_t / (\sqrt{v_t} + \epsilon)$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdaMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdaMax (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta1_power, TensorFlow.TFOutput lr, TensorFlow.TFOutput beta1, TensorFlow.TFOutput beta2, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdaMax(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput beta1_power, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput beta1, valuetype TensorFlow.TFOutput beta2, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="v">
              Should be from a Variable().
            </param>
        <param name="beta1_power">
              Must be a scalar.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="beta1">
              Momentum factor. Must be a scalar.
            </param>
        <param name="beta2">
              Momentum factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, m, and v tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdaMax'.
            </param>
        <summary>
              Update '*var' according to the AdaMax algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              m_t &amp;lt;- beta1 * m_{t-1} + (1 - beta1) * g
              v_t &amp;lt;- max(beta2 * v_{t-1}, abs(g))
              variable &amp;lt;- variable - learning_rate / (1 - beta1^t) * m_t / (v_t + epsilon)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAddSign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAddSign (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput lr, TensorFlow.TFOutput alpha, TensorFlow.TFOutput sign_decay, TensorFlow.TFOutput beta, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAddSign(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput sign_decay, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="sign_decay" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="alpha">
              Must be a scalar.
            </param>
        <param name="sign_decay">
              Must be a scalar.
            </param>
        <param name="beta">
              Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and m tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAddSign'.
            </param>
        <summary>
              Update '*var' according to the AddSign update.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              m_t &amp;lt;- beta1 * m_{t-1} + (1 - beta1) * g
              update &amp;lt;- (alpha + sign_decay * sign(g) *sign(m)) * g
              variable &amp;lt;- variable - lr_t * update
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyCenteredRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyCenteredRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput mg, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="mg" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="mg">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, mg, ms, and mom tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyCenteredRMSProp'.
            </param>
        <summary>
              Update '*var' according to the centered RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The centered RMSProp algorithm uses an estimate of the centered second moment
              (i.e., the variance) for normalization, as opposed to regular RMSProp, which
              uses the (uncentered) second moment. This often helps with training, but is
              slightly more expensive in terms of computation and memory.
              
              Note that in dense implementation of this algorithm, mg, ms, and mom will
              update even if the grad is zero, but in this sparse implementation, mg, ms,
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              mean_grad = decay * mean_grad + (1-decay) * gradient
              
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)
              
              mg &amp;lt;- rho * mg_{t-1} + (1-rho) * grad
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms - mg * mg + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyFtrl">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyFtrl(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regulariation. Must be a scalar.
            </param>
        <param name="l2">
              L2 regulariation. Must be a scalar.
            </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyFtrl'.
            </param>
        <summary>
              Update '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum_new = accum + grad * grad
              linear += grad - (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyFtrlV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyFtrlV2 (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput l2_shrinkage, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyFtrlV2(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput l2_shrinkage, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2_shrinkage" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regulariation. Must be a scalar.
            </param>
        <param name="l2">
              L2 shrinkage regulariation. Must be a scalar.
            </param>
        <param name="l2_shrinkage">
        </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyFtrlV2'.
            </param>
        <summary>
              Update '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              grad_with_shrinkage = grad + 2 * l2_shrinkage * var
              accum_new = accum + grad_with_shrinkage * grad_with_shrinkage
              linear += grad_with_shrinkage +
              (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput delta, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput delta, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="delta">
              The change.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyGradientDescent'.
            </param>
        <summary>
              Update '*var' by subtracting 'alpha' * 'delta' from it.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyMomentum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput momentum, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyMomentum(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput momentum, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="momentum">
              Momentum. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If <c>True</c>, the tensor passed to compute grad will be
              var - lr * momentum * accum, so in the end, the var you get is actually
              var - lr * momentum * accum.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyMomentum'.
            </param>
        <summary>
              Update '*var' according to the momentum scheme. Set use_nesterov = True if you
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              want to use Nesterov momentum.
              
              accum = accum * momentum + grad
              var -= lr * accum
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyPowerSign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyPowerSign (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput lr, TensorFlow.TFOutput logbase, TensorFlow.TFOutput sign_decay, TensorFlow.TFOutput beta, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyPowerSign(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput logbase, valuetype TensorFlow.TFOutput sign_decay, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="logbase" Type="TensorFlow.TFOutput" />
        <Parameter Name="sign_decay" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="logbase">
              Must be a scalar.
            </param>
        <param name="sign_decay">
              Must be a scalar.
            </param>
        <param name="beta">
              Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and m tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyPowerSign'.
            </param>
        <summary>
              Update '*var' according to the AddSign update.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              m_t &amp;lt;- beta1 * m_{t-1} + (1 - beta1) * g
              update &amp;lt;- exp(logbase * sign_decay * sign(g) * sign(m_t)) * g
              variable &amp;lt;- variable - lr_t * update
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyProximalAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyProximalAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyProximalAdagrad'.
            </param>
        <summary>
              Update '*var' and '*accum' according to FOBOS with Adagrad learning rate.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum += grad * grad
              prox_v = var - lr * grad * (1 / sqrt(accum))
              var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyProximalGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput delta, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyProximalGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput delta, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="delta">
              The change.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyProximalGradientDescent'.
            </param>
        <summary>
              Update '*var' as FOBOS algorithm with fixed learning rate.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              prox_v = var - alpha * delta
              var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, ms, and mom tensors is protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyRMSProp'.
            </param>
        <summary>
              Update '*var' according to the RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Note that in dense implementation of this algorithm, ms and mom will
              update even if the grad is zero, but in this sparse implementation, ms
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)
              
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceCountUpTo">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResourceCountUpTo (TensorFlow.TFOutput resource, long limit, TensorFlow.TFDataType T, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResourceCountUpTo(valuetype TensorFlow.TFOutput resource, int64 limit, valuetype TensorFlow.TFDataType T, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="limit" Type="System.Int64" />
        <Parameter Name="T" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a scalar <c>Variable</c> node.
            </param>
        <param name="limit">
              If incrementing ref would bring it above limit, instead generates an
              'OutOfRange' error.
            </param>
        <param name="T">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceCountUpTo'.
            </param>
        <summary>
              Increments variable pointed to by 'resource' until it reaches 'limit'.
            </summary>
        <returns>
              A copy of the input before increment. If nothing else modifies the
              input, the values produced will all be distinct.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceGather">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResourceGather (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFDataType dtype, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResourceGather(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
        </param>
        <param name="indices">
        </param>
        <param name="dtype">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceGather'.
            </param>
        <summary>
              Gather slices from the variable pointed to by <c>resource</c> according to <c>indices</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>indices</c> must be an integer tensor of any dimension (usually 0-D or 1-D).
              Produces an output tensor with shape <c>indices.shape + params.shape[1:]</c> where:
              
               <code>
              # Scalar indices
              output[:, ..., :] = params[indices, :, ... :]
              
              # Vector indices
              output[i, :, ..., :] = params[indices[i], :, ... :]
              
              # Higher rank indices
              output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterAdd (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterAdd(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterAdd'.
            </param>
        <summary>
              Adds sparse updates to the variable referenced by <c>resource</c>.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] += updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] += updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] += updates[i, ..., j, ...]
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions add.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src='https://www.tensorflow.org/images/ScatterAdd.png' alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterDiv (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterDiv(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterDiv'.
            </param>
        <summary>
              Divides sparse updates into the variable referenced by <c>resource</c>.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] /= updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] /= updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] /= updates[i, ..., j, ...]
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions multiply.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src='https://www.tensorflow.org/images/ScatterAdd.png' alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterMax (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterMax(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterMax'.
            </param>
        <summary>
              Reduces sparse updates into the variable referenced by <c>resource</c> using the <c>max</c> operation.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] = max(ref[indices, ...], updates[...])
              
              # Vector indices (for each i)
              ref[indices[i], ...] = max(ref[indices[i], ...], updates[i, ...])
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] = max(ref[indices[i, ..., j], ...], updates[i, ..., j, ...])
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions are combined.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src='https://www.tensorflow.org/images/ScatterAdd.png' alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterMin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterMin (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterMin(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterMin'.
            </param>
        <summary>
              Reduces sparse updates into the variable referenced by <c>resource</c> using the <c>min</c> operation.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] = min(ref[indices, ...], updates[...])
              
              # Vector indices (for each i)
              ref[indices[i], ...] = min(ref[indices[i], ...], updates[i, ...])
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] = min(ref[indices[i, ..., j], ...], updates[i, ..., j, ...])
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions are combined.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src='https://www.tensorflow.org/images/ScatterAdd.png' alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterMul (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterMul(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterMul'.
            </param>
        <summary>
              Multiplies sparse updates into the variable referenced by <c>resource</c>.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] *= updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] *= updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] *= updates[i, ..., j, ...]
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions multiply.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src='https://www.tensorflow.org/images/ScatterAdd.png' alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterNdAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterNdAdd (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterNdAdd(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              A resource handle. Must be from a VarHandleOp.
            </param>
        <param name="indices">
              A Tensor. Must be one of the following types: int32, int64.
              A tensor of indices into ref.
            </param>
        <param name="updates">
              A Tensor. Must have the same type as ref. A tensor of
              values to add to ref.
            </param>
        <param name="use_locking">
              Optional argument
              An optional bool. Defaults to True. If True, the assignment will
              be protected by a lock; otherwise the behavior is undefined,
              but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterNdAdd'.
            </param>
        <summary>
              Adds sparse <c>updates</c> to individual values or slices within a given
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              variable according to <c>indices</c>.
              
              <c>ref</c> is a <c>Tensor</c> with rank <c>P</c> and <c>indices</c> is a <c>Tensor</c> of rank <c>Q</c>.
              
              <c>indices</c> must be integer tensor, containing indices into <c>ref</c>.
              It must be shape <c>[d_0, ..., d_{Q-2}, K]</c> where <c>0 &amp;lt; K &amp;lt;= P</c>.
              
              The innermost dimension of <c>indices</c> (with length <c>K</c>) corresponds to
              indices into elements (if <c>K = P</c>) or slices (if <c>K &amp;lt; P</c>) along the <c>K</c>th
              dimension of <c>ref</c>.
              
              <c>updates</c> is <c>Tensor</c> of rank <c>Q-1+P-K</c> with shape:
              
               <code>
              [d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].
               </code>
              
              For example, say we want to update 4 scattered elements to a rank-1 tensor to
              8 elements. In Python, that update would look like this:
              
               <code>
              ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8], use_resource=True)
              indices = tf.constant([[4], [3], [1] ,[7]])
              updates = tf.constant([9, 10, 11, 12])
              update = tf.scatter_nd_add(ref, indices, updates)
              with tf.Session() as sess:
              print sess.run(update)
               </code>
              
              The resulting update to ref would look like this:
              
              [1, 12, 3, 14, 14, 6, 7, 20]
              
              See <c>tf.scatter_nd</c> for more details about how to make updates to
              slices.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterNdUpdate">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterNdUpdate (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterNdUpdate(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              A resource handle. Must be from a VarHandleOp.
            </param>
        <param name="indices">
              A Tensor. Must be one of the following types: int32, int64.
              A tensor of indices into ref.
            </param>
        <param name="updates">
              A Tensor. Must have the same type as ref. A tensor of updated
              values to add to ref.
            </param>
        <param name="use_locking">
              Optional argument
              An optional bool. Defaults to True. If True, the assignment will
              be protected by a lock; otherwise the behavior is undefined,
              but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterNdUpdate'.
            </param>
        <summary>
              Applies sparse <c>updates</c> to individual values or slices within a given
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              variable according to <c>indices</c>.
              
              <c>ref</c> is a <c>Tensor</c> with rank <c>P</c> and <c>indices</c> is a <c>Tensor</c> of rank <c>Q</c>.
              
              <c>indices</c> must be integer tensor, containing indices into <c>ref</c>.
              It must be shape <c>[d_0, ..., d_{Q-2}, K]</c> where <c>0 &amp;lt; K &amp;lt;= P</c>.
              
              The innermost dimension of <c>indices</c> (with length <c>K</c>) corresponds to
              indices into elements (if <c>K = P</c>) or slices (if <c>K &amp;lt; P</c>) along the <c>K</c>th
              dimension of <c>ref</c>.
              
              <c>updates</c> is <c>Tensor</c> of rank <c>Q-1+P-K</c> with shape:
              
               <code>
              [d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].
               </code>
              
              For example, say we want to update 4 scattered elements to a rank-1 tensor to
              8 elements. In Python, that update would look like this:
              
               <code>
              ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8])
              indices = tf.constant([[4], [3], [1] ,[7]])
              updates = tf.constant([9, 10, 11, 12])
              update = tf.scatter_nd_update(ref, indices, updates)
              with tf.Session() as sess:
              print sess.run(update)
               </code>
              
              The resulting update to ref would look like this:
              
              [1, 11, 3, 10, 9, 6, 7, 12]
              
              See <c>tf.scatter_nd</c> for more details about how to make updates to
              slices.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterSub">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterSub (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterSub(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterSub'.
            </param>
        <summary>
              Subtracts sparse updates from the variable referenced by <c>resource</c>.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] -= updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] -= updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] -= updates[i, ..., j, ...]
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions add.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src='https://www.tensorflow.org/images/ScatterAdd.png' alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterUpdate">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterUpdate (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterUpdate(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterUpdate'.
            </param>
        <summary>
              Assigns sparse updates to the variable referenced by <c>resource</c>.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] = updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] = updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] = updates[i, ..., j, ...]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyAdadelta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyAdadelta(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput accum_update, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum_update" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
        </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="accum_update">
              : Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="rho">
              Decay factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Constant factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdadelta'.
            </param>
        <summary>
              var: Should be from a Variable().
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; update_slots = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; update_slots, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="update_slots" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="update_slots">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdagrad'.
            </param>
        <summary>
              Update relevant entries in '*var' and '*accum' according to the adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var and accum as follows:
              accum += grad * grad
              var -= lr * grad * (1 / sqrt(accum))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyAdagradDA">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyAdagradDA(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput gradient_accumulator, valuetype TensorFlow.TFOutput gradient_squared_accumulator, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput global_step, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_squared_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="global_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="gradient_accumulator">
              Should be from a Variable().
            </param>
        <param name="gradient_squared_accumulator">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="global_step">
              Training step number. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdagradDA'.
            </param>
        <summary>
              Update entries in '*var' and '*accum' according to the proximal adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyCenteredRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyCenteredRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput mg, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="mg" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="mg">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var, ms and mom.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, mg, ms, and mom tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyCenteredRMSProp'.
            </param>
        <summary>
              Update '*var' according to the centered RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The centered RMSProp algorithm uses an estimate of the centered second moment
              (i.e., the variance) for normalization, as opposed to regular RMSProp, which
              uses the (uncentered) second moment. This often helps with training, but is
              slightly more expensive in terms of computation and memory.
              
              Note that in dense implementation of this algorithm, mg, ms, and mom will
              update even if the grad is zero, but in this sparse implementation, mg, ms,
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              mean_grad = decay * mean_grad + (1-decay) * gradient
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)
              
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyFtrl">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyFtrl(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyFtrl'.
            </param>
        <summary>
              Update relevant entries in '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var, accum and linear as follows:
              accum_new = accum + grad * grad
              linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyFtrlV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyFtrlV2 (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput l2_shrinkage, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyFtrlV2(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput l2_shrinkage, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2_shrinkage" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 shrinkage regulariation. Must be a scalar.
            </param>
        <param name="l2_shrinkage">
        </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyFtrlV2'.
            </param>
        <summary>
              Update relevant entries in '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var, accum and linear as follows:
              grad_with_shrinkage = grad + 2 * l2_shrinkage * var
              accum_new = accum + grad_with_shrinkage * grad_with_shrinkage
              linear += grad_with_shrinkage +
              (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyMomentum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput momentum, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyMomentum(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput momentum, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="momentum">
              Momentum. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If <c>True</c>, the tensor passed to compute grad will be
              var - lr * momentum * accum, so in the end, the var you get is actually
              var - lr * momentum * accum.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyMomentum'.
            </param>
        <summary>
              Update relevant entries in '*var' and '*accum' according to the momentum scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Set use_nesterov = True if you want to use Nesterov momentum.
              
              That is for rows we have grad for, we update var and accum as follows:
              
              accum = accum * momentum + grad
              var -= lr * accum
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyProximalAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyProximalAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyProximalAdagrad'.
            </param>
        <summary>
              Sparse update entries in '*var' and '*accum' according to FOBOS algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var and accum as follows:
              accum += grad * grad
              prox_v = var
              prox_v -= lr * grad * (1 / sqrt(accum))
              var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyProximalGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyProximalGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyProximalGradientDescent'.
            </param>
        <summary>
              Sparse update '*var' as FOBOS algorithm with fixed learning rate.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var as follows:
              prox_v = var - alpha * grad
              var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var, ms and mom.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, ms, and mom tensors is protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyRMSProp'.
            </param>
        <summary>
              Update '*var' according to the RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Note that in dense implementation of this algorithm, ms and mom will
              update even if the grad is zero, but in this sparse implementation, ms
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)
              
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceStridedSliceAssign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceStridedSliceAssign (TensorFlow.TFOutput reference, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, TensorFlow.TFOutput value, Nullable&lt;long&gt; begin_mask = null, Nullable&lt;long&gt; end_mask = null, Nullable&lt;long&gt; ellipsis_mask = null, Nullable&lt;long&gt; new_axis_mask = null, Nullable&lt;long&gt; shrink_axis_mask = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceStridedSliceAssign(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput end, valuetype TensorFlow.TFOutput strides, valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;int64&gt; begin_mask, valuetype System.Nullable`1&lt;int64&gt; end_mask, valuetype System.Nullable`1&lt;int64&gt; ellipsis_mask, valuetype System.Nullable`1&lt;int64&gt; new_axis_mask, valuetype System.Nullable`1&lt;int64&gt; shrink_axis_mask, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="end" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="end_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ellipsis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="new_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shrink_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">To be added.</param>
        <param name="begin">To be added.</param>
        <param name="end">To be added.</param>
        <param name="strides">To be added.</param>
        <param name="value">To be added.</param>
        <param name="begin_mask">To be added.</param>
        <param name="end_mask">To be added.</param>
        <param name="ellipsis_mask">To be added.</param>
        <param name="new_axis_mask">To be added.</param>
        <param name="shrink_axis_mask">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Restore (TensorFlow.TFOutput file_pattern, TensorFlow.TFOutput tensor_name, TensorFlow.TFDataType dt, Nullable&lt;long&gt; preferred_shard = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Restore(valuetype TensorFlow.TFOutput file_pattern, valuetype TensorFlow.TFOutput tensor_name, valuetype TensorFlow.TFDataType dt, valuetype System.Nullable`1&lt;int64&gt; preferred_shard, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file_pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="dt" Type="TensorFlow.TFDataType" />
        <Parameter Name="preferred_shard" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file_pattern">
              Must have a single element. The pattern of the files from
              which we read the tensor.
            </param>
        <param name="tensor_name">
              Must have a single element. The name of the tensor to be
              restored.
            </param>
        <param name="dt">
              The type of the tensor to be restored.
            </param>
        <param name="preferred_shard">
              Optional argument
              Index of file to open first if multiple files match
              <c>file_pattern</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Restore'.
            </param>
        <summary>
              Restores a tensor from checkpoint files.
            </summary>
        <returns>
              The restored tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reads a tensor stored in one or several files. If there are several files (for
              instance because a tensor was saved as slices), <c>file_pattern</c> may contain
              wildcard symbols (<c>*</c> and <c>?</c>) in the filename portion only, not in the
              directory portion.
              
              If a <c>file_pattern</c> matches several files, <c>preferred_shard</c> can be used to hint
              in which file the requested tensor is likely to be found. This op will first
              open the file at index <c>preferred_shard</c> in the list of matching files and try
              to restore tensors from that file.  Only if some tensors or tensor slices are
              not found in that first file, then the Op opens all the files. Setting
              <c>preferred_shard</c> to match the value passed as the <c>shard</c> input
              of a matching <c>Save</c> Op may speed up Restore.  This attribute only affects
              performance, not correctness.  The default value -1 means files are processed in
              order.
              
              See also <c>RestoreSlice</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreSlice">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RestoreSlice (TensorFlow.TFOutput file_pattern, TensorFlow.TFOutput tensor_name, TensorFlow.TFOutput shape_and_slice, TensorFlow.TFDataType dt, Nullable&lt;long&gt; preferred_shard = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RestoreSlice(valuetype TensorFlow.TFOutput file_pattern, valuetype TensorFlow.TFOutput tensor_name, valuetype TensorFlow.TFOutput shape_and_slice, valuetype TensorFlow.TFDataType dt, valuetype System.Nullable`1&lt;int64&gt; preferred_shard, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file_pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_and_slice" Type="TensorFlow.TFOutput" />
        <Parameter Name="dt" Type="TensorFlow.TFDataType" />
        <Parameter Name="preferred_shard" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file_pattern">
              Must have a single element. The pattern of the files from
              which we read the tensor.
            </param>
        <param name="tensor_name">
              Must have a single element. The name of the tensor to be
              restored.
            </param>
        <param name="shape_and_slice">
              Scalar. The shapes and slice specifications to use when
              restoring a tensors.
            </param>
        <param name="dt">
              The type of the tensor to be restored.
            </param>
        <param name="preferred_shard">
              Optional argument
              Index of file to open first if multiple files match
              <c>file_pattern</c>. See the documentation for <c>Restore</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RestoreSlice'.
            </param>
        <summary>
              Restores a tensor from checkpoint files.
            </summary>
        <returns>
              The restored tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is like <c>Restore</c> except that restored tensor can be listed as filling
              only a slice of a larger tensor.  <c>shape_and_slice</c> specifies the shape of the
              larger tensor and the slice that the restored tensor covers.
              
              The <c>shape_and_slice</c> input has the same format as the
              elements of the <c>shapes_and_slices</c> input of the <c>SaveSlices</c> op.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] RestoreV2 (TensorFlow.TFOutput prefix, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shape_and_slices, TensorFlow.TFDataType[] dtypes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] RestoreV2(valuetype TensorFlow.TFOutput prefix, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput shape_and_slices, valuetype TensorFlow.TFDataType[] dtypes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_and_slices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
              Must have a single element.  The prefix of a V2 checkpoint.
            </param>
        <param name="tensor_names">
              shape {N}.  The names of the tensors to be restored.
            </param>
        <param name="shape_and_slices">
              shape {N}.  The slice specs of the tensors to be restored.
              Empty strings indicate that they are non-partitioned tensors.
            </param>
        <param name="dtypes">
              shape {N}.  The list of expected dtype for the tensors.  Must match
              those stored in the checkpoint.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RestoreV2'.
            </param>
        <summary>
              Restores tensors from a V2 checkpoint.
            </summary>
        <returns>
              shape {N}.  The restored tensors, whose shapes are read from the
              checkpoint directly.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For backward compatibility with the V1 format, this Op currently allows
              restoring from a V1 checkpoint as well:
              - This Op first attempts to find the V2 index file pointed to by "prefix", and
              if found proceed to read it as a V2 checkpoint;
              - Otherwise the V1 read path is invoked.
              Relying on this behavior is not recommended, as the ability to fall back to read
              V1 might be deprecated and eventually removed.
              
              By default, restores the named tensors in full.  If the caller wishes to restore
              specific slices of stored tensors, "shape_and_slices" should be non-empty
              strings and correspondingly well-formed.
              
              Callers must ensure all the named tensors are indeed stored in the checkpoint.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingAdadeltaParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdadeltaParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdadeltaParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingAdadeltaParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the Adadelta optimization algorithm.
              accumulators: Parameter accumulators updated by the Adadelta optimization algorithm.
              updates: Parameter updates updated by the Adadelta optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the Adadelta optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the Adadelta optimization algorithm.
              updates: A tensor containing the embedding table updates to store with the
              parameters from embedding updates using the Adadelta optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the Adadelta optimization algorithm.
              accumulators: Parameter accumulators updated by the Adadelta optimization algorithm.
              updates: Parameter updates updated by the Adadelta optimization algorithm.
              gradient_accumulators: Parameter gradient_accumulators updated by the Adadelta optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the Adadelta optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the Adadelta optimization algorithm.
              updates: A tensor containing the embedding table updates to store with the
              parameters from embedding updates using the Adadelta optimization algorithm.
              gradient_accumulators: A tensor containing the embedding table gradient_accumulators to store with the
              parameters from embedding updates using the Adadelta optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingAdagradParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdagradParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdagradParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingAdagradParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the Adagrad optimization algorithm.
              accumulators: Parameter accumulators updated by the Adagrad optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the Adagrad optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingAdagradParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdagradParametersGradAccumDebug (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingAdagradParametersGradAccumDebug(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingAdagradParametersGradAccumDebug'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the Adagrad optimization algorithm.
              accumulators: Parameter accumulators updated by the Adagrad optimization algorithm.
              gradient_accumulators: Parameter gradient_accumulators updated by the Adagrad optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the Adagrad optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the Adagrad optimization algorithm.
              gradient_accumulators: A tensor containing the embedding table gradient_accumulators to store with the
              parameters from embedding updates using the Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingADAMParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingADAMParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingADAMParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingADAMParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the ADAM optimization algorithm.
              momenta: Parameter momenta updated by the ADAM optimization algorithm.
              velocities: Parameter velocities updated by the ADAM optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the ADAM optimization algorithm.
              momenta: A tensor containing the embedding table momenta to store with the
              parameters from embedding updates using the ADAM optimization algorithm.
              velocities: A tensor containing the embedding table velocities to store with the
              parameters from embedding updates using the ADAM optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingADAMParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingADAMParametersGradAccumDebug (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingADAMParametersGradAccumDebug(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingADAMParametersGradAccumDebug'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the ADAM optimization algorithm.
              momenta: Parameter momenta updated by the ADAM optimization algorithm.
              velocities: Parameter velocities updated by the ADAM optimization algorithm.
              gradient_accumulators: Parameter gradient_accumulators updated by the ADAM optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the ADAM optimization algorithm.
              momenta: A tensor containing the embedding table momenta to store with the
              parameters from embedding updates using the ADAM optimization algorithm.
              velocities: A tensor containing the embedding table velocities to store with the
              parameters from embedding updates using the ADAM optimization algorithm.
              gradient_accumulators: A tensor containing the embedding table gradient_accumulators to store with the
              parameters from embedding updates using the ADAM optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingCenteredRMSPropParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingCenteredRMSPropParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingCenteredRMSPropParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingCenteredRMSPropParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the centered RMSProp optimization algorithm.
              ms: Parameter ms updated by the centered RMSProp optimization algorithm.
              mom: Parameter mom updated by the centered RMSProp optimization algorithm.
              mg: Parameter mg updated by the centered RMSProp optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the centered RMSProp optimization algorithm.
              ms: A tensor containing the embedding table ms to store with the
              parameters from embedding updates using the centered RMSProp optimization algorithm.
              mom: A tensor containing the embedding table mom to store with the
              parameters from embedding updates using the centered RMSProp optimization algorithm.
              mg: A tensor containing the embedding table mg to store with the
              parameters from embedding updates using the centered RMSProp optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingFTRLParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingFTRLParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingFTRLParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingFTRLParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the FTRL optimization algorithm.
              accumulators: Parameter accumulators updated by the FTRL optimization algorithm.
              linears: Parameter linears updated by the FTRL optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the FTRL optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the FTRL optimization algorithm.
              linears: A tensor containing the embedding table linears to store with the
              parameters from embedding updates using the FTRL optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingFTRLParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingFTRLParametersGradAccumDebug (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingFTRLParametersGradAccumDebug(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingFTRLParametersGradAccumDebug'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the FTRL optimization algorithm.
              accumulators: Parameter accumulators updated by the FTRL optimization algorithm.
              linears: Parameter linears updated by the FTRL optimization algorithm.
              gradient_accumulators: Parameter gradient_accumulators updated by the FTRL optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the FTRL optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the FTRL optimization algorithm.
              linears: A tensor containing the embedding table linears to store with the
              parameters from embedding updates using the FTRL optimization algorithm.
              gradient_accumulators: A tensor containing the embedding table gradient_accumulators to store with the
              parameters from embedding updates using the FTRL optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingMDLAdagradLightParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingMDLAdagradLightParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingMDLAdagradLightParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingMDLAdagradLightParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the MDL Adagrad Light optimization algorithm.
              accumulators: Parameter accumulators updated by the MDL Adagrad Light optimization algorithm.
              weights: Parameter weights updated by the MDL Adagrad Light optimization algorithm.
              benefits: Parameter benefits updated by the MDL Adagrad Light optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the MDL Adagrad Light optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the MDL Adagrad Light optimization algorithm.
              weights: A tensor containing the embedding table weights to store with the
              parameters from embedding updates using the MDL Adagrad Light optimization algorithm.
              benefits: A tensor containing the embedding table benefits to store with the
              parameters from embedding updates using the MDL Adagrad Light optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingMomentumParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingMomentumParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingMomentumParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingMomentumParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the Momentum optimization algorithm.
              momenta: Parameter momenta updated by the Momentum optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the Momentum optimization algorithm.
              momenta: A tensor containing the embedding table momenta to store with the
              parameters from embedding updates using the Momentum optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingMomentumParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingMomentumParametersGradAccumDebug (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingMomentumParametersGradAccumDebug(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingMomentumParametersGradAccumDebug'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the Momentum optimization algorithm.
              momenta: Parameter momenta updated by the Momentum optimization algorithm.
              gradient_accumulators: Parameter gradient_accumulators updated by the Momentum optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the Momentum optimization algorithm.
              momenta: A tensor containing the embedding table momenta to store with the
              parameters from embedding updates using the Momentum optimization algorithm.
              gradient_accumulators: A tensor containing the embedding table gradient_accumulators to store with the
              parameters from embedding updates using the Momentum optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingProximalAdagradParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingProximalAdagradParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingProximalAdagradParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingProximalAdagradParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the proximal Adagrad optimization algorithm.
              accumulators: Parameter accumulators updated by the proximal Adagrad optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the proximal Adagrad optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the proximal Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the proximal Adagrad optimization algorithm.
              accumulators: Parameter accumulators updated by the proximal Adagrad optimization algorithm.
              gradient_accumulators: Parameter gradient_accumulators updated by the proximal Adagrad optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the proximal Adagrad optimization algorithm.
              accumulators: A tensor containing the embedding table accumulators to store with the
              parameters from embedding updates using the proximal Adagrad optimization algorithm.
              gradient_accumulators: A tensor containing the embedding table gradient_accumulators to store with the
              parameters from embedding updates using the proximal Adagrad optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingRMSPropParameters">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingRMSPropParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingRMSPropParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingRMSPropParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the RMSProp optimization algorithm.
              ms: Parameter ms updated by the RMSProp optimization algorithm.
              mom: Parameter mom updated by the RMSProp optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the RMSProp optimization algorithm.
              ms: A tensor containing the embedding table ms to store with the
              parameters from embedding updates using the RMSProp optimization algorithm.
              mom: A tensor containing the embedding table mom to store with the
              parameters from embedding updates using the RMSProp optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              parameters: Parameter parameters updated by the RMSProp optimization algorithm.
              ms: Parameter ms updated by the RMSProp optimization algorithm.
              mom: Parameter mom updated by the RMSProp optimization algorithm.
              gradient_accumulators: Parameter gradient_accumulators updated by the RMSProp optimization algorithm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the RMSProp optimization algorithm.
              ms: A tensor containing the embedding table ms to store with the
              parameters from embedding updates using the RMSProp optimization algorithm.
              mom: A tensor containing the embedding table mom to store with the
              parameters from embedding updates using the RMSProp optimization algorithm.
              gradient_accumulators: A tensor containing the embedding table gradient_accumulators to store with the
              parameters from embedding updates using the RMSProp optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveTPUEmbeddingStochasticGradientDescentParameters">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RetrieveTPUEmbeddingStochasticGradientDescentParameters (long num_shards, long shard_id, Nullable&lt;long&gt; table_id = null, string table_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RetrieveTPUEmbeddingStochasticGradientDescentParameters(int64 num_shards, int64 shard_id, valuetype System.Nullable`1&lt;int64&gt; table_id, string table_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="num_shards" Type="System.Int64" />
        <Parameter Name="shard_id" Type="System.Int64" />
        <Parameter Name="table_id" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="table_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="num_shards">
        </param>
        <param name="shard_id">
        </param>
        <param name="table_id">
              Optional argument
            </param>
        <param name="table_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RetrieveTPUEmbeddingStochasticGradientDescentParameters'.
            </param>
        <summary>
              Retrieve embedding parameters for a single table.
            </summary>
        <returns>
              Parameter parameters updated by the stochastic gradient descent optimization algorithm.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              
              An op that retrieves optimization parameters from embedding to host
              memory. Must be preceded by a ConfigureTPUEmbeddingHost op that sets up
              the correct embedding table configuration. For example, this op is
              used to retrieve updated parameters before saving a checkpoint.
              
              parameters: A tensor containing the embedding table parameters to store with the
              parameters from embedding updates using the stochastic gradient descent optimization algorithm.
              table_name: Name of this table; must match a name in the
              TPUEmbeddingConfiguration proto (overrides table_id).
              num_shards: Number of shards into which the embedding tables are divided.
              shard_id: Identifier of shard for this operation.
              table_id: Index of this table in the EmbeddingLayerConfiguration proto
              (deprecated).
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Reverse (TensorFlow.TFOutput tensor, TensorFlow.TFOutput dims, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Reverse(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="dims" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
              Up to 8-D.
            </param>
        <param name="dims">
              1-D. The dimensions to reverse.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Reverse'.
            </param>
        <summary>
              Reverses specific dimensions of a tensor.
            </summary>
        <returns>
              The same shape as <c>tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a <c>tensor</c>, and a <c>bool</c> tensor <c>dims</c> representing the dimensions
              of <c>tensor</c>, this operation reverses each dimension i of <c>tensor</c> where
              <c>dims[i]</c> is <c>True</c>.
              
              <c>tensor</c> can have up to 8 dimensions. The number of dimensions
              of <c>tensor</c> must equal the number of elements in <c>dims</c>. In other words:
              
              <c>rank(tensor) = size(dims)</c>
              
              For example:
              
               <code>
              # tensor 't' is [[[[ 0,  1,  2,  3],
              #                  [ 4,  5,  6,  7],
              #                  [ 8,  9, 10, 11]],
              #                 [[12, 13, 14, 15],
              #                  [16, 17, 18, 19],
              #                  [20, 21, 22, 23]]]]
              # tensor 't' shape is [1, 2, 3, 4]
              
              # 'dims' is [False, False, False, True]
              reverse(t, dims) ==&amp;gt; [[[[ 3,  2,  1,  0],
              [ 7,  6,  5,  4],
              [ 11, 10, 9, 8]],
              [[15, 14, 13, 12],
              [19, 18, 17, 16],
              [23, 22, 21, 20]]]]
              
              # 'dims' is [False, True, False, False]
              reverse(t, dims) ==&amp;gt; [[[[12, 13, 14, 15],
              [16, 17, 18, 19],
              [20, 21, 22, 23]
              [[ 0,  1,  2,  3],
              [ 4,  5,  6,  7],
              [ 8,  9, 10, 11]]]]
              
              # 'dims' is [False, False, True, False]
              reverse(t, dims) ==&amp;gt; [[[[8, 9, 10, 11],
              [4, 5, 6, 7],
              [0, 1, 2, 3]]
              [[20, 21, 22, 23],
              [16, 17, 18, 19],
              [12, 13, 14, 15]]]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseSequence">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReverseSequence (TensorFlow.TFOutput input, TensorFlow.TFOutput seq_lengths, long seq_dim, Nullable&lt;long&gt; batch_dim = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReverseSequence(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput seq_lengths, int64 seq_dim, valuetype System.Nullable`1&lt;int64&gt; batch_dim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="seq_lengths" Type="TensorFlow.TFOutput" />
        <Parameter Name="seq_dim" Type="System.Int64" />
        <Parameter Name="batch_dim" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The input to reverse.
            </param>
        <param name="seq_lengths">
              1-D with length <c>input.dims(batch_dim)</c> and
              <c>max(seq_lengths) &amp;lt;= input.dims(seq_dim)</c></param>
        <param name="seq_dim">
              The dimension which is partially reversed.
            </param>
        <param name="batch_dim">
              Optional argument
              The dimension along which reversal is performed.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReverseSequence'.
            </param>
        <summary>
              Reverses variable length slices.
            </summary>
        <returns>
              The partially reversed input. It has the same shape as <c>input</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op first slices <c>input</c> along the dimension <c>batch_dim</c>, and for each
              slice <c>i</c>, reverses the first <c>seq_lengths[i]</c> elements along
              the dimension <c>seq_dim</c>.
              
              The elements of <c>seq_lengths</c> must obey <c>seq_lengths[i] &amp;lt;= input.dims[seq_dim]</c>,
              and <c>seq_lengths</c> must be a vector of length <c>input.dims[batch_dim]</c>.
              
              The output slice <c>i</c> along dimension <c>batch_dim</c> is then given by input
              slice <c>i</c>, with the first <c>seq_lengths[i]</c> slices along dimension
              <c>seq_dim</c> reversed.
              
              For example:
              
               <code>
              # Given this:
              batch_dim = 0
              seq_dim = 1
              input.dims = (4, 8, ...)
              seq_lengths = [7, 2, 3, 5]
              
              # then slices of input are reversed on seq_dim, but only up to seq_lengths:
              output[0, 0:7, :, ...] = input[0, 7:0:-1, :, ...]
              output[1, 0:2, :, ...] = input[1, 2:0:-1, :, ...]
              output[2, 0:3, :, ...] = input[2, 3:0:-1, :, ...]
              output[3, 0:5, :, ...] = input[3, 5:0:-1, :, ...]
              
              # while entries past seq_lens are copied through:
              output[0, 7:, :, ...] = input[0, 7:, :, ...]
              output[1, 2:, :, ...] = input[1, 2:, :, ...]
              output[2, 3:, :, ...] = input[2, 3:, :, ...]
              output[3, 2:, :, ...] = input[3, 2:, :, ...]
               </code>
              
              In contrast, if:
              
               <code>
              # Given this:
              batch_dim = 2
              seq_dim = 0
              input.dims = (8, ?, 4, ...)
              seq_lengths = [7, 2, 3, 5]
              
              # then slices of input are reversed on seq_dim, but only up to seq_lengths:
              output[0:7, :, 0, :, ...] = input[7:0:-1, :, 0, :, ...]
              output[0:2, :, 1, :, ...] = input[2:0:-1, :, 1, :, ...]
              output[0:3, :, 2, :, ...] = input[3:0:-1, :, 2, :, ...]
              output[0:5, :, 3, :, ...] = input[5:0:-1, :, 3, :, ...]
              
              # while entries past seq_lens are copied through:
              output[7:, :, 0, :, ...] = input[7:, :, 0, :, ...]
              output[2:, :, 1, :, ...] = input[2:, :, 1, :, ...]
              output[3:, :, 2, :, ...] = input[3:, :, 2, :, ...]
              output[2:, :, 3, :, ...] = input[2:, :, 3, :, ...]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReverseV2 (TensorFlow.TFOutput tensor, TensorFlow.TFOutput axis, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReverseV2(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
              Up to 8-D.
            </param>
        <param name="axis">
              1-D. The indices of the dimensions to reverse. Must be in the range
              <c>[-rank(tensor), rank(tensor))</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReverseV2'.
            </param>
        <summary>
              Reverses specific dimensions of a tensor.
            </summary>
        <returns>
              The same shape as <c>tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              NOTE <c>tf.reverse</c> has now changed behavior in preparation for 1.0.
              <c>tf.reverse_v2</c> is currently an alias that will be deprecated before TF 1.0.
              
              Given a <c>tensor</c>, and a <c>int32</c> tensor <c>axis</c> representing the set of
              dimensions of <c>tensor</c> to reverse. This operation reverses each dimension
              <c>i</c> for which there exists <c>j</c> s.t. <c>axis[j] == i</c>.
              
              <c>tensor</c> can have up to 8 dimensions. The number of dimensions specified
              in <c>axis</c> may be 0 or more entries. If an index is specified more than
              once, a InvalidArgument error is raised.
              
              For example:
              
               <code>
              # tensor 't' is [[[[ 0,  1,  2,  3],
              #                  [ 4,  5,  6,  7],
              #                  [ 8,  9, 10, 11]],
              #                 [[12, 13, 14, 15],
              #                  [16, 17, 18, 19],
              #                  [20, 21, 22, 23]]]]
              # tensor 't' shape is [1, 2, 3, 4]
              
              # 'dims' is [3] or 'dims' is [-1]
              reverse(t, dims) ==&amp;gt; [[[[ 3,  2,  1,  0],
              [ 7,  6,  5,  4],
              [ 11, 10, 9, 8]],
              [[15, 14, 13, 12],
              [19, 18, 17, 16],
              [23, 22, 21, 20]]]]
              
              # 'dims' is '[1]' (or 'dims' is '[-3]')
              reverse(t, dims) ==&amp;gt; [[[[12, 13, 14, 15],
              [16, 17, 18, 19],
              [20, 21, 22, 23]
              [[ 0,  1,  2,  3],
              [ 4,  5,  6,  7],
              [ 8,  9, 10, 11]]]]
              
              # 'dims' is '[2]' (or 'dims' is '[-2]')
              reverse(t, dims) ==&amp;gt; [[[[8, 9, 10, 11],
              [4, 5, 6, 7],
              [0, 1, 2, 3]]
              [[20, 21, 22, 23],
              [16, 17, 18, 19],
              [12, 13, 14, 15]]]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="RFFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RFFT (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RFFT(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A float32 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [1]. The FFT length.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT'.
            </param>
        <summary>
              Real-valued fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same rank as <c>input</c>. The inner-most
              dimension of <c>input</c> is replaced with the <c>fft_length / 2 + 1</c> unique
              frequency components of its 1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.rfft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 1-dimensional discrete Fourier transform of a real-valued signal
              over the inner-most dimension of <c>input</c>.
              
              Since the DFT of a real signal is Hermitian-symmetric, <c>RFFT</c> only returns the
              <c>fft_length / 2 + 1</c> unique components of the FFT: the zero-frequency term,
              followed by the <c>fft_length / 2</c> positive-frequency terms.
              
              Along the axis <c>RFFT</c> is computed on, if <c>fft_length</c> is smaller than the
              corresponding dimension of <c>input</c>, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RFFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RFFT2D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RFFT2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A float32 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [2]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT2D'.
            </param>
        <summary>
              2D real-valued fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same rank as <c>input</c>. The inner-most 2
              dimensions of <c>input</c> are replaced with their 2D Fourier transform. The
              inner-most dimension contains <c>fft_length / 2 + 1</c> unique frequency
              components.
              
              @compatibility(numpy)
              Equivalent to np.fft.rfft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 2-dimensional discrete Fourier transform of a real-valued signal
              over the inner-most 2 dimensions of <c>input</c>.
              
              Since the DFT of a real signal is Hermitian-symmetric, <c>RFFT2D</c> only returns the
              <c>fft_length / 2 + 1</c> unique components of the FFT for the inner-most dimension
              of <c>output</c>: the zero-frequency term, followed by the <c>fft_length / 2</c>
              positive-frequency terms.
              
              Along each axis <c>RFFT2D</c> is computed on, if <c>fft_length</c> is smaller than the
              corresponding dimension of <c>input</c>, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RFFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RFFT3D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RFFT3D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A float32 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [3]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT3D'.
            </param>
        <summary>
              3D real-valued fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same rank as <c>input</c>. The inner-most 3
              dimensions of <c>input</c> are replaced with the their 3D Fourier transform. The
              inner-most dimension contains <c>fft_length / 2 + 1</c> unique frequency
              components.
              
              @compatibility(numpy)
              Equivalent to np.fft.rfftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 3-dimensional discrete Fourier transform of a real-valued signal
              over the inner-most 3 dimensions of <c>input</c>.
              
              Since the DFT of a real signal is Hermitian-symmetric, <c>RFFT3D</c> only returns the
              <c>fft_length / 2 + 1</c> unique components of the FFT for the inner-most dimension
              of <c>output</c>: the zero-frequency term, followed by the <c>fft_length / 2</c>
              positive-frequency terms.
              
              Along each axis <c>RFFT3D</c> is computed on, if <c>fft_length</c> is smaller than the
              corresponding dimension of <c>input</c>, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RGBToHSV">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RGBToHSV (TensorFlow.TFOutput images, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RGBToHSV(valuetype TensorFlow.TFOutput images, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              1-D or higher rank. RGB data to convert. Last dimension must be size 3.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RGBToHSV'.
            </param>
        <summary>
              Converts one or more images from RGB to HSV.
            </summary>
        <returns>
          <c>images</c> converted to HSV.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a tensor of the same shape as the <c>images</c> tensor, containing the HSV
              value of the pixels. The output is only well defined if the value in <c>images</c>
              are in <c>[0,1]</c>.
              
              <c>output[..., 0]</c> contains hue, <c>output[..., 1]</c> contains saturation, and
              <c>output[..., 2]</c> contains value. All HSV values are in <c>[0,1]</c>. A hue of 0
              corresponds to pure red, hue 1/3 is pure green, and 2/3 is pure blue.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RightShift (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RightShift(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RightShift'.
            </param>
        <summary>
              Elementwise computes the bitwise right-shift of <c>x</c> and <c>y</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Performs a logical shift for unsigned integer types, and an arithmetic shift
              for signed integer types.
              
              If <c>y</c> is negative, or greater than or equal to than the width of <c>x</c> in bits
              the result is implementation defined.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rint">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Rint (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Rint(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Rint'.
            </param>
        <summary>
              Returns element-wise integer closest to x.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If the result is midway between two representable values,
              the even representable is chosen.
              For example:
              
               <code>
              rint(-1.5) ==&amp;gt; -2.0
              rint(0.5000001) ==&amp;gt; 1.0
              rint([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0]) ==&amp;gt; [-2., -2., -0., 0., 2., 2., 2.]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roll">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Roll (TensorFlow.TFOutput input, TensorFlow.TFOutput shift, TensorFlow.TFOutput axis, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Roll(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput shift, valuetype TensorFlow.TFOutput axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="shift" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="shift">
              Dimension must be 0-D or 1-D. <c>shift[i]</c> specifies the number of places by which
              elements are shifted positively (towards larger indices) along the dimension
              specified by <c>axis[i]</c>. Negative shifts will roll the elements in the opposite
              direction.
            </param>
        <param name="axis">
              Dimension must be 0-D or 1-D. <c>axis[i]</c> specifies the dimension that the shift
              <c>shift[i]</c> should occur. If the same axis is referenced more than once, the
              total shift for that axis will be the sum of all the shifts that belong to that
              axis.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Roll'.
            </param>
        <summary>
              Rolls the elements of a tensor along an axis.
            </summary>
        <returns>
              Has the same shape and size as the input. The elements are shifted
              positively (towards larger indices) by the offsets of <c>shift</c> along the
              dimensions of <c>axis</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The elements are shifted positively (towards larger indices) by the offset of
              <c>shift</c> along the dimension of <c>axis</c>. Negative <c>shift</c> values will shift
              elements in the opposite direction. Elements that roll passed the last position
              will wrap around to the first and vice versa. Multiple shifts along multiple
              axes may be specified.
              
              For example:
              
               <code>
              # 't' is [0, 1, 2, 3, 4]
              roll(t, shift=2, axis=0) ==&amp;gt; [3, 4, 0, 1, 2]
              
              # shifting along multiple dimensions
              # 't' is [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]
              roll(t, shift=[1, -2], axis=[0, 1]) ==&amp;gt; [[7, 8, 9, 5, 6], [2, 3, 4, 0, 1]]
              
              # shifting along the same axis multiple times
              # 't' is [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]
              roll(t, shift=[2, -3], axis=[1, 1]) ==&amp;gt; [[1, 2, 3, 4, 0], [6, 7, 8, 9, 5]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Round (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Round(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Round'.
            </param>
        <summary>
              Rounds the values of a tensor to the nearest integer, element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Rounds half to even.  Also known as bankers rounding. If you want to round
              according to the current system rounding mode use std::cint.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rpc">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Rpc (TensorFlow.TFOutput address, TensorFlow.TFOutput method, TensorFlow.TFOutput request, string protocol = null, Nullable&lt;bool&gt; fail_fast = null, Nullable&lt;long&gt; timeout_in_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Rpc(valuetype TensorFlow.TFOutput address, valuetype TensorFlow.TFOutput method, valuetype TensorFlow.TFOutput request, string protocol, valuetype System.Nullable`1&lt;bool&gt; fail_fast, valuetype System.Nullable`1&lt;int64&gt; timeout_in_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="TensorFlow.TFOutput" />
        <Parameter Name="method" Type="TensorFlow.TFOutput" />
        <Parameter Name="request" Type="TensorFlow.TFOutput" />
        <Parameter Name="protocol" Type="System.String" />
        <Parameter Name="fail_fast" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="timeout_in_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">
          <c>0-D</c> or <c>1-D</c>.  The address (i.e. host_name:port) of the RPC server.
              If this tensor has more than 1 element, then multiple parallel rpc requests
              are sent.  This argument broadcasts with <c>method</c> and <c>request</c>.
            </param>
        <param name="method">
          <c>0-D</c> or <c>1-D</c>.  The method address on the RPC server.
              If this tensor has more than 1 element, then multiple parallel rpc requests
              are sent.  This argument broadcasts with <c>address</c> and <c>request</c>.
            </param>
        <param name="request">
          <c>0-D</c> or <c>1-D</c>.  Serialized proto strings: the rpc request argument.
              If this tensor has more than 1 element, then multiple parallel rpc requests
              are sent.  This argument broadcasts with <c>address</c> and <c>method</c>.
            </param>
        <param name="protocol">
              Optional argument
              RPC protocol to use.  Empty string means use the default protocol.
              Options include 'grpc'.
            </param>
        <param name="fail_fast">
              Optional argument
              <c>boolean</c>. If <c>true</c> (default), then failures to connect
              (i.e., the server does not immediately respond) cause an RPC failure.
            </param>
        <param name="timeout_in_ms">
              Optional argument
              <c>int</c>. If <c>0</c> (default), then the kernel will run the RPC
              request and only time out if the RPC deadline passes or the session times out.
              If this value is greater than <c>0</c>, then the op will raise an exception if
              the RPC takes longer than <c>timeout_in_ms</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Rpc'.
            </param>
        <summary>
              Perform batches of RPC requests.
            </summary>
        <returns>
              Same shape as <c>request</c>. Serialized proto strings: the rpc responses.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op asynchronously performs either a single RPC request, or a batch
              of requests.  RPC requests are defined by three main parameters:
              
              - <c>address</c> (the host+port or BNS address of the request)
              - <c>method</c> (the RPC method name for the request)
              - <c>request</c> (the serialized proto string, or vector of strings,
              of the RPC request argument).
              
              For example, if you have an RPC service running on port localhost:2345,
              and its interface is configured with the following proto declaration:
              
               <code>
              service MyService {
              rpc MyMethod(MyRequestProto) returns (MyResponseProto) {
              }
              };
               </code>
              
              then call this op with arguments:
              
               <code>
              address = "localhost:2345"
              method = "MyService/MyMethod"
               </code>
              
              The <c>request</c> tensor is a string tensor representing serialized <c>MyRequestProto</c>
              strings; and the output string tensor <c>response</c> will have the same shape
              and contain (upon successful completion) corresponding serialized
              <c>MyResponseProto</c> strings.
              
              For example, to send a single, empty, <c>MyRequestProto</c>, call
              this op with <c>request = ""</c>.  To send 5 **parallel** empty requests,
              call this op with <c>request = ["", "", "", "", ""]</c>.
              
              More generally, one can create a batch of <c>MyRequestProto</c> serialized protos
              from regular batched tensors using the <c>encode_proto</c> op, and convert
              the response <c>MyResponseProto</c> serialized protos to batched tensors
              using the <c>decode_proto</c> op.
              
              **NOTE** Working with serialized proto strings is faster than instantiating
              actual proto objects in memory, so no performance degradation is expected
              compared to writing custom kernels for this workflow.
              
              If the connection fails or the remote worker returns an error
              status, the op reraises this exception locally.
              
              See the <c>TryRpc</c> op if you prefer to handle RPC failures manually in the graph.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rsqrt">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Rsqrt (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Rsqrt(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Rsqrt'.
            </param>
        <summary>
              Computes reciprocal of square root of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = 1 / \sqrt{x}\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RsqrtGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RsqrtGrad (TensorFlow.TFOutput y, TensorFlow.TFOutput dy, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RsqrtGrad(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput dy, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="dy">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RsqrtGrad'.
            </param>
        <summary>
              Computes the gradient for the rsqrt of <c>x</c> wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, <c>grad = dy * -0.5 * y^3</c>, where <c>y = rsqrt(x)</c>, and <c>dy</c>
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleDistortedBoundingBox">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SampleDistortedBoundingBox (TensorFlow.TFOutput image_size, TensorFlow.TFOutput bounding_boxes, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, Nullable&lt;float&gt; min_object_covered = null, float[] aspect_ratio_range = null, float[] area_range = null, Nullable&lt;long&gt; max_attempts = null, Nullable&lt;bool&gt; use_image_if_no_bounding_boxes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SampleDistortedBoundingBox(valuetype TensorFlow.TFOutput image_size, valuetype TensorFlow.TFOutput bounding_boxes, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, valuetype System.Nullable`1&lt;float32&gt; min_object_covered, float32[] aspect_ratio_range, float32[] area_range, valuetype System.Nullable`1&lt;int64&gt; max_attempts, valuetype System.Nullable`1&lt;bool&gt; use_image_if_no_bounding_boxes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="bounding_boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="min_object_covered" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="aspect_ratio_range" Type="System.Single[]" />
        <Parameter Name="area_range" Type="System.Single[]" />
        <Parameter Name="max_attempts" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="use_image_if_no_bounding_boxes" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image_size">
              1-D, containing <c>[height, width, channels]</c>.
            </param>
        <param name="bounding_boxes">
              3-D with shape <c>[batch, N, 4]</c> describing the N bounding boxes
              associated with the image.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to non-zero, the random number
              generator is seeded by the given <c>seed</c>.  Otherwise, it is seeded by a random
              seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="min_object_covered">
              Optional argument
              The cropped area of the image must contain at least this
              fraction of any bounding box supplied. The value of this parameter should be
              non-negative. In the case of 0, the cropped area does not need to overlap
              any of the bounding boxes supplied.
            </param>
        <param name="aspect_ratio_range">
              Optional argument
              The cropped area of the image must have an aspect ratio =
              width / height within this range.
            </param>
        <param name="area_range">
              Optional argument
              The cropped area of the image must contain a fraction of the
              supplied image within this range.
            </param>
        <param name="max_attempts">
              Optional argument
              Number of attempts at generating a cropped region of the image
              of the specified constraints. After <c>max_attempts</c> failures, return the entire
              image.
            </param>
        <param name="use_image_if_no_bounding_boxes">
              Optional argument
              Controls behavior if no bounding boxes supplied.
              If true, assume an implicit bounding box covering the whole input. If false,
              raise an error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SampleDistortedBoundingBox'.
            </param>
        <summary>
              Generate a single randomly distorted bounding box for an image.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              begin: 1-D, containing <c>[offset_height, offset_width, 0]</c>. Provide as input to
              <c>tf.slice</c>.
              size: 1-D, containing <c>[target_height, target_width, -1]</c>. Provide as input to
              <c>tf.slice</c>.
              bboxes: 3-D with shape <c>[1, 1, 4]</c> containing the distorted bounding box.
              Provide as input to <c>tf.image.draw_bounding_boxes</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Bounding box annotations are often supplied in addition to ground-truth labels
              in image recognition or object localization tasks. A common technique for
              training such a system is to randomly distort an image while preserving
              its content, i.e. *data augmentation*. This Op outputs a randomly distorted
              localization of an object, i.e. bounding box, given an <c>image_size</c>,
              <c>bounding_boxes</c> and a series of constraints.
              
              The output of this Op is a single bounding box that may be used to crop the
              original image. The output is returned as 3 tensors: <c>begin</c>, <c>size</c> and
              <c>bboxes</c>. The first 2 tensors can be fed directly into <c>tf.slice</c> to crop the
              image. The latter may be supplied to <c>tf.image.draw_bounding_boxes</c> to visualize
              what the bounding box looks like.
              
              Bounding boxes are supplied and returned as <c>[y_min, x_min, y_max, x_max]</c>. The
              bounding box coordinates are floats in <c>[0.0, 1.0]</c> relative to the width and
              height of the underlying image.
              
              For example,
              
               <code>
              # Generate a single distorted bounding box.
              begin, size, bbox_for_draw = tf.image.sample_distorted_bounding_box(
              tf.shape(image),
              bounding_boxes=bounding_boxes)
              
              # Draw the bounding box in an image summary.
              image_with_box = tf.image.draw_bounding_boxes(tf.expand_dims(image, 0),
              bbox_for_draw)
              tf.summary.image('images_with_box', image_with_box)
              
              # Employ the bounding box to distort the image.
              distorted_image = tf.slice(image, begin, size)
               </code>
              
              Note that if no bounding box information is available, setting
              <c>use_image_if_no_bounding_boxes = true</c> will assume there is a single implicit
              bounding box covering the whole image. If <c>use_image_if_no_bounding_boxes</c> is
              false and no bounding boxes are supplied, an error is raised.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleDistortedBoundingBoxV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SampleDistortedBoundingBoxV2 (TensorFlow.TFOutput image_size, TensorFlow.TFOutput bounding_boxes, TensorFlow.TFOutput min_object_covered, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, float[] aspect_ratio_range = null, float[] area_range = null, Nullable&lt;long&gt; max_attempts = null, Nullable&lt;bool&gt; use_image_if_no_bounding_boxes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SampleDistortedBoundingBoxV2(valuetype TensorFlow.TFOutput image_size, valuetype TensorFlow.TFOutput bounding_boxes, valuetype TensorFlow.TFOutput min_object_covered, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, float32[] aspect_ratio_range, float32[] area_range, valuetype System.Nullable`1&lt;int64&gt; max_attempts, valuetype System.Nullable`1&lt;bool&gt; use_image_if_no_bounding_boxes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="bounding_boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_object_covered" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="aspect_ratio_range" Type="System.Single[]" />
        <Parameter Name="area_range" Type="System.Single[]" />
        <Parameter Name="max_attempts" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="use_image_if_no_bounding_boxes" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image_size">
              1-D, containing <c>[height, width, channels]</c>.
            </param>
        <param name="bounding_boxes">
              3-D with shape <c>[batch, N, 4]</c> describing the N bounding boxes
              associated with the image.
            </param>
        <param name="min_object_covered">
              The cropped area of the image must contain at least this
              fraction of any bounding box supplied. The value of this parameter should be
              non-negative. In the case of 0, the cropped area does not need to overlap
              any of the bounding boxes supplied.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to non-zero, the random number
              generator is seeded by the given <c>seed</c>.  Otherwise, it is seeded by a random
              seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="aspect_ratio_range">
              Optional argument
              The cropped area of the image must have an aspect ratio =
              width / height within this range.
            </param>
        <param name="area_range">
              Optional argument
              The cropped area of the image must contain a fraction of the
              supplied image within this range.
            </param>
        <param name="max_attempts">
              Optional argument
              Number of attempts at generating a cropped region of the image
              of the specified constraints. After <c>max_attempts</c> failures, return the entire
              image.
            </param>
        <param name="use_image_if_no_bounding_boxes">
              Optional argument
              Controls behavior if no bounding boxes supplied.
              If true, assume an implicit bounding box covering the whole input. If false,
              raise an error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SampleDistortedBoundingBoxV2'.
            </param>
        <summary>
              Generate a single randomly distorted bounding box for an image.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              begin: 1-D, containing <c>[offset_height, offset_width, 0]</c>. Provide as input to
              <c>tf.slice</c>.
              size: 1-D, containing <c>[target_height, target_width, -1]</c>. Provide as input to
              <c>tf.slice</c>.
              bboxes: 3-D with shape <c>[1, 1, 4]</c> containing the distorted bounding box.
              Provide as input to <c>tf.image.draw_bounding_boxes</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Bounding box annotations are often supplied in addition to ground-truth labels
              in image recognition or object localization tasks. A common technique for
              training such a system is to randomly distort an image while preserving
              its content, i.e. *data augmentation*. This Op outputs a randomly distorted
              localization of an object, i.e. bounding box, given an <c>image_size</c>,
              <c>bounding_boxes</c> and a series of constraints.
              
              The output of this Op is a single bounding box that may be used to crop the
              original image. The output is returned as 3 tensors: <c>begin</c>, <c>size</c> and
              <c>bboxes</c>. The first 2 tensors can be fed directly into <c>tf.slice</c> to crop the
              image. The latter may be supplied to <c>tf.image.draw_bounding_boxes</c> to visualize
              what the bounding box looks like.
              
              Bounding boxes are supplied and returned as <c>[y_min, x_min, y_max, x_max]</c>. The
              bounding box coordinates are floats in <c>[0.0, 1.0]</c> relative to the width and
              height of the underlying image.
              
              For example,
              
               <code>
              # Generate a single distorted bounding box.
              begin, size, bbox_for_draw = tf.image.sample_distorted_bounding_box(
              tf.shape(image),
              bounding_boxes=bounding_boxes)
              
              # Draw the bounding box in an image summary.
              image_with_box = tf.image.draw_bounding_boxes(tf.expand_dims(image, 0),
              bbox_for_draw)
              tf.summary.image('images_with_box', image_with_box)
              
              # Employ the bounding box to distort the image.
              distorted_image = tf.slice(image, begin, size)
               </code>
              
              Note that if no bounding box information is available, setting
              <c>use_image_if_no_bounding_boxes = true</c> will assume there is a single implicit
              bounding box covering the whole image. If <c>use_image_if_no_bounding_boxes</c> is
              false and no bounding boxes are supplied, an error is raised.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Save (TensorFlow.TFOutput filename, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput[] data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Save(valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput[] data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              Must have a single element. The name of the file to which we write
              the tensor.
            </param>
        <param name="tensor_names">
              Shape <c>[N]</c>. The names of the tensors to be saved.
            </param>
        <param name="data">
          <c>N</c> tensors to save.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Save'.
            </param>
        <summary>
              Saves the input tensors to disk.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The size of <c>tensor_names</c> must match the number of tensors in <c>data</c>. <c>data[i]</c>
              is written to <c>filename</c> with name <c>tensor_names[i]</c>.
              
              See also <c>SaveSlices</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveSlices">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation SaveSlices (TensorFlow.TFOutput filename, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shapes_and_slices, TensorFlow.TFOutput[] data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation SaveSlices(valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput shapes_and_slices, valuetype TensorFlow.TFOutput[] data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="shapes_and_slices" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              Must have a single element. The name of the file to which we write the
              tensor.
            </param>
        <param name="tensor_names">
              Shape <c>[N]</c>. The names of the tensors to be saved.
            </param>
        <param name="shapes_and_slices">
              Shape <c>[N]</c>.  The shapes and slice specifications to use when
              saving the tensors.
            </param>
        <param name="data">
          <c>N</c> tensors to save.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SaveSlices'.
            </param>
        <summary>
              Saves input tensors slices to disk.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This is like <c>Save</c> except that tensors can be listed in the saved file as being
              a slice of a larger tensor.  <c>shapes_and_slices</c> specifies the shape of the
              larger tensor and the slice that this tensor covers. <c>shapes_and_slices</c> must
              have as many elements as <c>tensor_names</c>.
              
              Elements of the <c>shapes_and_slices</c> input must either be:
              
              *  The empty string, in which case the corresponding tensor is
              saved normally.
              *  A string of the form <c>dim0 dim1 ... dimN-1 slice-spec</c> where the
              <c>dimI</c> are the dimensions of the larger tensor and <c>slice-spec</c>
              specifies what part is covered by the tensor to save.
              
              <c>slice-spec</c> itself is a <c>:</c>-separated list: <c>slice0:slice1:...:sliceN-1</c>
              where each <c>sliceI</c> is either:
              
              *  The string <c>-</c> meaning that the slice covers all indices of this dimension
              *  <c>start,length</c> where <c>start</c> and <c>length</c> are integers.  In that
              case the slice covers <c>length</c> indices starting at <c>start</c>.
              
              See also <c>Save</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation SaveV2 (TensorFlow.TFOutput prefix, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shape_and_slices, TensorFlow.TFOutput[] tensors, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation SaveV2(valuetype TensorFlow.TFOutput prefix, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput shape_and_slices, valuetype TensorFlow.TFOutput[] tensors, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_and_slices" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensors" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
              Must have a single element. The prefix of the V2 checkpoint to which we
              write the tensors.
            </param>
        <param name="tensor_names">
              shape {N}. The names of the tensors to be saved.
            </param>
        <param name="shape_and_slices">
              shape {N}.  The slice specs of the tensors to be saved.
              Empty strings indicate that they are non-partitioned tensors.
            </param>
        <param name="tensors">
          <c>N</c> tensors to save.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SaveV2'.
            </param>
        <summary>
              Saves tensors in V2 checkpoint format.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              By default, saves the named tensors in full.  If the caller wishes to save
              specific slices of full tensors, "shape_and_slices" should be non-empty strings
              and correspondingly well-formed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScalarSummary (TensorFlow.TFOutput tags, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScalarSummary(valuetype TensorFlow.TFOutput tags, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tags">To be added.</param>
        <param name="values">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterAdd (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterAdd(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to add to <c>ref</c>.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the addition will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterAdd'.
            </param>
        <summary>
              Adds sparse updates to a variable reference.
            </summary>
        <returns>
              = Same as <c>ref</c>.  Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] += updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] += updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] += updates[i, ..., j, ...]
              
              This operation outputs <c>ref</c> after the update is done.
              This makes it easier to chain operations that need to use the reset value.
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions add.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterAdd.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterDiv (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterDiv(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of values that <c>ref</c> is divided by.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the operation will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterDiv'.
            </param>
        <summary>
              Divides a variable reference by sparse updates.
            </summary>
        <returns>
              = Same as <c>ref</c>.  Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes
              
               <code>
              # Scalar indices
              ref[indices, ...] /= updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] /= updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] /= updates[i, ..., j, ...]
               </code>
              
              This operation outputs <c>ref</c> after the update is done.
              This makes it easier to chain operations that need to use the reset value.
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions divide.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterMax (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterMax(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to reduce into <c>ref</c>.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the update will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterMax'.
            </param>
        <summary>
              Reduces sparse updates into a variable reference using the <c>max</c> operation.
            </summary>
        <returns>
              = Same as <c>ref</c>.  Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] = max(ref[indices, ...], updates[...])
              
              # Vector indices (for each i)
              ref[indices[i], ...] = max(ref[indices[i], ...], updates[i, ...])
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] = max(ref[indices[i, ..., j], ...], updates[i, ..., j, ...])
              
              This operation outputs <c>ref</c> after the update is done.
              This makes it easier to chain operations that need to use the reset value.
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions combine.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterAdd.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterMin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterMin (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterMin(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to reduce into <c>ref</c>.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the update will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterMin'.
            </param>
        <summary>
              Reduces sparse updates into a variable reference using the <c>min</c> operation.
            </summary>
        <returns>
              = Same as <c>ref</c>.  Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes
              
              # Scalar indices
              ref[indices, ...] = min(ref[indices, ...], updates[...])
              
              # Vector indices (for each i)
              ref[indices[i], ...] = min(ref[indices[i], ...], updates[i, ...])
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] = min(ref[indices[i, ..., j], ...], updates[i, ..., j, ...])
              
              This operation outputs <c>ref</c> after the update is done.
              This makes it easier to chain operations that need to use the reset value.
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions combine.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterAdd.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterMul (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterMul(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to multiply to <c>ref</c>.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the operation will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterMul'.
            </param>
        <summary>
              Multiplies sparse updates into a variable reference.
            </summary>
        <returns>
              = Same as <c>ref</c>.  Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes
              
               <code>
              # Scalar indices
              ref[indices, ...] *= updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] *= updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] *= updates[i, ..., j, ...]
               </code>
              
              This operation outputs <c>ref</c> after the update is done.
              This makes it easier to chain operations that need to use the reset value.
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their contributions multiply.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterNd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterNd (TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, TensorFlow.TFOutput shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterNd(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype TensorFlow.TFOutput shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              Index tensor.
            </param>
        <param name="updates">
              Updates to scatter into output.
            </param>
        <param name="shape">
              1-D. The shape of the resulting tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterNd'.
            </param>
        <summary>
              Scatter <c>updates</c> into a new tensor according to <c>indices</c>.
            </summary>
        <returns>
              A new tensor with the given shape and updates applied according
              to the indices.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Creates a new tensor by applying sparse <c>updates</c> to individual values or
              slices within a tensor (initially zero for numeric, empty for string) of
              the given <c>shape</c> according to indices.  This operator is the inverse of the
              <c>tf.gather_nd</c> operator which extracts values or slices from a given tensor.
              
              This operation is similar to tensor_scatter_add, except that the tensor is
              zero-initialized. Calling <c>tf.scatter_nd(indices, values, shape)</c> is identical
              to <c>tensor_scatter_add(tf.zeros(shape, values.dtype), indices, values)</c>
              
              If <c>indices</c> contains duplicates, then their updates are accumulated (summed).
              
              **WARNING**: The order in which updates are applied is nondeterministic, so the
              output will be nondeterministic if <c>indices</c> contains duplicates -- because
              of some numerical approximation issues, numbers summed in different order
              may yield different results.
              
              <c>indices</c> is an integer tensor containing indices into a new tensor of shape
              <c>shape</c>.  The last dimension of <c>indices</c> can be at most the rank of <c>shape</c>:
              
              indices.shape[-1] &amp;lt;= shape.rank
              
              The last dimension of <c>indices</c> corresponds to indices into elements
              (if <c>indices.shape[-1] = shape.rank</c>) or slices
              (if <c>indices.shape[-1] &amp;lt; shape.rank</c>) along dimension <c>indices.shape[-1]</c> of
              <c>shape</c>.  <c>updates</c> is a tensor with shape
              
              indices.shape[:-1] + shape[indices.shape[-1]:]
              
              The simplest form of scatter is to insert individual elements in a tensor by
              index. For example, say we want to insert 4 scattered elements in a rank-1
              tensor with 8 elements.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterNd1.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
              
              In Python, this scatter operation would look like this:
              
               <code>
              indices = tf.constant([[4], [3], [1], [7]])
              updates = tf.constant([9, 10, 11, 12])
              shape = tf.constant([8])
              scatter = tf.scatter_nd(indices, updates, shape)
              with tf.Session() as sess:
              print(sess.run(scatter))
               </code>
              
              The resulting tensor would look like this:
              
              [0, 11, 0, 10, 9, 0, 0, 12]
              
              We can also, insert entire slices of a higher rank tensor all at once. For
              example, if we wanted to insert two slices in the first dimension of a
              rank-3 tensor with two matrices of new values.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterNd2.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
              
              In Python, this scatter operation would look like this:
              
               <code>
              indices = tf.constant([[0], [2]])
              updates = tf.constant([[[5, 5, 5, 5], [6, 6, 6, 6],
              [7, 7, 7, 7], [8, 8, 8, 8]],
              [[5, 5, 5, 5], [6, 6, 6, 6],
              [7, 7, 7, 7], [8, 8, 8, 8]]])
              shape = tf.constant([4, 4, 4])
              scatter = tf.scatter_nd(indices, updates, shape)
              with tf.Session() as sess:
              print(sess.run(scatter))
               </code>
              
              The resulting tensor would look like this:
              
              [[[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],
              [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
              [[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],
              [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]
              
              Note that on CPU, if an out of bound index is found, an error is returned.
              On GPU, if an out of bound index is found, the index is ignored.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterNdAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterNdAdd (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterNdAdd(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              A mutable Tensor. Should be from a Variable node.
            </param>
        <param name="indices">
              A Tensor. Must be one of the following types: int32, int64.
              A tensor of indices into ref.
            </param>
        <param name="updates">
              A Tensor. Must have the same type as ref. A tensor of updated values
              to add to ref.
            </param>
        <param name="use_locking">
              Optional argument
              An optional bool. Defaults to True. If True, the assignment will
              be protected by a lock; otherwise the behavior is undefined,
              but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterNdAdd'.
            </param>
        <summary>
              Applies sparse addition between <c>updates</c> and individual values or slices
            </summary>
        <returns>
              Same as ref. Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              within a given variable according to <c>indices</c>.
              
              <c>ref</c> is a <c>Tensor</c> with rank <c>P</c> and <c>indices</c> is a <c>Tensor</c> of rank <c>Q</c>.
              
              <c>indices</c> must be integer tensor, containing indices into <c>ref</c>.
              It must be shape <c>\\([d_0, ..., d_{Q-2}, K]\\)</c> where <c>0 &amp;lt; K &amp;lt;= P</c>.
              
              The innermost dimension of <c>indices</c> (with length <c>K</c>) corresponds to
              indices into elements (if <c>K = P</c>) or slices (if <c>K &amp;lt; P</c>) along the <c>K</c>th
              dimension of <c>ref</c>.
              
              <c>updates</c> is <c>Tensor</c> of rank <c>Q-1+P-K</c> with shape:
              
              $$[d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].$$
              
              For example, say we want to add 4 scattered elements to a rank-1 tensor to 8
              elements. In Python, that addition would look like this:
              
              ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8])
              indices = tf.constant([[4], [3], [1], [7]])
              updates = tf.constant([9, 10, 11, 12])
              add = tf.scatter_nd_add(ref, indices, updates)
              with tf.Session() as sess:
              print sess.run(add)
              
              The resulting update to ref would look like this:
              
              [1, 13, 3, 14, 14, 6, 7, 20]
              
              See <c>tf.scatter_nd</c> for more details about how to make updates to
              slices.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterNdNonAliasingAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterNdNonAliasingAdd (TensorFlow.TFOutput input, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterNdNonAliasingAdd(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A Tensor.
            </param>
        <param name="indices">
              A Tensor. Must be one of the following types: <c>int32</c>, <c>int64</c>.
              A tensor of indices into <c>input</c>.
            </param>
        <param name="updates">
              A Tensor. Must have the same type as ref. A tensor of updated values
              to add to <c>input</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterNdNonAliasingAdd'.
            </param>
        <summary>
              Applies sparse addition to <c>input</c> using individual values or slices
            </summary>
        <returns>
              A <c>Tensor</c> with the same shape as <c>input</c>, containing values of <c>input</c>
              updated with <c>updates</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              from <c>updates</c> according to indices <c>indices</c>.  The updates are non-aliasing:
              <c>input</c> is only modified in-place if no other operations will use it.
              Otherwise, a copy of <c>input</c> is made.  This operation has a gradient with
              respect to both <c>input</c> and <c>updates</c>.
              
              <c>input</c> is a <c>Tensor</c> with rank <c>P</c> and <c>indices</c> is a <c>Tensor</c> of rank <c>Q</c>.
              
              <c>indices</c> must be integer tensor, containing indices into <c>input</c>.
              It must be shape \\([d_0, ..., d_{Q-2}, K]\\) where <c>0 &amp;lt; K &amp;lt;= P</c>.
              
              The innermost dimension of <c>indices</c> (with length <c>K</c>) corresponds to
              indices into elements (if <c>K = P</c>) or <c>(P-K)</c>-dimensional slices
              (if <c>K &amp;lt; P</c>) along the <c>K</c>th dimension of <c>input</c>.
              
              <c>updates</c> is <c>Tensor</c> of rank <c>Q-1+P-K</c> with shape:
              
              $$[d_0, ..., d_{Q-2}, input.shape[K], ..., input.shape[P-1]].$$
              
              For example, say we want to add 4 scattered elements to a rank-1 tensor to 8
              elements. In Python, that addition would look like this:
              
              input = tf.constant([1, 2, 3, 4, 5, 6, 7, 8])
              indices = tf.constant([[4], [3], [1], [7]])
              updates = tf.constant([9, 10, 11, 12])
              output = tf.scatter_nd_non_aliasing_add(input, indices, updates)
              with tf.Session() as sess:
              print(sess.run(output))
              
              The resulting value <c>output</c> would look like this:
              
              [1, 13, 3, 14, 14, 6, 7, 20]
              
              See <c>tf.scatter_nd</c> for more details about how to make updates to slices.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterNdSub">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterNdSub (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterNdSub(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              A mutable Tensor. Should be from a Variable node.
            </param>
        <param name="indices">
              A Tensor. Must be one of the following types: int32, int64.
              A tensor of indices into ref.
            </param>
        <param name="updates">
              A Tensor. Must have the same type as ref. A tensor of updated values
              to subtract from ref.
            </param>
        <param name="use_locking">
              Optional argument
              An optional bool. Defaults to True. If True, the assignment will
              be protected by a lock; otherwise the behavior is undefined,
              but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterNdSub'.
            </param>
        <summary>
              Applies sparse subtraction between <c>updates</c> and individual values or slices
            </summary>
        <returns>
              Same as ref. Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              within a given variable according to <c>indices</c>.
              
              <c>ref</c> is a <c>Tensor</c> with rank <c>P</c> and <c>indices</c> is a <c>Tensor</c> of rank <c>Q</c>.
              
              <c>indices</c> must be integer tensor, containing indices into <c>ref</c>.
              It must be shape \\([d_0, ..., d_{Q-2}, K]\\) where <c>0 &amp;lt; K &amp;lt;= P</c>.
              
              The innermost dimension of <c>indices</c> (with length <c>K</c>) corresponds to
              indices into elements (if <c>K = P</c>) or slices (if <c>K &amp;lt; P</c>) along the <c>K</c>th
              dimension of <c>ref</c>.
              
              <c>updates</c> is <c>Tensor</c> of rank <c>Q-1+P-K</c> with shape:
              
              $$[d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].$$
              
              For example, say we want to subtract 4 scattered elements from a rank-1 tensor
              with 8 elements. In Python, that subtraction would look like this:
              
              ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8])
              indices = tf.constant([[4], [3], [1], [7]])
              updates = tf.constant([9, 10, 11, 12])
              sub = tf.scatter_nd_sub(ref, indices, updates)
              with tf.Session() as sess:
              print sess.run(sub)
              
              The resulting update to ref would look like this:
              
              [1, -9, 3, -6, -4, 6, 7, -4]
              
              See <c>tf.scatter_nd</c> for more details about how to make updates to
              slices.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterNdUpdate">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterNdUpdate (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterNdUpdate(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              A mutable Tensor. Should be from a Variable node.
            </param>
        <param name="indices">
              A Tensor. Must be one of the following types: int32, int64.
              A tensor of indices into ref.
            </param>
        <param name="updates">
              A Tensor. Must have the same type as ref. A tensor of updated
              values to add to ref.
            </param>
        <param name="use_locking">
              Optional argument
              An optional bool. Defaults to True. If True, the assignment will
              be protected by a lock; otherwise the behavior is undefined,
              but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterNdUpdate'.
            </param>
        <summary>
              Applies sparse <c>updates</c> to individual values or slices within a given
            </summary>
        <returns>
              Same as ref. Returned as a convenience for operations that want to
              use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              variable according to <c>indices</c>.
              
              <c>ref</c> is a <c>Tensor</c> with rank <c>P</c> and <c>indices</c> is a <c>Tensor</c> of rank <c>Q</c>.
              
              <c>indices</c> must be integer tensor, containing indices into <c>ref</c>.
              It must be shape \\([d_0, ..., d_{Q-2}, K]\\) where <c>0 &amp;lt; K &amp;lt;= P</c>.
              
              The innermost dimension of <c>indices</c> (with length <c>K</c>) corresponds to
              indices into elements (if <c>K = P</c>) or slices (if <c>K &amp;lt; P</c>) along the <c>K</c>th
              dimension of <c>ref</c>.
              
              <c>updates</c> is <c>Tensor</c> of rank <c>Q-1+P-K</c> with shape:
              
              $$[d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].$$
              
              For example, say we want to update 4 scattered elements to a rank-1 tensor to
              8 elements. In Python, that update would look like this:
              
               <code>
              ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8])
              indices = tf.constant([[4], [3], [1] ,[7]])
              updates = tf.constant([9, 10, 11, 12])
              update = tf.scatter_nd_update(ref, indices, updates)
              with tf.Session() as sess:
              print sess.run(update)
               </code>
              
              The resulting update to ref would look like this:
              
              [1, 11, 3, 10, 9, 6, 7, 12]
              
              See <c>tf.scatter_nd</c> for more details about how to make updates to
              slices.
              
              See also <c>tf.scatter_update</c> and <c>tf.batch_scatter_update</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterSub">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterSub (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterSub(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to subtract from <c>ref</c>.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterSub'.
            </param>
        <summary>
              Subtracts sparse updates to a variable reference.
            </summary>
        <returns>
              = Same as <c>ref</c>.  Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <code>
              # Scalar indices
              ref[indices, ...] -= updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] -= updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] -= updates[i, ..., j, ...]
               </code>
              
              This operation outputs <c>ref</c> after the update is done.
              This makes it easier to chain operations that need to use the reset value.
              
              Duplicate entries are handled correctly: if multiple <c>indices</c> reference
              the same location, their (negated) contributions add.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterSub.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterUpdate">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterUpdate (TensorFlow.TFOutput reference, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterUpdate(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
              Should be from a <c>Variable</c> node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of <c>ref</c>.
            </param>
        <param name="updates">
              A tensor of updated values to store in <c>ref</c>.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the assignment will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterUpdate'.
            </param>
        <summary>
              Applies sparse updates to a variable reference.
            </summary>
        <returns>
              = Same as <c>ref</c>.  Returned as a convenience for operations that want
              to use the updated values after the update is done.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes
              
               <code>
              # Scalar indices
              ref[indices, ...] = updates[...]
              
              # Vector indices (for each i)
              ref[indices[i], ...] = updates[i, ...]
              
              # High rank indices (for each i, ..., j)
              ref[indices[i, ..., j], ...] = updates[i, ..., j, ...]
               </code>
              
              This operation outputs <c>ref</c> after the update is done.
              This makes it easier to chain operations that need to use the reset value.
              
              If values in <c>ref</c> is to be updated more than once, because there are
              duplicate entries in <c>indices</c>, the order at which the updates happen
              for each value is undefined.
              
              Requires <c>updates.shape = indices.shape + ref.shape[1:]</c> or <c>updates.shape = []</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterUpdate.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
              
              See also <c>tf.batch_scatter_update</c> and <c>tf.scatter_nd_update</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SdcaFprint">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SdcaFprint (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SdcaFprint(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              vector of strings to compute fingerprints on.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SdcaFprint'.
            </param>
        <summary>
              Computes fingerprints of the input strings.
            </summary>
        <returns>
              a (N,2) shaped matrix where N is the number of elements in the input
              vector. Each row contains the low and high parts of the fingerprint.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SdcaOptimizer">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; SdcaOptimizer (TensorFlow.TFOutput[] sparse_example_indices, TensorFlow.TFOutput[] sparse_feature_indices, TensorFlow.TFOutput[] sparse_feature_values, TensorFlow.TFOutput[] dense_features, TensorFlow.TFOutput example_weights, TensorFlow.TFOutput example_labels, TensorFlow.TFOutput[] sparse_indices, TensorFlow.TFOutput[] sparse_weights, TensorFlow.TFOutput[] dense_weights, TensorFlow.TFOutput example_state_data, string loss_type, float l1, float l2, long num_loss_partitions, long num_inner_iterations, Nullable&lt;bool&gt; adaptative = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; SdcaOptimizer(valuetype TensorFlow.TFOutput[] sparse_example_indices, valuetype TensorFlow.TFOutput[] sparse_feature_indices, valuetype TensorFlow.TFOutput[] sparse_feature_values, valuetype TensorFlow.TFOutput[] dense_features, valuetype TensorFlow.TFOutput example_weights, valuetype TensorFlow.TFOutput example_labels, valuetype TensorFlow.TFOutput[] sparse_indices, valuetype TensorFlow.TFOutput[] sparse_weights, valuetype TensorFlow.TFOutput[] dense_weights, valuetype TensorFlow.TFOutput example_state_data, string loss_type, float32 l1, float32 l2, int64 num_loss_partitions, int64 num_inner_iterations, valuetype System.Nullable`1&lt;bool&gt; adaptative, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_example_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_feature_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_feature_values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_features" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="example_weights" Type="TensorFlow.TFOutput" />
        <Parameter Name="example_labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="example_state_data" Type="TensorFlow.TFOutput" />
        <Parameter Name="loss_type" Type="System.String" />
        <Parameter Name="l1" Type="System.Single" />
        <Parameter Name="l2" Type="System.Single" />
        <Parameter Name="num_loss_partitions" Type="System.Int64" />
        <Parameter Name="num_inner_iterations" Type="System.Int64" />
        <Parameter Name="adaptative" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_example_indices">
              a list of vectors which contain example indices.
            </param>
        <param name="sparse_feature_indices">
              a list of vectors which contain feature indices.
            </param>
        <param name="sparse_feature_values">
              a list of vectors which contains feature value
              associated with each feature group.
            </param>
        <param name="dense_features">
              a list of matrices which contains the dense feature values.
            </param>
        <param name="example_weights">
              a vector which contains the weight associated with each
              example.
            </param>
        <param name="example_labels">
              a vector which contains the label/target associated with each
              example.
            </param>
        <param name="sparse_indices">
              a list of vectors where each value is the indices which has
              corresponding weights in sparse_weights. This field maybe omitted for the
              dense approach.
            </param>
        <param name="sparse_weights">
              a list of vectors where each value is the weight associated with
              a sparse feature group.
            </param>
        <param name="dense_weights">
              a list of vectors where the values are the weights associated
              with a dense feature group.
            </param>
        <param name="example_state_data">
              a list of vectors containing the example state data.
            </param>
        <param name="loss_type">
              Type of the primal loss. Currently SdcaSolver supports logistic,
              squared and hinge losses.
            </param>
        <param name="l1">
              Symmetric l1 regularization strength.
            </param>
        <param name="l2">
              Symmetric l2 regularization strength.
            </param>
        <param name="num_loss_partitions">
              Number of partitions of the global loss function.
            </param>
        <param name="num_inner_iterations">
              Number of iterations per mini-batch.
            </param>
        <param name="adaptative">
              Optional argument
              Whether to use Adaptive SDCA for the inner loop.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SdcaOptimizer'.
            </param>
        <summary>
              Distributed version of Stochastic Dual Coordinate Ascent (SDCA) optimizer for
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              out_example_state_data: a list of vectors containing the updated example state
              data.
              out_delta_sparse_weights: a list of vectors where each value is the delta
              weights associated with a sparse feature group.
              out_delta_dense_weights: a list of vectors where the values are the delta
              weights associated with a dense feature group.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              linear models with L1 + L2 regularization. As global optimization objective is
              strongly-convex, the optimizer optimizes the dual objective at each step. The
              optimizer applies each update one example at a time. Examples are sampled
              uniformly, and the optimizer is learning rate free and enjoys linear convergence
              rate.
              
              [Proximal Stochastic Dual Coordinate Ascent](http://arxiv.org/pdf/1211.2717v1.pdf).&amp;lt;br&amp;gt;
              Shai Shalev-Shwartz, Tong Zhang. 2012
              
              $$Loss Objective = \sum f_{i} (wx_{i}) + (l2 / 2) * |w|^2 + l1 * |w|$$
              
              [Adding vs. Averaging in Distributed Primal-Dual Optimization](http://arxiv.org/abs/1502.03508).&amp;lt;br&amp;gt;
              Chenxin Ma, Virginia Smith, Martin Jaggi, Michael I. Jordan,
              Peter Richtarik, Martin Takac. 2015
              
              [Stochastic Dual Coordinate Ascent with Adaptive Probabilities](https://arxiv.org/abs/1502.08053).&amp;lt;br&amp;gt;
              Dominik Csiba, Zheng Qu, Peter Richtarik. 2015
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SdcaShrinkL1">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation SdcaShrinkL1 (TensorFlow.TFOutput[] weights, float l1, float l2, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation SdcaShrinkL1(valuetype TensorFlow.TFOutput[] weights, float32 l1, float32 l2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="l1" Type="System.Single" />
        <Parameter Name="l2" Type="System.Single" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="weights">
              a list of vectors where each value is the weight associated with a
              feature group.
            </param>
        <param name="l1">
              Symmetric l1 regularization strength.
            </param>
        <param name="l2">
              Symmetric l2 regularization strength. Should be a positive float.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SdcaShrinkL1'.
            </param>
        <summary>
              Applies L1 regularization shrink step on the parameters.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Seed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the graph random seed, see remarks for details.
             </summary>
        <value>The seed.</value>
        <remarks>
              Operations that rely on a random seed actually derive it from two seeds:
              the graph-level and operation-level seeds.This sets the graph-level seed.
            
             Its interactions with operation-level seeds is as follows:
             1. If neither the graph-level nor the operation seed is set:
                A random seed is used for this op.
             2. If the graph-level seed is set, but the operation seed is not:
                The system deterministically picks an operation seed in conjunction
                with the graph-level seed so that it gets a unique random sequence.
             3. If the graph-level seed is not set, but the operation seed is set:
                A default graph-level seed and the specified operation seed are used to
                determine the random sequence.
             4. If both the graph-level and the operation seed are set:
                Both seeds are used in conjunction to determine the random sequence.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentMax (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentMax(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose size is equal to the size of <c>data</c>'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMax'.
            </param>
        <summary>
              Computes the maximum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Computes a tensor such that
              \\(output_i = \max_j(data_j)\\) where <c>max</c> is over <c>j</c> such
              that <c>segment_ids[j] == i</c>.
              
              If the max is empty for a given segment ID <c>i</c>, <c>output[i] = 0</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentMax.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentMean">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentMean (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentMean(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose size is equal to the size of <c>data</c>'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMean'.
            </param>
        <summary>
              Computes the mean along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Computes a tensor such that
              \\(output_i = \frac{\sum_j data_j}{N}\\) where <c>mean</c> is
              over <c>j</c> such that <c>segment_ids[j] == i</c> and <c>N</c> is the total number of
              values summed.
              
              If the mean is empty for a given segment ID <c>i</c>, <c>output[i] = 0</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentMean.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentMin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentMin (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentMin(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose size is equal to the size of <c>data</c>'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMin'.
            </param>
        <summary>
              Computes the minimum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Computes a tensor such that
              \\(output_i = \min_j(data_j)\\) where <c>min</c> is over <c>j</c> such
              that <c>segment_ids[j] == i</c>.
              
              If the min is empty for a given segment ID <c>i</c>, <c>output[i] = 0</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentMin.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentProd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentProd (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentProd(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose size is equal to the size of <c>data</c>'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentProd'.
            </param>
        <summary>
              Computes the product along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Computes a tensor such that
              \\(output_i = \prod_j data_j\\) where the product is over <c>j</c> such
              that <c>segment_ids[j] == i</c>.
              
              If the product is empty for a given segment ID <c>i</c>, <c>output[i] = 1</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentProd.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentSum(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose size is equal to the size of <c>data</c>'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentSum'.
            </param>
        <summary>
              Computes the sum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Computes a tensor such that
              \\(output_i = \sum_j data_j\\) where sum is over <c>j</c> such
              that <c>segment_ids[j] == i</c>.
              
              If the sum is empty for a given segment ID <c>i</c>, <c>output[i] = 0</c>.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentSum.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Select (TensorFlow.TFOutput condition, TensorFlow.TFOutput t, TensorFlow.TFOutput e, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Select(valuetype TensorFlow.TFOutput condition, valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput e, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="TensorFlow.TFOutput" />
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="e" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
        </param>
        <param name="t">
              = A <c>Tensor</c> which may have the same shape as <c>condition</c>.
              If <c>condition</c> is rank 1, <c>x</c> may have higher rank,
              but its first dimension must match the size of <c>condition</c>.
            </param>
        <param name="e">
              = A <c>Tensor</c> with the same type and shape as <c>x</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Select'.
            </param>
        <summary>
              Selects elements from <c>x</c> or <c>y</c>, depending on <c>condition</c>.
            </summary>
        <returns>
              = A <c>Tensor</c> with the same type and shape as <c>x</c> and <c>y</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The <c>x</c>, and <c>y</c> tensors must all have the same shape, and the
              output will also have that shape.
              
              The <c>condition</c> tensor must be a scalar if <c>x</c> and <c>y</c> are scalars.
              If <c>x</c> and <c>y</c> are vectors or higher rank, then <c>condition</c> must be either a
              scalar, a vector with size matching the first dimension of <c>x</c>, or must have
              the same shape as <c>x</c>.
              
              The <c>condition</c> tensor acts as a mask that chooses, based on the value at each
              element, whether the corresponding element / row in the output should be
              taken from <c>x</c> (if true) or <c>y</c> (if false).
              
              If <c>condition</c> is a vector and <c>x</c> and <c>y</c> are higher rank matrices, then
              it chooses which row (outer dimension) to copy from <c>x</c> and <c>y</c>.
              If <c>condition</c> has the same shape as <c>x</c> and <c>y</c>, then it chooses which
              element to copy from <c>x</c> and <c>y</c>.
              
              For example:
              
               <code>
              # 'condition' tensor is [[True,  False]
              #                        [False, True]]
              # 't' is [[1, 2],
              #         [3, 4]]
              # 'e' is [[5, 6],
              #         [7, 8]]
              select(condition, t, e)  # =&amp;gt; [[1, 6], [7, 4]]
              
              
              # 'condition' tensor is [True, False]
              # 't' is [[1, 2],
              #         [3, 4]]
              # 'e' is [[5, 6],
              #         [7, 8]]
              select(condition, t, e) ==&amp;gt; [[1, 2],
              [7, 8]]
              
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="SelfAdjointEig">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SelfAdjointEig (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SelfAdjointEig(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is <c>[..., M, M]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SelfAdjointEig'.
            </param>
        <summary>
              Computes the Eigen Decomposition of a batch of square self-adjoint matrices.
            </summary>
        <returns>
              Shape is <c>[..., M+1, M]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a tensor of shape <c>[..., M, M]</c> whose inner-most 2 dimensions
              form square matrices, with the same constraints as the single matrix
              SelfAdjointEig.
              
              The result is a [..., M+1, M] matrix with [..., 0,:] containing the
              eigenvalues, and subsequent [...,1:, :] containing the eigenvectors. The eigenvalues
              are sorted in non-decreasing order.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelfAdjointEigV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SelfAdjointEigV2 (TensorFlow.TFOutput input, Nullable&lt;bool&gt; compute_v = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SelfAdjointEigV2(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; compute_v, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="compute_v" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <c>Tensor</c> input of shape <c>[N, N]</c>.
            </param>
        <param name="compute_v">
              Optional argument
              If <c>True</c> then eigenvectors will be computed and returned in <c>v</c>.
              Otherwise, only the eigenvalues will be computed.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SelfAdjointEigV2'.
            </param>
        <summary>
              Computes the eigen decomposition of one or more square self-adjoint matrices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              e: Eigenvalues. Shape is <c>[N]</c>.
              v: Eigenvectors. Shape is <c>[N, N]</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the eigenvalues and (optionally) eigenvectors of each inner matrix in
              <c>input</c> such that <c>input[..., :, :] = v[..., :, :] * diag(e[..., :])</c>. The eigenvalues
              are sorted in non-decreasing order.
              
               <code>
              # a is a tensor.
              # e is a tensor of eigenvalues.
              # v is a tensor of eigenvectors.
              e, v = self_adjoint_eig(a)
              e = self_adjoint_eig(a, compute_v=False)
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Selu">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Selu (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Selu(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Selu'.
            </param>
        <summary>
              Computes scaled exponential linear: <c>scale * alpha * (exp(features) - 1)</c></summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              if &amp;lt; 0, <c>scale * features</c> otherwise.
              
              To be used together with
              <c>initializer = tf.variance_scaling_initializer(factor=1.0, mode='FAN_IN')</c>.
              For correct dropout, use <c>tf.contrib.nn.alpha_dropout</c>.
              
              See [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeluGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SeluGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput outputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SeluGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput outputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="outputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding Selu operation.
            </param>
        <param name="outputs">
              The outputs of the corresponding Selu operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SeluGrad'.
            </param>
        <summary>
              Computes gradients for the scaled exponential linear (Selu) operation.
            </summary>
        <returns>
              The gradients: <c>gradients * (outputs + scale * alpha)</c>
              if outputs &amp;lt; 0, <c>scale * gradients</c> otherwise.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendTPUEmbeddingGradients">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation SendTPUEmbeddingGradients (TensorFlow.TFOutput[] inputs, TensorFlow.TFOutput[] learning_rates, string config, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation SendTPUEmbeddingGradients(valuetype TensorFlow.TFOutput[] inputs, valuetype TensorFlow.TFOutput[] learning_rates, string config, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="learning_rates" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="config" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              A TensorList of gradients with which to update embedding tables.
              It contains one tensor per embedding table in the model.
            </param>
        <param name="learning_rates">
              A list of float32 scalars, one for each embedding table,
              containing the learning rates for each table when dynamic learning rate is
              enabled through the OptimizationParameters in TPUEmbeddingConfiguration.
              When the learning rate is constant, the list should be empty.
            </param>
        <param name="config">
              Serialized TPUEmbeddingConfiguration proto.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SendTPUEmbeddingGradients'.
            </param>
        <summary>
              An op that performs gradient updates of embedding tables.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The TensorList argument has the same length and shapes as the return value of
              TPUEmbeddingReceiveActivations, but contains gradients of the model's loss
              with respect to the embedding activations. The embedding tables are updated
              from these gradients via the optimizer specified in the configuration given
              to tpu.initialize_system.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeIterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SerializeIterator (TensorFlow.TFOutput resource_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SerializeIterator(valuetype TensorFlow.TFOutput resource_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource_handle">
              A handle to an iterator resource.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeIterator'.
            </param>
        <summary>
              Converts the given <c>resource_handle</c> representing an iterator to a variant tensor.
            </summary>
        <returns>
              A variant tensor storing the state of the iterator contained in the
              resource.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeManySparse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SerializeManySparse (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SerializeManySparse(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The <c>indices</c> of the minibatch <c>SparseTensor</c>.
            </param>
        <param name="sparse_values">
              1-D.  The <c>values</c> of the minibatch <c>SparseTensor</c>.
            </param>
        <param name="sparse_shape">
              1-D.  The <c>shape</c> of the minibatch <c>SparseTensor</c>.
            </param>
        <param name="out_type">
              Optional argument
              The <c>dtype</c> to use for serialization; the supported types are <c>string</c>
              (default) and <c>variant</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeManySparse'.
            </param>
        <summary>
              Serialize an <c>N</c>-minibatch <c>SparseTensor</c> into an <c>[N, 3]</c><c>Tensor</c> object.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The <c>SparseTensor</c> must have rank <c>R</c> greater than 1, and the first dimension
              is treated as the minibatch dimension.  Elements of the <c>SparseTensor</c>
              must be sorted in increasing order of this first dimension.  The serialized
              <c>SparseTensor</c> objects going into each row of <c>serialized_sparse</c> will have
              rank <c>R-1</c>.
              
              The minibatch size <c>N</c> is extracted from <c>sparse_shape[0]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeSparse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SerializeSparse (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SerializeSparse(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The <c>indices</c> of the <c>SparseTensor</c>.
            </param>
        <param name="sparse_values">
              1-D.  The <c>values</c> of the <c>SparseTensor</c>.
            </param>
        <param name="sparse_shape">
              1-D.  The <c>shape</c> of the <c>SparseTensor</c>.
            </param>
        <param name="out_type">
              Optional argument
              The <c>dtype</c> to use for serialization; the supported types are <c>string</c>
              (default) and <c>variant</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeSparse'.
            </param>
        <summary>
              Serialize a <c>SparseTensor</c> into a <c>[3]</c><c>Tensor</c> object.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SerializeTensor (TensorFlow.TFOutput tensor, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SerializeTensor(valuetype TensorFlow.TFOutput tensor, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
              A Tensor of type <c>T</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeTensor'.
            </param>
        <summary>
              Transforms a Tensor into a serialized TensorProto proto.
            </summary>
        <returns>
              A serialized TensorProto proto of the input tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SetSize (TensorFlow.TFOutput set_indices, TensorFlow.TFOutput set_values, TensorFlow.TFOutput set_shape, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SetSize(valuetype TensorFlow.TFOutput set_indices, valuetype TensorFlow.TFOutput set_values, valuetype TensorFlow.TFOutput set_shape, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set_indices">
              2D <c>Tensor</c>, indices of a <c>SparseTensor</c>.
            </param>
        <param name="set_values">
              1D <c>Tensor</c>, values of a <c>SparseTensor</c>.
            </param>
        <param name="set_shape">
              1D <c>Tensor</c>, shape of a <c>SparseTensor</c>.
            </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SetSize'.
            </param>
        <summary>
              Number of unique elements along last dimension of input <c>set</c>.
            </summary>
        <returns>
              For <c>set</c> ranked <c>n</c>, this is a <c>Tensor</c> with rank <c>n-1</c>, and the same 1st
              <c>n-1</c> dimensions as <c>set</c>. Each value is the number of unique elements in
              the corresponding <c>[0...n-1]</c> dimension of <c>set</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input <c>set</c> is a <c>SparseTensor</c> represented by <c>set_indices</c>, <c>set_values</c>,
              and <c>set_shape</c>. The last dimension contains values in a set, duplicates are
              allowed but ignored.
              
              If <c>validate_indices</c> is <c>True</c>, this op validates the order and range of <c>set</c>
              indices.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTensorShape">
      <MemberSignature Language="C#" Value="public void SetTensorShape (TensorFlow.TFOutput output, long[] dims, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTensorShape(valuetype TensorFlow.TFOutput output, int64[] dims, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="dims" Type="System.Int64[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">The tensor on which this method will operate in the graph.</param>
        <param name="dims">The tensor shape, specified as an array of dimensions.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Sets the tensor shape of the tensor referenced by <paramref name="output" /> to the shape described by <paramref name="dims" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Shape (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Shape(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Shape'.
            </param>
        <summary>
              Returns the shape of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns a 1-D integer tensor representing the shape of <c>input</c>.
              
              For example:
              
               <code>
              # 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]
              shape(t) ==&amp;gt; [2, 2, 3]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] ShapeN (TensorFlow.TFOutput[] input, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] ShapeN(valuetype TensorFlow.TFOutput[] input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShapeN'.
            </param>
        <summary>
              Returns shape of tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns N 1-D integer tensors representing shape of <c>input[i]s</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShardedFilename">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ShardedFilename (TensorFlow.TFOutput basename, TensorFlow.TFOutput shard, TensorFlow.TFOutput num_shards, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ShardedFilename(valuetype TensorFlow.TFOutput basename, valuetype TensorFlow.TFOutput shard, valuetype TensorFlow.TFOutput num_shards, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basename" Type="TensorFlow.TFOutput" />
        <Parameter Name="shard" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basename">
        </param>
        <param name="shard">
        </param>
        <param name="num_shards">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShardedFilename'.
            </param>
        <summary>
              Generate a sharded filename. The filename is printf formatted as
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              %s-%05d-of-%05d, basename, shard, num_shards.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShardedFilespec">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ShardedFilespec (TensorFlow.TFOutput basename, TensorFlow.TFOutput num_shards, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ShardedFilespec(valuetype TensorFlow.TFOutput basename, valuetype TensorFlow.TFOutput num_shards, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basename" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basename">
        </param>
        <param name="num_shards">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShardedFilespec'.
            </param>
        <summary>
              Generate a glob pattern matching all sharded file names.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShuffleAndRepeatDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ShuffleAndRepeatDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput buffer_size, TensorFlow.TFOutput seed, TensorFlow.TFOutput seed2, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ShuffleAndRepeatDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput buffer_size, valuetype TensorFlow.TFOutput seed, valuetype TensorFlow.TFOutput seed2, valuetype TensorFlow.TFOutput count, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed2" Type="TensorFlow.TFOutput" />
        <Parameter Name="count" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="buffer_size">
              The number of output elements to buffer in an iterator over
              this dataset. Compare with the <c>min_after_dequeue</c> attr when creating a
              <c>RandomShuffleQueue</c>.
            </param>
        <param name="seed">
              A scalar seed for the random number generator. If either <c>seed</c> or
              <c>seed2</c> is set to be non-zero, the random number generator is seeded
              by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              A second scalar seed to avoid seed collision.
            </param>
        <param name="count">
              A scalar representing the number of times the underlying dataset
              should be repeated. The default is <c>-1</c>, which results in infinite repetition.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShuffleAndRepeatDataset'.
            </param>
        <summary>
              Creates a dataset that shuffles and repeats elements from <c>input_dataset</c></summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              pseudorandomly.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShuffleDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ShuffleDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput buffer_size, TensorFlow.TFOutput seed, TensorFlow.TFOutput seed2, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, Nullable&lt;bool&gt; reshuffle_each_iteration = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ShuffleDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput buffer_size, valuetype TensorFlow.TFOutput seed, valuetype TensorFlow.TFOutput seed2, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, valuetype System.Nullable`1&lt;bool&gt; reshuffle_each_iteration, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed2" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="reshuffle_each_iteration" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="buffer_size">
              The number of output elements to buffer in an iterator over
              this dataset. Compare with the <c>min_after_dequeue</c> attr when creating a
              <c>RandomShuffleQueue</c>.
            </param>
        <param name="seed">
              A scalar seed for the random number generator. If either <c>seed</c> or
              <c>seed2</c> is set to be non-zero, the random number generator is seeded
              by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              A second scalar seed to avoid seed collision.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="reshuffle_each_iteration">
              Optional argument
              If true, each iterator over this dataset will be given
              a different pseudorandomly generated seed, based on a sequence seeded by the
              <c>seed</c> and <c>seed2</c> inputs. If false, each iterator will be given the same
              seed, and repeated iteration over this dataset will yield the exact same
              sequence of results.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShuffleDataset'.
            </param>
        <summary>
              Creates a dataset that shuffles elements from <c>input_dataset</c> pseudorandomly.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownDistributedTPU">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ShutdownDistributedTPU (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ShutdownDistributedTPU(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShutdownDistributedTPU'.
            </param>
        <summary>
              An op that shuts down a running distributed TPU system. The Op returns
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              an error if no system is running.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sigmoid">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sigmoid (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sigmoid(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sigmoid'.
            </param>
        <summary>
              Computes sigmoid of <c>x</c> element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, <c>y = 1 / (1 + exp(-x))</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigmoidCrossEntropyWithLogits">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SigmoidCrossEntropyWithLogits (TensorFlow.TFOutput labels, TensorFlow.TFOutput logits, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SigmoidCrossEntropyWithLogits(valuetype TensorFlow.TFOutput labels, valuetype TensorFlow.TFOutput logits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="labels">To be added.</param>
        <param name="logits">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>
              Computes sigmoid cross entropy given `logits`.
            </summary>
        <returns>To be added.</returns>
        <remarks>
               Measures the probability error in discrete classification tasks in which each
               class is independent and not mutually exclusive.For instance, one could
               perform multilabel classification where a picture can contain both an elephant
               and a dog at the same time.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigmoidGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SigmoidGrad (TensorFlow.TFOutput y, TensorFlow.TFOutput dy, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SigmoidGrad(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput dy, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="dy">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SigmoidGrad'.
            </param>
        <summary>
              Computes the gradient of the sigmoid of <c>x</c> wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, <c>grad = dy * y * (1 - y)</c>, where <c>y = sigmoid(x)</c>, and
              <c>dy</c> is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sign (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sign(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sign'.
            </param>
        <summary>
              Returns an element-wise indication of the sign of a number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>y = sign(x) = -1</c> if <c>x &amp;lt; 0</c>; 0 if <c>x == 0</c>; 1 if <c>x &amp;gt; 0</c>.
              
              For complex numbers, <c>y = sign(x) = x / |x|</c> if <c>x != 0</c>, otherwise <c>y = 0</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sin (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sin(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sin'.
            </param>
        <summary>
              Computes sin of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sinh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sinh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sinh'.
            </param>
        <summary>
              Computes hyperbolic sine of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Size (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Size(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Size'.
            </param>
        <summary>
              Returns the size of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns an integer representing the number of elements in
              <c>input</c>.
              
              For example:
              
               <code>
              # 't' is [[[1, 1,, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]]
              size(t) ==&amp;gt; 12
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SkipDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SkipDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput count, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="count" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="count">
              A scalar representing the number of elements from the <c>input_dataset</c>
              that should be skipped.  If count is -1, skips everything.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SkipDataset'.
            </param>
        <summary>
              Creates a dataset that skips <c>count</c> elements from the <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skipgram">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Skipgram (string filename, long batch_size, Nullable&lt;long&gt; window_size = null, Nullable&lt;long&gt; min_count = null, Nullable&lt;float&gt; subsample = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`7&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Skipgram(string filename, int64 batch_size, valuetype System.Nullable`1&lt;int64&gt; window_size, valuetype System.Nullable`1&lt;int64&gt; min_count, valuetype System.Nullable`1&lt;float32&gt; subsample, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="batch_size" Type="System.Int64" />
        <Parameter Name="window_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="min_count" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="subsample" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              The corpus's text file name.
            </param>
        <param name="batch_size">
              The size of produced batch.
            </param>
        <param name="window_size">
              Optional argument
              The number of words to predict to the left and right of the target.
            </param>
        <param name="min_count">
              Optional argument
              The minimum number of word occurrences for it to be included in the
              vocabulary.
            </param>
        <param name="subsample">
              Optional argument
              Threshold for word occurrence. Words that appear with higher
              frequency will be randomly down-sampled. Set to 0 to disable.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Skipgram'.
            </param>
        <summary>
              Parses a text file and creates a batch of examples.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              vocab_word: A vector of words in the corpus.
              vocab_freq: Frequencies of words. Sorted in the non-ascending order.
              words_per_epoch: Number of words per epoch in the data file.
              current_epoch: The current epoch number.
              total_words_processed: The total number of words processed so far.
              examples: A vector of word ids.
              labels: A vector of word ids.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Slice (TensorFlow.TFOutput input, TensorFlow.TFOutput begin, TensorFlow.TFOutput size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Slice(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="begin">
              begin[i] specifies the offset into the 'i'th dimension of
              'input' to slice from.
            </param>
        <param name="size">
              size[i] specifies the number of elements of the 'i'th dimension
              of 'input' to slice. If size[i] is -1, all remaining elements in dimension
              i are included in the slice (i.e. this is equivalent to setting
              size[i] = input.dim_size(i) - begin[i]).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Slice'.
            </param>
        <summary>
              Return a slice from 'input'.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output tensor is a tensor with dimensions described by 'size'
              whose values are extracted from 'input' starting at the offsets in
              'begin'.
              
              *Requirements*:
              0 &amp;lt;= begin[i] &amp;lt;= begin[i] + size[i] &amp;lt;= Di  for i in [0, n)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Snapshot (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Snapshot(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Snapshot'.
            </param>
        <summary>
              Returns a copy of the input tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Softmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Softmax (TensorFlow.TFOutput logits, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Softmax(valuetype TensorFlow.TFOutput logits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logits">
              2-D with shape <c>[batch_size, num_classes]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Softmax'.
            </param>
        <summary>
              Computes softmax activations.
            </summary>
        <returns>
              Same shape as <c>logits</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each batch <c>i</c> and class <c>j</c> we have
              
              $$softmax[i, j] = exp(logits[i, j]) / sum_j(exp(logits[i, j]))$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SoftmaxCrossEntropyWithLogits">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SoftmaxCrossEntropyWithLogits (TensorFlow.TFOutput features, TensorFlow.TFOutput labels, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SoftmaxCrossEntropyWithLogits(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput labels, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
              batch_size x num_classes matrix
            </param>
        <param name="labels">
              batch_size x num_classes matrix
              The caller must ensure that each batch of labels represents a valid
              probability distribution.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftmaxCrossEntropyWithLogits'.
            </param>
        <summary>
              Computes softmax cross entropy cost and gradients to backpropagate.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              loss: Per example loss (batch_size vector).
              backprop: backpropagated gradients (batch_size x num_classes matrix).
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Inputs are the logits, not probabilities.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Softplus">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Softplus (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Softplus(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Softplus'.
            </param>
        <summary>
              Computes softplus: <c>log(exp(features) + 1)</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoftplusGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SoftplusGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SoftplusGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding softplus operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding softplus operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftplusGrad'.
            </param>
        <summary>
              Computes softplus gradients for a softplus operation.
            </summary>
        <returns>
              The gradients: <c>gradients / (1 + exp(-features))</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Softsign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Softsign (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Softsign(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Softsign'.
            </param>
        <summary>
              Computes softsign: <c>features / (abs(features) + 1)</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoftsignGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SoftsignGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SoftsignGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding softsign operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding softsign operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftsignGrad'.
            </param>
        <summary>
              Computes softsign gradients for a softsign operation.
            </summary>
        <returns>
              The gradients: <c>gradients / (1 + abs(features)) ** 2</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpaceToBatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SpaceToBatch (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, long block_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SpaceToBatch(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, int64 block_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape <c>[batch, height, width, depth]</c>.
            </param>
        <param name="paddings">
              2-D tensor of non-negative integers with shape <c>[2, 2]</c>. It specifies
              the padding of the input with zeros across the spatial dimensions as follows:
              
              paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]
              
              The effective spatial dimensions of the zero-padded input tensor will be:
              
              height_pad = pad_top + height + pad_bottom
              width_pad = pad_left + width + pad_right
              
              The attr <c>block_size</c> must be greater than one. It indicates the block size.
              
              * Non-overlapping blocks of size <c>block_size x block size</c> in the height and
              width dimensions are rearranged into the batch dimension at each location.
              * The batch of the output tensor is <c>batch * block_size * block_size</c>.
              * Both height_pad and width_pad must be divisible by block_size.
              
              The shape of the output will be:
              
              [batch*block_size*block_size, height_pad/block_size, width_pad/block_size,
              depth]
              
              Some examples:
              
              (1) For the following input of shape <c>[1, 2, 2, 1]</c> and block_size of 2:
              
               <code>
              x = [[[[1], [2]], [[3], [4]]]]
               </code>
              
              The output tensor has shape <c>[4, 1, 1, 1]</c> and value:
              
               <code>
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
               </code>
              
              (2) For the following input of shape <c>[1, 2, 2, 3]</c> and block_size of 2:
              
               <code>
              x = [[[[1, 2, 3], [4, 5, 6]],
              [[7, 8, 9], [10, 11, 12]]]]
               </code>
              
              The output tensor has shape <c>[4, 1, 1, 3]</c> and value:
              
               <code>
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
               </code>
              
              (3) For the following input of shape <c>[1, 4, 4, 1]</c> and block_size of 2:
              
               <code>
              x = [[[[1],   [2],  [3],  [4]],
              [[5],   [6],  [7],  [8]],
              [[9],  [10], [11],  [12]],
              [[13], [14], [15],  [16]]]]
               </code>
              
              The output tensor has shape <c>[4, 2, 2, 1]</c> and value:
              
               <code>
              x = [[[[1], [3]], [[9], [11]]],
              [[[2], [4]], [[10], [12]]],
              [[[5], [7]], [[13], [15]]],
              [[[6], [8]], [[14], [16]]]]
               </code>
              
              (4) For the following input of shape <c>[2, 2, 4, 1]</c> and block_size of 2:
              
               <code>
              x = [[[[1],   [2],  [3],  [4]],
              [[5],   [6],  [7],  [8]]],
              [[[9],  [10], [11],  [12]],
              [[13], [14], [15],  [16]]]]
               </code>
              
              The output tensor has shape <c>[8, 1, 2, 1]</c> and value:
              
               <code>
              x = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],
              [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]
               </code>
              
              Among others, this operation is useful for reducing atrous convolution into
              regular convolution.
            </param>
        <param name="block_size">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToBatch'.
            </param>
        <summary>
              SpaceToBatch for 4-D tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a legacy version of the more general SpaceToBatchND.
              
              Zero-pads and then rearranges (permutes) blocks of spatial data into batch.
              More specifically, this op outputs a copy of the input tensor where values from
              the <c>height</c> and <c>width</c> dimensions are moved to the <c>batch</c> dimension. After
              the zero-padding, both <c>height</c> and <c>width</c> of the input must be divisible by the
              block size.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpaceToBatchND">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SpaceToBatchND (TensorFlow.TFOutput input, TensorFlow.TFOutput block_shape, TensorFlow.TFOutput paddings, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SpaceToBatchND(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput block_shape, valuetype TensorFlow.TFOutput paddings, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              N-D with shape <c>input_shape = [batch] + spatial_shape + remaining_shape</c>,
              where spatial_shape has <c>M</c> dimensions.
            </param>
        <param name="block_shape">
              1-D with shape <c>[M]</c>, all values must be &amp;gt;= 1.
            </param>
        <param name="paddings">
              2-D with shape <c>[M, 2]</c>, all values must be &amp;gt;= 0.
              <c>paddings[i] = [pad_start, pad_end]</c> specifies the padding for input dimension
              <c>i + 1</c>, which corresponds to spatial dimension <c>i</c>.  It is required that
              <c>block_shape[i]</c> divides <c>input_shape[i + 1] + pad_start + pad_end</c>.
              
              This operation is equivalent to the following steps:
              
              1. Zero-pad the start and end of dimensions <c>[1, ..., M]</c> of the
              input according to <c>paddings</c> to produce <c>padded</c> of shape <c>padded_shape</c>.
              
              2. Reshape <c>padded</c> to <c>reshaped_padded</c> of shape:
              
              [batch] +
              [padded_shape[1] / block_shape[0],
              block_shape[0],
              ...,
              padded_shape[M] / block_shape[M-1],
              block_shape[M-1]] +
              remaining_shape
              
              3. Permute dimensions of <c>reshaped_padded</c> to produce
              <c>permuted_reshaped_padded</c> of shape:
              
              block_shape +
              [batch] +
              [padded_shape[1] / block_shape[0],
              ...,
              padded_shape[M] / block_shape[M-1]] +
              remaining_shape
              
              4. Reshape <c>permuted_reshaped_padded</c> to flatten <c>block_shape</c> into the batch
              dimension, producing an output tensor of shape:
              
              [batch * prod(block_shape)] +
              [padded_shape[1] / block_shape[0],
              ...,
              padded_shape[M] / block_shape[M-1]] +
              remaining_shape
              
              Some examples:
              
              (1) For the following input of shape <c>[1, 2, 2, 1]</c>, <c>block_shape = [2, 2]</c>, and
              <c>paddings = [[0, 0], [0, 0]]</c>:
              
               <code>
              x = [[[[1], [2]], [[3], [4]]]]
               </code>
              
              The output tensor has shape <c>[4, 1, 1, 1]</c> and value:
              
               <code>
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
               </code>
              
              (2) For the following input of shape <c>[1, 2, 2, 3]</c>, <c>block_shape = [2, 2]</c>, and
              <c>paddings = [[0, 0], [0, 0]]</c>:
              
               <code>
              x = [[[[1, 2, 3], [4, 5, 6]],
              [[7, 8, 9], [10, 11, 12]]]]
               </code>
              
              The output tensor has shape <c>[4, 1, 1, 3]</c> and value:
              
               <code>
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
               </code>
              
              (3) For the following input of shape <c>[1, 4, 4, 1]</c>, <c>block_shape = [2, 2]</c>, and
              <c>paddings = [[0, 0], [0, 0]]</c>:
              
               <code>
              x = [[[[1],   [2],  [3],  [4]],
              [[5],   [6],  [7],  [8]],
              [[9],  [10], [11],  [12]],
              [[13], [14], [15],  [16]]]]
               </code>
              
              The output tensor has shape <c>[4, 2, 2, 1]</c> and value:
              
               <code>
              x = [[[[1], [3]], [[9], [11]]],
              [[[2], [4]], [[10], [12]]],
              [[[5], [7]], [[13], [15]]],
              [[[6], [8]], [[14], [16]]]]
               </code>
              
              (4) For the following input of shape <c>[2, 2, 4, 1]</c>, block_shape = <c>[2, 2]</c>, and
              paddings = <c>[[0, 0], [2, 0]]</c>:
              
               <code>
              x = [[[[1],   [2],  [3],  [4]],
              [[5],   [6],  [7],  [8]]],
              [[[9],  [10], [11],  [12]],
              [[13], [14], [15],  [16]]]]
               </code>
              
              The output tensor has shape <c>[8, 1, 3, 1]</c> and value:
              
               <code>
              x = [[[[0], [1], [3]]], [[[0], [9], [11]]],
              [[[0], [2], [4]]], [[[0], [10], [12]]],
              [[[0], [5], [7]]], [[[0], [13], [15]]],
              [[[0], [6], [8]]], [[[0], [14], [16]]]]
               </code>
              
              Among others, this operation is useful for reducing atrous convolution into
              regular convolution.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToBatchND'.
            </param>
        <summary>
              SpaceToBatch for N-D tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation divides "spatial" dimensions <c>[1, ..., M]</c> of the input into a
              grid of blocks of shape <c>block_shape</c>, and interleaves these blocks with the
              "batch" dimension (0) such that in the output, the spatial dimensions
              <c>[1, ..., M]</c> correspond to the position within the grid, and the batch
              dimension combines both the position within a spatial block and the original
              batch position.  Prior to division into blocks, the spatial dimensions of the
              input are optionally zero padded according to <c>paddings</c>.  See below for a
              precise description.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpaceToDepth">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SpaceToDepth (TensorFlow.TFOutput input, long block_size, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SpaceToDepth(valuetype TensorFlow.TFOutput input, int64 block_size, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="block_size">
              The size of the spatial block.
            </param>
        <param name="data_format">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToDepth'.
            </param>
        <summary>
              SpaceToDepth for tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Rearranges blocks of spatial data, into depth. More specifically,
              this op outputs a copy of the input tensor where values from the <c>height</c>
              and <c>width</c> dimensions are moved to the <c>depth</c> dimension.
              The attr <c>block_size</c> indicates the input block size.
              
              * Non-overlapping blocks of size <c>block_size x block size</c> are rearranged
              into depth at each location.
              * The depth of the output tensor is <c>block_size * block_size * input_depth</c>.
              * The Y, X coordinates within each block of the input become the high order
              component of the output channel index.
              * The input tensor's height and width must be divisible by block_size.
              
              The <c>data_format</c> attr specifies the layout of the input and output tensors
              with the following options:
              "NHWC": <c>[ batch, height, width, channels ]</c>
              "NCHW": <c>[ batch, channels, height, width ]</c>
              "NCHW_VECT_C":
              <c>qint8 [ batch, channels / 4, height, width, 4 ]</c>
              
              It is useful to consider the operation as transforming a 6-D Tensor.
              e.g. for data_format = NHWC,
              Each element in the input tensor can be specified via 6 coordinates,
              ordered by decreasing memory layout significance as:
              n,oY,bY,oX,bX,iC  (where n=batch index, oX, oY means X or Y coordinates
              within the output image, bX, bY means coordinates
              within the input block, iC means input channels).
              The output would be a transpose to the following layout:
              n,oY,oX,bY,bX,iC
              
              This operation is useful for resizing the activations between convolutions
              (but keeping all data), e.g. instead of pooling. It is also useful for training
              purely convolutional models.
              
              For example, given an input of shape <c>[1, 2, 2, 1]</c>, data_format = "NHWC" and
              block_size = 2:
              
               <code>
              x = [[[[1], [2]],
              [[3], [4]]]]
               </code>
              
              This operation will output a tensor of shape <c>[1, 1, 1, 4]</c>:
              
               <code>
              [[[[1, 2, 3, 4]]]]
               </code>
              
              Here, the input has a batch of 1 and each batch element has shape <c>[2, 2, 1]</c>,
              the corresponding output will have a single element (i.e. width and height are
              both 1) and will have a depth of 4 channels (1 * block_size * block_size).
              The output element shape is <c>[1, 1, 4]</c>.
              
              For an input tensor with larger depth, here of shape <c>[1, 2, 2, 3]</c>, e.g.
              
               <code>
              x = [[[[1, 2, 3], [4, 5, 6]],
              [[7, 8, 9], [10, 11, 12]]]]
               </code>
              
              This operation, for block_size of 2, will return the following tensor of shape
              <c>[1, 1, 1, 12]</c><code>
              [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]
               </code>
              
              Similarly, for the following input of shape <c>[1 4 4 1]</c>, and a block size of 2:
              
               <code>
              x = [[[[1],   [2],  [5],  [6]],
              [[3],   [4],  [7],  [8]],
              [[9],  [10], [13],  [14]],
              [[11], [12], [15],  [16]]]]
               </code>
              
              the operator will return the following tensor of shape <c>[1 2 2 4]</c>:
              
               <code>
              x = [[[[1, 2, 3, 4],
              [5, 6, 7, 8]],
              [[9, 10, 11, 12],
              [13, 14, 15, 16]]]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseAccumulatorApplyGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation SparseAccumulatorApplyGradient (TensorFlow.TFOutput handle, TensorFlow.TFOutput local_step, TensorFlow.TFOutput gradient_indices, TensorFlow.TFOutput gradient_values, TensorFlow.TFOutput gradient_shape, bool has_known_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation SparseAccumulatorApplyGradient(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput local_step, valuetype TensorFlow.TFOutput gradient_indices, valuetype TensorFlow.TFOutput gradient_values, valuetype TensorFlow.TFOutput gradient_shape, bool has_known_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="local_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="has_known_shape" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a accumulator.
            </param>
        <param name="local_step">
              The local_step value at which the sparse gradient was computed.
            </param>
        <param name="gradient_indices">
              Indices of the sparse gradient to be accumulated. Must be a
              vector.
            </param>
        <param name="gradient_values">
              Values are the non-zero slices of the gradient, and must have
              the same first dimension as indices, i.e., the nnz represented by indices and
              values must be consistent.
            </param>
        <param name="gradient_shape">
              Shape of the sparse gradient to be accumulated.
            </param>
        <param name="has_known_shape">
              Boolean indicating whether gradient_shape is unknown, in which
              case the input is ignored during validation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAccumulatorApplyGradient'.
            </param>
        <summary>
              Applies a sparse gradient to a given accumulator.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Does not add if local_step is smaller than the accumulator's
              global_step.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseAccumulatorTakeGradient">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseAccumulatorTakeGradient (TensorFlow.TFOutput handle, TensorFlow.TFOutput num_required, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseAccumulatorTakeGradient(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput num_required, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_required" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a SparseConditionalAccumulator.
            </param>
        <param name="num_required">
              Number of gradients required before we return an aggregate.
            </param>
        <param name="dtype">
              The data type of accumulated gradients. Needs to correspond to the type
              of the accumulator.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAccumulatorTakeGradient'.
            </param>
        <summary>
              Extracts the average sparse gradient in a SparseConditionalAccumulator.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              indices: Indices of the average of the accumulated sparse gradients.
              values: Values of the average of the accumulated sparse gradients.
              shape: Shape of the average of the accumulated sparse gradients.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The op will blocks until sufficient (i.e., more than num_required)
              gradients have been accumulated. If the accumulator has already
              aggregated more than num_required gradients, it will return its
              average of the accumulated gradients.  Also automatically increments
              the recorded global_step in the accumulator by 1, and resets the
              aggregate to 0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseAdd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseAdd (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, TensorFlow.TFOutput thresh, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseAdd(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput b_values, valuetype TensorFlow.TFOutput b_shape, valuetype TensorFlow.TFOutput thresh, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="thresh" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  The <c>indices</c> of the first <c>SparseTensor</c>, size <c>[nnz, ndims]</c> Matrix.
            </param>
        <param name="a_values">
              1-D.  The <c>values</c> of the first <c>SparseTensor</c>, size <c>[nnz]</c> Vector.
            </param>
        <param name="a_shape">
              1-D.  The <c>shape</c> of the first <c>SparseTensor</c>, size <c>[ndims]</c> Vector.
            </param>
        <param name="b_indices">
              2-D.  The <c>indices</c> of the second <c>SparseTensor</c>, size <c>[nnz, ndims]</c> Matrix.
            </param>
        <param name="b_values">
              1-D.  The <c>values</c> of the second <c>SparseTensor</c>, size <c>[nnz]</c> Vector.
            </param>
        <param name="b_shape">
              1-D.  The <c>shape</c> of the second <c>SparseTensor</c>, size <c>[ndims]</c> Vector.
            </param>
        <param name="thresh">
              0-D.  The magnitude threshold that determines if an output value/index
              pair takes space.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAdd'.
            </param>
        <summary>
              Adds two <c>SparseTensor</c> objects to produce another <c>SparseTensor</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sum_indices:
              sum_values:
              sum_shape:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input <c>SparseTensor</c> objects' indices are assumed ordered in standard
              lexicographic order.  If this is not the case, before this step run
              <c>SparseReorder</c> to restore index ordering.
              
              By default, if two values sum to zero at some index, the output <c>SparseTensor</c>
              would still include that particular location in its index, storing a zero in the
              corresponding value slot.  To override this, callers can specify <c>thresh</c>,
              indicating that if the sum has a magnitude strictly smaller than <c>thresh</c>, its
              corresponding value and index would then not be included.  In particular,
              <c>thresh == 0</c> (default) means everything is kept and actual thresholding happens
              only for a positive value.
              
              In the following shapes, <c>nnz</c> is the count after taking <c>thresh</c> into account.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseAddGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseAddGrad (TensorFlow.TFOutput backprop_val_grad, TensorFlow.TFOutput a_indices, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput sum_indices, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseAddGrad(valuetype TensorFlow.TFOutput backprop_val_grad, valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput sum_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backprop_val_grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sum_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="backprop_val_grad">
              1-D with shape <c>[nnz(sum)]</c>.  The gradient with respect to
              the non-empty values of the sum.
            </param>
        <param name="a_indices">
              2-D.  The <c>indices</c> of the <c>SparseTensor</c> A, size <c>[nnz(A), ndims]</c>.
            </param>
        <param name="b_indices">
              2-D.  The <c>indices</c> of the <c>SparseTensor</c> B, size <c>[nnz(B), ndims]</c>.
            </param>
        <param name="sum_indices">
              2-D.  The <c>indices</c> of the sum <c>SparseTensor</c>, size
              <c>[nnz(sum), ndims]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAddGrad'.
            </param>
        <summary>
              The gradient operator for the SparseAdd op.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              a_val_grad: 1-D with shape <c>[nnz(A)]</c>. The gradient with respect to the
              non-empty values of A.
              b_val_grad: 1-D with shape <c>[nnz(B)]</c>. The gradient with respect to the
              non-empty values of B.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The SparseAdd op calculates A + B, where A, B, and the sum are all represented
              as <c>SparseTensor</c> objects.  This op takes in the upstream gradient w.r.t.
              non-empty values of the sum, and outputs the gradients w.r.t. the non-empty
              values of A and B.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyAdadelta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyAdadelta(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput accum_update, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum_update" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
        </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="accum_update">
              : Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="rho">
              Decay factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Constant factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyAdadelta'.
            </param>
        <summary>
              var: Should be from a Variable().
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; update_slots = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; update_slots, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="update_slots" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="update_slots">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyAdagrad'.
            </param>
        <summary>
              Update relevant entries in '*var' and '*accum' according to the adagrad scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              That is for rows we have grad for, we update var and accum as follows:
              $$accum += grad * grad$$
              $$var -= lr * grad * (1 / sqrt(accum))$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyAdagradDA">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyAdagradDA(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput gradient_accumulator, valuetype TensorFlow.TFOutput gradient_squared_accumulator, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput global_step, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_squared_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="global_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="gradient_accumulator">
              Should be from a Variable().
            </param>
        <param name="gradient_squared_accumulator">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="global_step">
              Training step number. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyAdagradDA'.
            </param>
        <summary>
              Update entries in '*var' and '*accum' according to the proximal adagrad scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyCenteredRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyCenteredRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput mg, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="mg" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="mg">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var, ms and mom.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, mg, ms, and mom tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyCenteredRMSProp'.
            </param>
        <summary>
              Update '*var' according to the centered RMSProp algorithm.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The centered RMSProp algorithm uses an estimate of the centered second moment
              (i.e., the variance) for normalization, as opposed to regular RMSProp, which
              uses the (uncentered) second moment. This often helps with training, but is
              slightly more expensive in terms of computation and memory.
              
              Note that in dense implementation of this algorithm, mg, ms, and mom will
              update even if the grad is zero, but in this sparse implementation, mg, ms,
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              mean_grad = decay * mean_grad + (1-decay) * gradient
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)
              
              $$ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad$$
              $$mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)$$
              $$var &amp;lt;- var - mom$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyFtrl">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyFtrl(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyFtrl'.
            </param>
        <summary>
              Update relevant entries in '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              That is for rows we have grad for, we update var, accum and linear as follows:
              $$accum_new = accum + grad * grad$$
              $$linear += grad + (accum_{new}^{-lr_{power}} - accum^{-lr_{power}} / lr * var$$
              $$quadratic = 1.0 / (accum_{new}^{lr_{power}} * lr) + 2 * l2$$
              $$var = (sign(linear) * l1 - linear) / quadratic\ if\ |linear| &amp;gt; l1\ else\ 0.0$$
              $$accum = accum_{new}$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyFtrlV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyFtrlV2 (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput l2_shrinkage, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyFtrlV2(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput l2_shrinkage, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2_shrinkage" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 shrinkage regulariation. Must be a scalar.
            </param>
        <param name="l2_shrinkage">
        </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyFtrlV2'.
            </param>
        <summary>
              Update relevant entries in '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              That is for rows we have grad for, we update var, accum and linear as follows:
              grad_with_shrinkage = grad + 2 * l2_shrinkage * var
              accum_new = accum + grad_with_shrinkage * grad_with_shrinkage
              linear += grad_with_shrinkage +
              (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyMomentum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput momentum, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyMomentum(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput momentum, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="momentum">
              Momentum. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If <c>True</c>, the tensor passed to compute grad will be
              var - lr * momentum * accum, so in the end, the var you get is actually
              var - lr * momentum * accum.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyMomentum'.
            </param>
        <summary>
              Update relevant entries in '*var' and '*accum' according to the momentum scheme.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Set use_nesterov = True if you want to use Nesterov momentum.
              
              That is for rows we have grad for, we update var and accum as follows:
              
              $$accum = accum * momentum + grad$$
              $$var -= lr * accum$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyProximalAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyProximalAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyProximalAdagrad'.
            </param>
        <summary>
              Sparse update entries in '*var' and '*accum' according to FOBOS algorithm.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              That is for rows we have grad for, we update var and accum as follows:
              $$accum += grad * grad$$
              $$prox_v = var$$
              $$prox_v -= lr * grad * (1 / sqrt(accum))$$
              $$var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyProximalGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyProximalGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyProximalGradientDescent'.
            </param>
        <summary>
              Sparse update '*var' as FOBOS algorithm with fixed learning rate.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              That is for rows we have grad for, we update var as follows:
              $$prox_v = var - alpha * grad$$
              $$var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseApplyRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseApplyRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var, ms and mom.
            </param>
        <param name="use_locking">
              Optional argument
              If <c>True</c>, updating of the var, ms, and mom tensors is protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseApplyRMSProp'.
            </param>
        <summary>
              Update '*var' according to the RMSProp algorithm.
            </summary>
        <returns>
              Same as "var".
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that in dense implementation of this algorithm, ms and mom will
              update even if the grad is zero, but in this sparse implementation, ms
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)
              
              $$ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad$$
              $$mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)$$
              $$var &amp;lt;- var - mom$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseConcat">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseConcat (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] shapes, long concat_dim, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseConcat(valuetype TensorFlow.TFOutput[] indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput[] shapes, int64 concat_dim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="concat_dim" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              2-D.  Indices of each input <c>SparseTensor</c>.
            </param>
        <param name="values">
              1-D.  Non-empty values of each <c>SparseTensor</c>.
            </param>
        <param name="shapes">
              1-D.  Shapes of each <c>SparseTensor</c>.
            </param>
        <param name="concat_dim">
              Dimension to concatenate along. Must be in range [-rank, rank),
              where rank is the number of dimensions in each input <c>SparseTensor</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseConcat'.
            </param>
        <summary>
              Concatenates a list of <c>SparseTensor</c> along the specified dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  Indices of the concatenated <c>SparseTensor</c>.
              output_values: 1-D.  Non-empty values of the concatenated <c>SparseTensor</c>.
              output_shape: 1-D.  Shape of the concatenated <c>SparseTensor</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Concatenation is with respect to the dense versions of these sparse tensors.
              It is assumed that each input is a <c>SparseTensor</c> whose elements are ordered
              along increasing dimension number.
              
              All inputs' shapes must match, except for the concat dimension.  The
              <c>indices</c>, <c>values</c>, and <c>shapes</c> lists must have the same length.
              
              The output shape is identical to the inputs', except along the concat
              dimension, where it is the sum of the inputs' sizes along that dimension.
              
              The output elements will be resorted to preserve the sort order along
              increasing dimension number.
              
              This op runs in <c>O(M log M)</c> time, where <c>M</c> is the total number of non-empty
              values across all inputs. This is due to the need for an internal sort in
              order to concatenate efficiently across an arbitrary dimension.
              
              For example, if <c>concat_dim = 1</c> and the inputs are
              
              sp_inputs[0]: shape = [2, 3]
              [0, 2]: "a"
              [1, 0]: "b"
              [1, 1]: "c"
              
              sp_inputs[1]: shape = [2, 4]
              [0, 1]: "d"
              [0, 2]: "e"
              
              then the output will be
              
              shape = [2, 7]
              [0, 2]: "a"
              [0, 4]: "d"
              [0, 5]: "e"
              [1, 0]: "b"
              [1, 1]: "c"
              
              Graphically this is equivalent to doing
              
              [    a] concat [  d e  ] = [    a   d e  ]
              [b c  ]        [       ]   [b c          ]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseConditionalAccumulator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseConditionalAccumulator (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string container = null, string shared_name = null, string reduction_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseConditionalAccumulator(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string container, string shared_name, string reduction_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="reduction_type" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of the value being accumulated.
            </param>
        <param name="shape">
              The shape of the values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this accumulator is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this accumulator will be shared under the given name
              across multiple sessions.
            </param>
        <param name="reduction_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseConditionalAccumulator'.
            </param>
        <summary>
              A conditional accumulator for aggregating sparse gradients.
            </summary>
        <returns>
              The handle to the accumulator.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The accumulator accepts gradients marked with local_step greater or
              equal to the most recent global_step known to the accumulator. The
              average can be extracted from the accumulator, provided sufficient
              gradients have been accumulated. Extracting the average automatically
              resets the aggregate to 0, and increments the global_step recorded by
              the accumulator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseCross">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseCross (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] shapes, TensorFlow.TFOutput[] dense_inputs, bool hashed_output, long num_buckets, long hash_key, TensorFlow.TFDataType out_type, TensorFlow.TFDataType internal_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseCross(valuetype TensorFlow.TFOutput[] indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput[] shapes, valuetype TensorFlow.TFOutput[] dense_inputs, bool hashed_output, int64 num_buckets, int64 hash_key, valuetype TensorFlow.TFDataType out_type, valuetype TensorFlow.TFDataType internal_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="hashed_output" Type="System.Boolean" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="hash_key" Type="System.Int64" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="internal_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              2-D.  Indices of each input <c>SparseTensor</c>.
            </param>
        <param name="values">
              1-D.   values of each <c>SparseTensor</c>.
            </param>
        <param name="shapes">
              1-D.   Shapes of each <c>SparseTensor</c>.
            </param>
        <param name="dense_inputs">
              2-D.    Columns represented by dense <c>Tensor</c>.
            </param>
        <param name="hashed_output">
              If true, returns the hash of the cross instead of the string.
              This will allow us avoiding string manipulations.
            </param>
        <param name="num_buckets">
              It is used if hashed_output is true.
              output = hashed_value%num_buckets if num_buckets &amp;gt; 0 else hashed_value.
            </param>
        <param name="hash_key">
              Specify the hash_key that will be used by the <c>FingerprintCat64</c>
              function to combine the crosses fingerprints.
            </param>
        <param name="out_type">
        </param>
        <param name="internal_type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseCross'.
            </param>
        <summary>
              Generates sparse cross from a list of sparse and dense tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  Indices of the concatenated <c>SparseTensor</c>.
              output_values: 1-D.  Non-empty values of the concatenated or hashed
              <c>SparseTensor</c>.
              output_shape: 1-D.  Shape of the concatenated <c>SparseTensor</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The op takes two lists, one of 2D <c>SparseTensor</c> and one of 2D <c>Tensor</c>, each
              representing features of one feature column. It outputs a 2D <c>SparseTensor</c> with
              the batchwise crosses of these features.
              
              For example, if the inputs are
              
              inputs[0]: SparseTensor with shape = [2, 2]
              [0, 0]: "a"
              [1, 0]: "b"
              [1, 1]: "c"
              
              inputs[1]: SparseTensor with shape = [2, 1]
              [0, 0]: "d"
              [1, 0]: "e"
              
              inputs[2]: Tensor [["f"], ["g"]]
              
              then the output will be
              
              shape = [2, 2]
              [0, 0]: "a_X_d_X_f"
              [1, 0]: "b_X_e_X_g"
              [1, 1]: "c_X_e_X_g"
              
              if hashed_output=true then the output will be
              
              shape = [2, 2]
              [0, 0]: FingerprintCat64(
              Fingerprint64("f"), FingerprintCat64(
              Fingerprint64("d"), Fingerprint64("a")))
              [1, 0]: FingerprintCat64(
              Fingerprint64("g"), FingerprintCat64(
              Fingerprint64("e"), Fingerprint64("b")))
              [1, 1]: FingerprintCat64(
              Fingerprint64("g"), FingerprintCat64(
              Fingerprint64("e"), Fingerprint64("c")))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseDenseCwiseAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseDenseCwiseAdd (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseDenseCwiseAdd(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, valuetype TensorFlow.TFOutput dense, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>sp_indices</c>.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="dense">
          <c>R</c>-D.  The dense Tensor operand.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseAdd'.
            </param>
        <summary>
              Adds up a SparseTensor and a dense Tensor, using these special rules:
            </summary>
        <returns>
              1-D.  The <c>N</c> values that are operated on.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              (1) Broadcasts the dense side to have the same shape as the sparse side, if
              eligible;
              (2) Then, only the dense values pointed to by the indices of the SparseTensor
              participate in the cwise addition.
              
              By these rules, the result is a logical SparseTensor with exactly the same
              indices and shape, but possibly with different non-zero values.  The output of
              this Op is the resultant non-zero values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseDenseCwiseDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseDenseCwiseDiv (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseDenseCwiseDiv(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, valuetype TensorFlow.TFOutput dense, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>sp_indices</c>.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="dense">
          <c>R</c>-D.  The dense Tensor operand.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseDiv'.
            </param>
        <summary>
              Component-wise divides a SparseTensor by a dense Tensor.
            </summary>
        <returns>
              1-D.  The <c>N</c> values that are operated on.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *Limitation*: this Op only broadcasts the dense side to the sparse side, but not
              the other direction.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseDenseCwiseMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseDenseCwiseMul (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseDenseCwiseMul(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, valuetype TensorFlow.TFOutput dense, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>sp_indices</c>.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="dense">
          <c>R</c>-D.  The dense Tensor operand.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseMul'.
            </param>
        <summary>
              Component-wise multiplies a SparseTensor by a dense Tensor.
            </summary>
        <returns>
              1-D.  The <c>N</c> values that are operated on.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output locations corresponding to the implicitly zero elements in the sparse
              tensor will be zero (i.e., will not take up storage space), regardless of the
              contents of the dense tensor (even if it's +/-INF and that INF*0 == NaN).
              
              *Limitation*: this Op only broadcasts the dense side to the sparse side, but not
              the other direction.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseFillEmptyRows">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseFillEmptyRows (TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput dense_shape, TensorFlow.TFOutput default_value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseFillEmptyRows(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput dense_shape, valuetype TensorFlow.TFOutput default_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="default_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              2-D. the indices of the sparse tensor.
            </param>
        <param name="values">
              1-D. the values of the sparse tensor.
            </param>
        <param name="dense_shape">
              1-D. the shape of the sparse tensor.
            </param>
        <param name="default_value">
              0-D. default value to insert into location <c>[row, 0, ..., 0]</c>
              for rows missing from the input sparse tensor.
              output indices: 2-D. the indices of the filled sparse tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseFillEmptyRows'.
            </param>
        <summary>
              Fills empty rows in the input 2-D <c>SparseTensor</c> with a default value.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices:
              output_values: 1-D. the values of the filled sparse tensor.
              empty_row_indicator: 1-D. whether the dense row was missing in the
              input sparse tensor.
              reverse_index_map: 1-D. a map from the input indices to the output indices.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input <c>SparseTensor</c> is represented via the tuple of inputs
              (<c>indices</c>, <c>values</c>, <c>dense_shape</c>).  The output <c>SparseTensor</c> has the
              same <c>dense_shape</c> but with indices <c>output_indices</c> and values
              <c>output_values</c>.
              
              This op inserts a single entry for every row that doesn't have any values.
              The index is created as <c>[row, 0, ..., 0]</c> and the inserted value
              is <c>default_value</c>.
              
              For example, suppose <c>sp_input</c> has shape <c>[5, 6]</c> and non-empty values:
              
              [0, 1]: a
              [0, 3]: b
              [2, 0]: c
              [3, 1]: d
              
              Rows 1 and 4 are empty, so the output will be of shape <c>[5, 6]</c> with values:
              
              [0, 1]: a
              [0, 3]: b
              [1, 0]: default_value
              [2, 0]: c
              [3, 1]: d
              [4, 0]: default_value
              
              The output <c>SparseTensor</c> will be in row-major order and will have the
              same shape as the input.
              
              This op also returns an indicator vector shaped <c>[dense_shape[0]]</c> such that
              
              empty_row_indicator[i] = True iff row i was an empty row.
              
              And a reverse index map vector shaped <c>[indices.shape[0]]</c> that is used during
              backpropagation,
              
              reverse_index_map[j] = out_j s.t. indices[j, :] == output_indices[out_j, :]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseFillEmptyRowsGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseFillEmptyRowsGrad (TensorFlow.TFOutput reverse_index_map, TensorFlow.TFOutput grad_values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseFillEmptyRowsGrad(valuetype TensorFlow.TFOutput reverse_index_map, valuetype TensorFlow.TFOutput grad_values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reverse_index_map" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reverse_index_map">
              1-D.  The reverse index map from SparseFillEmptyRows.
            </param>
        <param name="grad_values">
              1-D.  The gradients from backprop.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseFillEmptyRowsGrad'.
            </param>
        <summary>
              The gradient of SparseFillEmptyRows.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              d_values: 1-D.  The backprop into values.
              d_default_value: 0-D.  The backprop into default_value.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Takes vectors reverse_index_map, shaped <c>[N]</c>, and grad_values,
              shaped <c>[N_full]</c>, where <c>N_full &amp;gt;= N</c> and copies data into either
              <c>d_values</c> or <c>d_default_value</c>.  Here <c>d_values</c> is shaped <c>[N]</c> and
              <c>d_default_value</c> is a scalar.
              
              d_values[j] = grad_values[reverse_index_map[j]]
              d_default_value = sum_{k : 0 .. N_full - 1} (
              grad_values[k] * 1{k not in reverse_index_map})
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseMatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseMatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, Nullable&lt;bool&gt; transpose_a = null, Nullable&lt;bool&gt; transpose_b = null, Nullable&lt;bool&gt; a_is_sparse = null, Nullable&lt;bool&gt; b_is_sparse = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseMatMul(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype System.Nullable`1&lt;bool&gt; transpose_a, valuetype System.Nullable`1&lt;bool&gt; transpose_b, valuetype System.Nullable`1&lt;bool&gt; a_is_sparse, valuetype System.Nullable`1&lt;bool&gt; b_is_sparse, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="transpose_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="transpose_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="a_is_sparse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="b_is_sparse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="transpose_a">
              Optional argument
            </param>
        <param name="transpose_b">
              Optional argument
            </param>
        <param name="a_is_sparse">
              Optional argument
            </param>
        <param name="b_is_sparse">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseMatMul'.
            </param>
        <summary>
              Multiply matrix "a" by matrix "b".
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs must be two-dimensional matrices and the inner dimension of "a" must
              match the outer dimension of "b". Both "a" and "b" must be <c>Tensor</c>s not
              <c>SparseTensor</c>s.  This op is optimized for the case where at least one of "a" or
              "b" is sparse, in the sense that they have a large proportion of zero values.
              The breakeven for using this versus a dense matrix multiply on one platform was
              30% zero values in the sparse matrix.
              
              The gradient computation of this operation will only take advantage of sparsity
              in the input gradient when that gradient comes from a Relu.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseReduceMax (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseReduceMax(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>input_indices</c>.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-<c>K</c> vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceMax'.
            </param>
        <summary>
              Computes the max of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
          <c>R-K</c>-D.  The reduced Tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              <c>tf.reduce_max()</c>.  In particular, this Op also returns a dense <c>Tensor</c>
              instead of a sparse one.
              
              Reduces <c>sp_input</c> along the dimensions given in <c>reduction_axes</c>.  Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>reduction_axes</c>. If <c>keep_dims</c> is true, the reduced dimensions are retained
              with length 1.
              
              If <c>reduction_axes</c> has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceMaxSparse">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReduceMaxSparse (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReduceMaxSparse(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>input_indices</c>.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-<c>K</c> vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceMaxSparse'.
            </param>
        <summary>
              Computes the max of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices:
              output_values:
              output_shape:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              <c>tf.reduce_max()</c>.  In contrast to SparseReduceMax, this Op returns a
              SparseTensor.
              
              Reduces <c>sp_input</c> along the dimensions given in <c>reduction_axes</c>.  Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>reduction_axes</c>. If <c>keep_dims</c> is true, the reduced dimensions are retained
              with length 1.
              
              If <c>reduction_axes</c> has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseReduceSum (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseReduceSum(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>input_indices</c>.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-<c>K</c> vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceSum'.
            </param>
        <summary>
              Computes the sum of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
          <c>R-K</c>-D.  The reduced Tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              <c>tf.reduce_sum()</c>.  In particular, this Op also returns a dense <c>Tensor</c>
              instead of a sparse one.
              
              Reduces <c>sp_input</c> along the dimensions given in <c>reduction_axes</c>.  Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>reduction_axes</c>. If <c>keep_dims</c> is true, the reduced dimensions are retained
              with length 1.
              
              If <c>reduction_axes</c> has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceSumSparse">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReduceSumSparse (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReduceSumSparse(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>input_indices</c>.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-<c>K</c> vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceSumSparse'.
            </param>
        <summary>
              Computes the sum of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices:
              output_values:
              output_shape:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              <c>tf.reduce_sum()</c>.  In contrast to SparseReduceSum, this Op returns a
              SparseTensor.
              
              Reduces <c>sp_input</c> along the dimensions given in <c>reduction_axes</c>.  Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>reduction_axes</c>. If <c>keep_dims</c> is true, the reduced dimensions are retained
              with length 1.
              
              If <c>reduction_axes</c> has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReorder">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReorder (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReorder(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>input_indices</c>.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReorder'.
            </param>
        <summary>
              Reorders a SparseTensor into the canonical, row-major ordering.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  <c>N x R</c> matrix with the same indices as input_indices, but
              in canonical row-major ordering.
              output_values: 1-D.  <c>N</c> non-empty values corresponding to <c>output_indices</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that by convention, all sparse ops preserve the canonical ordering along
              increasing dimension number. The only time ordering can be violated is during
              manual manipulation of the indices and values vectors to add entries.
              
              Reordering does not affect the shape of the SparseTensor.
              
              If the tensor has rank <c>R</c> and <c>N</c> non-empty values, <c>input_indices</c> has
              shape <c>[N, R]</c>, input_values has length <c>N</c>, and input_shape has length <c>R</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReshape">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReshape (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput new_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReshape(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput new_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="new_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  <c>N x R_in</c> matrix with the indices of non-empty values in a
              SparseTensor.
            </param>
        <param name="input_shape">
              1-D.  <c>R_in</c> vector with the input SparseTensor's dense shape.
            </param>
        <param name="new_shape">
              1-D.  <c>R_out</c> vector with the requested new dense shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReshape'.
            </param>
        <summary>
              Reshapes a SparseTensor to represent values in a new dense shape.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  <c>N x R_out</c> matrix with the updated indices of non-empty
              values in the output SparseTensor.
              output_shape: 1-D.  <c>R_out</c> vector with the full dense shape of the output
              SparseTensor.  This is the same as <c>new_shape</c> but with any -1 dimensions
              filled in.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This operation has the same semantics as reshape on the represented dense
              tensor.  The <c>input_indices</c> are recomputed based on the requested <c>new_shape</c>.
              
              If one component of <c>new_shape</c> is the special value -1, the size of that
              dimension is computed so that the total dense size remains constant.  At
              most one component of <c>new_shape</c> can be -1.  The number of dense elements
              implied by <c>new_shape</c> must be the same as the number of dense elements
              originally implied by <c>input_shape</c>.
              
              Reshaping does not affect the order of values in the SparseTensor.
              
              If the input tensor has rank <c>R_in</c> and <c>N</c> non-empty values, and <c>new_shape</c>
              has length <c>R_out</c>, then <c>input_indices</c> has shape <c>[N, R_in]</c>,
              <c>input_shape</c> has length <c>R_in</c>, <c>output_indices</c> has shape <c>[N, R_out]</c>, and
              <c>output_shape</c> has length <c>R_out</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentMean">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentMean (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentMean(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as <c>segment_ids</c>.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentMean'.
            </param>
        <summary>
              Computes the mean along sparse segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Like <c>SegmentMean</c>, but <c>segment_ids</c> can have rank less than <c>data</c>'s first
              dimension, selecting a subset of dimension 0, specified by <c>indices</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentMeanGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentMeanGrad (TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput output_dim0, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentMeanGrad(valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput output_dim0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_dim0" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grad">
              gradient propagated to the SparseSegmentMean op.
            </param>
        <param name="indices">
              indices passed to the corresponding SparseSegmentMean op.
            </param>
        <param name="segment_ids">
              segment_ids passed to the corresponding SparseSegmentMean op.
            </param>
        <param name="output_dim0">
              dimension 0 of "data" passed to SparseSegmentMean op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentMeanGrad'.
            </param>
        <summary>
              Computes gradients for SparseSegmentMean.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns tensor "output" with same shape as grad, except for dimension 0 whose
              value is output_dim0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentMeanWithNumSegments">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentMeanWithNumSegments (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentMeanWithNumSegments(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as <c>segment_ids</c>.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="num_segments">
              Should equal the number of distinct segment IDs.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentMeanWithNumSegments'.
            </param>
        <summary>
              Computes the mean along sparse segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which has size
              <c>num_segments</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Like <c>SparseSegmentMean</c>, but allows missing ids in <c>segment_ids</c>. If an id is
              misisng, the <c>output</c> tensor at that position will be zeroed.
              
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSqrtN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSqrtN (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSqrtN(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as <c>segment_ids</c>.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSqrtN'.
            </param>
        <summary>
              Computes the sum along sparse segments of a tensor divided by the sqrt of N.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              N is the size of the segment being reduced.
              
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSqrtNGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSqrtNGrad (TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput output_dim0, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSqrtNGrad(valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput output_dim0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_dim0" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grad">
              gradient propagated to the SparseSegmentSqrtN op.
            </param>
        <param name="indices">
              indices passed to the corresponding SparseSegmentSqrtN op.
            </param>
        <param name="segment_ids">
              segment_ids passed to the corresponding SparseSegmentSqrtN op.
            </param>
        <param name="output_dim0">
              dimension 0 of "data" passed to SparseSegmentSqrtN op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSqrtNGrad'.
            </param>
        <summary>
              Computes gradients for SparseSegmentSqrtN.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns tensor "output" with same shape as grad, except for dimension 0 whose
              value is output_dim0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSqrtNWithNumSegments">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSqrtNWithNumSegments (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSqrtNWithNumSegments(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as <c>segment_ids</c>.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="num_segments">
              Should equal the number of distinct segment IDs.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSqrtNWithNumSegments'.
            </param>
        <summary>
              Computes the sum along sparse segments of a tensor divided by the sqrt of N.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              N is the size of the segment being reduced.
              
              Like <c>SparseSegmentSqrtN</c>, but allows missing ids in <c>segment_ids</c>. If an id is
              misisng, the <c>output</c> tensor at that position will be zeroed.
              
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSum(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as <c>segment_ids</c>.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSum'.
            </param>
        <summary>
              Computes the sum along sparse segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>k</c>, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Like <c>SegmentSum</c>, but <c>segment_ids</c> can have rank less than <c>data</c>'s first
              dimension, selecting a subset of dimension 0, specified by <c>indices</c>.
              
              For example:
              
               <code>
              c = tf.constant([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]])
              
              # Select two rows, one segment.
              tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 0]))
              # =&amp;gt; [[0 0 0 0]]
              
              # Select two rows, two segment.
              tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 1]))
              # =&amp;gt; [[ 1  2  3  4]
              #     [-1 -2 -3 -4]]
              
              # Select all rows, two segments.
              tf.sparse_segment_sum(c, tf.constant([0, 1, 2]), tf.constant([0, 0, 1]))
              # =&amp;gt; [[0 0 0 0]
              #     [5 6 7 8]]
              
              # Which is equivalent to:
              tf.segment_sum(c, tf.constant([0, 0, 1]))
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSumWithNumSegments">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSumWithNumSegments (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSumWithNumSegments(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as <c>segment_ids</c>.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="num_segments">
              Should equal the number of distinct segment IDs.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSumWithNumSegments'.
            </param>
        <summary>
              Computes the sum along sparse segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size <c>num_segments</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Like <c>SparseSegmentSum</c>, but allows missing ids in <c>segment_ids</c>. If an id is
              misisng, the <c>output</c> tensor at that position will be zeroed.
              
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              For example:
              
               <code>
              c = tf.constant([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]])
              
              tf.sparse_segment_sum_with_num_segments(
              c, tf.constant([0, 1]), tf.constant([0, 0]), num_segments=3)
              # =&amp;gt; [[0 0 0 0]
              #     [0 0 0 0]
              #     [0 0 0 0]]
              
              tf.sparse_segment_sum_with_num_segments(c,
              tf.constant([0, 1]),
              tf.constant([0, 2],
              num_segments=4))
              # =&amp;gt; [[ 1  2  3  4]
              #     [ 0  0  0  0]
              #     [-1 -2 -3 -4]
              #     [ 0  0  0  0]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSlice">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseSlice (TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput shape, TensorFlow.TFOutput start, TensorFlow.TFOutput size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseSlice(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput start, valuetype TensorFlow.TFOutput size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              2-D tensor represents the indices of the sparse tensor.
            </param>
        <param name="values">
              1-D tensor represents the values of the sparse tensor.
            </param>
        <param name="shape">
              1-D. tensor represents the shape of the sparse tensor.
            </param>
        <param name="start">
              1-D. tensor represents the start of the slice.
            </param>
        <param name="size">
              1-D. tensor represents the size of the slice.
              output indices: A list of 1-D tensors represents the indices of the output
              sparse tensors.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSlice'.
            </param>
        <summary>
              Slice a <c>SparseTensor</c> based on the <c>start</c> and <c>size</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices:
              output_values: A list of 1-D tensors represents the values of the output sparse
              tensors.
              output_shape: A list of 1-D tensors represents the shape of the output sparse
              tensors.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              For example, if the input is
              
              input_tensor = shape = [2, 7]
              [    a   d e  ]
              [b c          ]
              
              Graphically the output tensors are:
              
              sparse_slice([0, 0], [2, 4]) = shape = [2, 4]
              [    a  ]
              [b c    ]
              
              sparse_slice([0, 4], [2, 3]) = shape = [2, 3]
              [ d e  ]
              [      ]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSliceGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSliceGrad (TensorFlow.TFOutput backprop_val_grad, TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_start, TensorFlow.TFOutput output_indices, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSliceGrad(valuetype TensorFlow.TFOutput backprop_val_grad, valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_start, valuetype TensorFlow.TFOutput output_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backprop_val_grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_start" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="backprop_val_grad">
              1-D. The gradient with respect to
              the non-empty values of the sliced <c>SparseTensor</c>.
            </param>
        <param name="input_indices">
              2-D.  The <c>indices</c> of the input <c>SparseTensor</c>.
            </param>
        <param name="input_start">
              1-D. tensor represents the start of the slice.
            </param>
        <param name="output_indices">
              2-D.  The <c>indices</c> of the sliced <c>SparseTensor</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSliceGrad'.
            </param>
        <summary>
              The gradient operator for the SparseSlice op.
            </summary>
        <returns>
              1-D. The gradient with respect to the non-empty values of input <c>SparseTensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op takes in the upstream gradient w.r.t. non-empty values of
              the sliced <c>SparseTensor</c>, and outputs the gradients w.r.t.
              the non-empty values of input <c>SparseTensor</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSoftmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSoftmax (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSoftmax(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  <c>NNZ x R</c> matrix with the indices of non-empty values in a
              SparseTensor, in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  <c>NNZ</c> non-empty values corresponding to <c>sp_indices</c>.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSoftmax'.
            </param>
        <summary>
              Applies softmax to a batched N-D <c>SparseTensor</c>.
            </summary>
        <returns>
              1-D.  The <c>NNZ</c> values for the result <c>SparseTensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs represent an N-D SparseTensor  with logical shape <c>[..., B, C]</c>
              (where <c>N &amp;gt;= 2</c>), and with indices sorted in the canonical lexicographic order.
              
              This op is equivalent to applying the normal <c>tf.nn.softmax()</c> to each innermost
              logical submatrix with shape <c>[B, C]</c>, but with the catch that *the implicitly
              zero elements do not participate*.  Specifically, the algorithm is equivalent
              to the following:
              
              (1) Applies <c>tf.nn.softmax()</c> to a densified view of each innermost submatrix
              with shape <c>[B, C]</c>, along the size-C dimension;
              (2) Masks out the original implicitly-zero locations;
              (3) Renormalizes the remaining elements.
              
              Hence, the <c>SparseTensor</c> result has exactly the same non-zero indices and
              shape.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSoftmaxCrossEntropyWithLogits">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseSoftmaxCrossEntropyWithLogits (TensorFlow.TFOutput features, TensorFlow.TFOutput labels, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseSoftmaxCrossEntropyWithLogits(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput labels, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
              batch_size x num_classes matrix
            </param>
        <param name="labels">
              batch_size vector with values in [0, num_classes).
              This is the label for the given minibatch entry.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSoftmaxCrossEntropyWithLogits'.
            </param>
        <summary>
              Computes softmax cross entropy cost and gradients to backpropagate.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              loss: Per example loss (batch_size vector).
              backprop: backpropagated gradients (batch_size x num_classes matrix).
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Unlike <c>SoftmaxCrossEntropyWithLogits</c>, this operation does not accept
              a matrix of label probabilities, but rather a single label per row
              of features.  This label is considered to have probability 1.0 for the
              given row.
              
              Inputs are the logits, not probabilities.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSparseMaximum">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseSparseMaximum (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseSparseMaximum(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput b_values, valuetype TensorFlow.TFOutput b_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, in the canonical lexicographic ordering.
            </param>
        <param name="a_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>a_indices</c>.
            </param>
        <param name="a_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="b_indices">
              counterpart to <c>a_indices</c> for the other operand.
            </param>
        <param name="b_values">
              counterpart to <c>a_values</c> for the other operand; must be of the same dtype.
            </param>
        <param name="b_shape">
              counterpart to <c>a_shape</c> for the other operand; the two shapes must be equal.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSparseMaximum'.
            </param>
        <summary>
              Returns the element-wise max of two SparseTensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  The indices of the output SparseTensor.
              output_values: 1-D.  The values of the output SparseTensor.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSparseMinimum">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseSparseMinimum (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseSparseMinimum(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput b_values, valuetype TensorFlow.TFOutput b_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  <c>N x R</c> matrix with the indices of non-empty values in a
              SparseTensor, in the canonical lexicographic ordering.
            </param>
        <param name="a_values">
              1-D.  <c>N</c> non-empty values corresponding to <c>a_indices</c>.
            </param>
        <param name="a_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="b_indices">
              counterpart to <c>a_indices</c> for the other operand.
            </param>
        <param name="b_values">
              counterpart to <c>a_values</c> for the other operand; must be of the same dtype.
            </param>
        <param name="b_shape">
              counterpart to <c>a_shape</c> for the other operand; the two shapes must be equal.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSparseMinimum'.
            </param>
        <summary>
              Returns the element-wise min of two SparseTensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  The indices of the output SparseTensor.
              output_values: 1-D.  The values of the output SparseTensor.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSplit">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; SparseSplit (TensorFlow.TFOutput split_dim, TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput shape, long num_split, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; SparseSplit(valuetype TensorFlow.TFOutput split_dim, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput shape, int64 num_split, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="split_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_split" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="split_dim">
              0-D.  The dimension along which to split.  Must be in the range
              <c>[0, rank(shape))</c>.
            </param>
        <param name="indices">
              2-D tensor represents the indices of the sparse tensor.
            </param>
        <param name="values">
              1-D tensor represents the values of the sparse tensor.
            </param>
        <param name="shape">
              1-D. tensor represents the shape of the sparse tensor.
              output indices: A list of 1-D tensors represents the indices of the output
              sparse tensors.
            </param>
        <param name="num_split">
              The number of ways to split.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSplit'.
            </param>
        <summary>
              Split a <c>SparseTensor</c> into <c>num_split</c> tensors along one dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices:
              output_values: A list of 1-D tensors represents the values of the output sparse
              tensors.
              output_shape: A list of 1-D tensors represents the shape of the output sparse
              tensors.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the <c>shape[split_dim]</c> is not an integer multiple of <c>num_split</c>. Slices
              <c>[0 : shape[split_dim] % num_split]</c> gets one extra dimension.
              For example, if <c>split_dim = 1</c> and <c>num_split = 2</c> and the input is
              
              input_tensor = shape = [2, 7]
              [    a   d e  ]
              [b c          ]
              
              Graphically the output tensors are:
              
              output_tensor[0] = shape = [2, 4]
              [    a  ]
              [b c    ]
              
              output_tensor[1] = shape = [2, 3]
              [ d e  ]
              [      ]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseTensorDenseAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseTensorDenseAdd (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseTensorDenseAdd(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  The <c>indices</c> of the <c>SparseTensor</c>, with shape <c>[nnz, ndims]</c>.
            </param>
        <param name="a_values">
              1-D.  The <c>values</c> of the <c>SparseTensor</c>, with shape <c>[nnz]</c>.
            </param>
        <param name="a_shape">
              1-D.  The <c>shape</c> of the <c>SparseTensor</c>, with shape <c>[ndims]</c>.
            </param>
        <param name="b">
          <c>ndims</c>-D Tensor.  With shape <c>a_shape</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorDenseAdd'.
            </param>
        <summary>
              Adds up a <c>SparseTensor</c> and a dense <c>Tensor</c>, producing a dense <c>Tensor</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This Op does not require <c>a_indices</c> be sorted in standard lexicographic order.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseTensorDenseMatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseTensorDenseMatMul (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b, Nullable&lt;bool&gt; adjoint_a = null, Nullable&lt;bool&gt; adjoint_b = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseTensorDenseMatMul(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b, valuetype System.Nullable`1&lt;bool&gt; adjoint_a, valuetype System.Nullable`1&lt;bool&gt; adjoint_b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="adjoint_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="adjoint_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  The <c>indices</c> of the <c>SparseTensor</c>, size <c>[nnz, 2]</c> Matrix.
            </param>
        <param name="a_values">
              1-D.  The <c>values</c> of the <c>SparseTensor</c>, size <c>[nnz]</c> Vector.
            </param>
        <param name="a_shape">
              1-D.  The <c>shape</c> of the <c>SparseTensor</c>, size <c>[2]</c> Vector.
            </param>
        <param name="b">
              2-D.  A dense Matrix.
            </param>
        <param name="adjoint_a">
              Optional argument
              Use the adjoint of A in the matrix multiply.  If A is complex, this
              is transpose(conj(A)).  Otherwise it's transpose(A).
            </param>
        <param name="adjoint_b">
              Optional argument
              Use the adjoint of B in the matrix multiply.  If B is complex, this
              is transpose(conj(B)).  Otherwise it's transpose(B).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorDenseMatMul'.
            </param>
        <summary>
              Multiply SparseTensor (of rank 2) "A" by dense matrix "B".
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              No validity checking is performed on the indices of A.  However, the following
              input format is recommended for optimal behavior:
              
              if adjoint_a == false:
              A should be sorted in lexicographically increasing order.  Use SparseReorder
              if you're not sure.
              if adjoint_a == true:
              A should be sorted in order of increasing dimension 1 (i.e., "column major"
              order instead of "row major" order).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseTensorSliceDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseTensorSliceDataset (TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput dense_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseTensorSliceDataset(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput dense_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="values">
        </param>
        <param name="dense_shape">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorSliceDataset'.
            </param>
        <summary>
              Creates a dataset that splits a SparseTensor into elements row-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseToDense">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseToDense (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput output_shape, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput default_value, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseToDense(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput output_shape, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput default_value, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="default_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              0-D, 1-D, or 2-D.  <c>sparse_indices[i]</c> contains the complete
              index where <c>sparse_values[i]</c> will be placed.
            </param>
        <param name="output_shape">
              1-D.  Shape of the dense output tensor.
            </param>
        <param name="sparse_values">
              1-D.  Values corresponding to each row of <c>sparse_indices</c>,
              or a scalar value to be used for all sparse indices.
            </param>
        <param name="default_value">
              Scalar value to set for indices not specified in
              <c>sparse_indices</c>.
            </param>
        <param name="validate_indices">
              Optional argument
              If true, indices are checked to make sure they are sorted in
              lexicographic order and that there are no repeats.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseToDense'.
            </param>
        <summary>
              Converts a sparse representation into a dense tensor.
            </summary>
        <returns>
              Dense output tensor of shape <c>output_shape</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Builds an array <c>dense</c> with shape <c>output_shape</c> such that
              
               <code>
              # If sparse_indices is scalar
              dense[i] = (i == sparse_indices ? sparse_values : default_value)
              
              # If sparse_indices is a vector, then for each i
              dense[sparse_indices[i]] = sparse_values[i]
              
              # If sparse_indices is an n by d matrix, then for each i in [0, n)
              dense[sparse_indices[i][0], ..., sparse_indices[i][d-1]] = sparse_values[i]
               </code>
              
              All other values in <c>dense</c> are set to <c>default_value</c>.  If <c>sparse_values</c> is a
              scalar, all sparse indices are set to this single value.
              
              Indices should be sorted in lexicographic order, and indices must not
              contain any repeats. If <c>validate_indices</c> is true, these properties
              are checked during execution.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseToSparseSetOperation">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseToSparseSetOperation (TensorFlow.TFOutput set1_indices, TensorFlow.TFOutput set1_values, TensorFlow.TFOutput set1_shape, TensorFlow.TFOutput set2_indices, TensorFlow.TFOutput set2_values, TensorFlow.TFOutput set2_shape, string set_operation, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseToSparseSetOperation(valuetype TensorFlow.TFOutput set1_indices, valuetype TensorFlow.TFOutput set1_values, valuetype TensorFlow.TFOutput set1_shape, valuetype TensorFlow.TFOutput set2_indices, valuetype TensorFlow.TFOutput set2_values, valuetype TensorFlow.TFOutput set2_shape, string set_operation, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set1_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set1_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_operation" Type="System.String" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set1_indices">
              2D <c>Tensor</c>, indices of a <c>SparseTensor</c>. Must be in row-major
              order.
            </param>
        <param name="set1_values">
              1D <c>Tensor</c>, values of a <c>SparseTensor</c>. Must be in row-major
              order.
            </param>
        <param name="set1_shape">
              1D <c>Tensor</c>, shape of a <c>SparseTensor</c>. <c>set1_shape[0...n-1]</c> must
              be the same as <c>set2_shape[0...n-1]</c>, <c>set1_shape[n]</c> is the
              max set size across <c>0...n-1</c> dimensions.
            </param>
        <param name="set2_indices">
              2D <c>Tensor</c>, indices of a <c>SparseTensor</c>. Must be in row-major
              order.
            </param>
        <param name="set2_values">
              1D <c>Tensor</c>, values of a <c>SparseTensor</c>. Must be in row-major
              order.
            </param>
        <param name="set2_shape">
              1D <c>Tensor</c>, shape of a <c>SparseTensor</c>. <c>set2_shape[0...n-1]</c> must
              be the same as <c>set1_shape[0...n-1]</c>, <c>set2_shape[n]</c> is the
              max set size across <c>0...n-1</c> dimensions.
            </param>
        <param name="set_operation">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseToSparseSetOperation'.
            </param>
        <summary>
              Applies set operation along last dimension of 2 <c>SparseTensor</c> inputs.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result_indices: 2D indices of a <c>SparseTensor</c>.
              result_values: 1D values of a <c>SparseTensor</c>.
              result_shape: 1D <c>Tensor</c> shape of a <c>SparseTensor</c>. <c>result_shape[0...n-1]</c> is
              the same as the 1st <c>n-1</c> dimensions of <c>set1</c> and <c>set2</c>, <c>result_shape[n]</c>
              is the max result set size across all <c>0...n-1</c> dimensions.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See SetOperationOp::SetOperationFromContext for values of <c>set_operation</c>.
              
              If <c>validate_indices</c> is <c>True</c>, <c>SparseToSparseSetOperation</c> validates the
              order and range of <c>set1</c> and <c>set2</c> indices.
              
              Input <c>set1</c> is a <c>SparseTensor</c> represented by <c>set1_indices</c>, <c>set1_values</c>,
              and <c>set1_shape</c>. For <c>set1</c> ranked <c>n</c>, 1st <c>n-1</c> dimensions must be the same
              as <c>set2</c>. Dimension <c>n</c> contains values in a set, duplicates are allowed but
              ignored.
              
              Input <c>set2</c> is a <c>SparseTensor</c> represented by <c>set2_indices</c>, <c>set2_values</c>,
              and <c>set2_shape</c>. For <c>set2</c> ranked <c>n</c>, 1st <c>n-1</c> dimensions must be the same
              as <c>set1</c>. Dimension <c>n</c> contains values in a set, duplicates are allowed but
              ignored.
              
              If <c>validate_indices</c> is <c>True</c>, this op validates the order and range of <c>set1</c>
              and <c>set2</c> indices.
              
              Output <c>result</c> is a <c>SparseTensor</c> represented by <c>result_indices</c>,
              <c>result_values</c>, and <c>result_shape</c>. For <c>set1</c> and <c>set2</c> ranked <c>n</c>, this
              has rank <c>n</c> and the same 1st <c>n-1</c> dimensions as <c>set1</c> and <c>set2</c>. The <c>nth</c>
              dimension contains the result of <c>set_operation</c> applied to the corresponding
              <c>[0...n-1]</c> dimension of <c>set</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] Split (TensorFlow.TFOutput split_dim, TensorFlow.TFOutput value, long num_split, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] Split(valuetype TensorFlow.TFOutput split_dim, valuetype TensorFlow.TFOutput value, int64 num_split, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="split_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_split" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="split_dim">
              0-D.  The dimension along which to split.  Must be in the range
              <c>[-rank(value), rank(value))</c>.
            </param>
        <param name="value">
              The tensor to split.
            </param>
        <param name="num_split">
              The number of ways to split.  Must evenly divide
              <c>value.shape[split_dim]</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Split'.
            </param>
        <summary>
              Splits a tensor into <c>num_split</c> tensors along one dimension.
            </summary>
        <returns>
              They are identically shaped tensors, whose shape matches that of <c>value</c>
              except along <c>axis</c>, where their sizes are
              <c>values.shape[split_dim] / num_split</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitV">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] SplitV (TensorFlow.TFOutput value, TensorFlow.TFOutput size_splits, TensorFlow.TFOutput split_dim, long num_split, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] SplitV(valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput size_splits, valuetype TensorFlow.TFOutput split_dim, int64 num_split, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="size_splits" Type="TensorFlow.TFOutput" />
        <Parameter Name="split_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_split" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to split.
            </param>
        <param name="size_splits">
              list containing the sizes of each output tensor along the split
              dimension. Must sum to the dimension of value along split_dim.
              Can contain one -1 indicating that dimension is to be inferred.
            </param>
        <param name="split_dim">
              0-D.  The dimension along which to split.  Must be in the range
              <c>[-rank(value), rank(value))</c>.
            </param>
        <param name="num_split">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SplitV'.
            </param>
        <summary>
              Splits a tensor into <c>num_split</c> tensors along one dimension.
            </summary>
        <returns>
              Tensors whose shape matches that of <c>value</c>
              except along <c>axis</c>, where their sizes are
              <c>size_splits[i]</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sqrt (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sqrt(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sqrt'.
            </param>
        <summary>
              Computes square root of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = \sqrt{x} = x^{1/2}\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SqrtGrad (TensorFlow.TFOutput y, TensorFlow.TFOutput dy, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SqrtGrad(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput dy, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="dy">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SqrtGrad'.
            </param>
        <summary>
              Computes the gradient for the sqrt of <c>x</c> wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, <c>grad = dy * 0.5 / y</c>, where <c>y = sqrt(x)</c>, and <c>dy</c>
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Square">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Square (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Square(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Square'.
            </param>
        <summary>
              Computes square of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = x * x = x^2\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SquaredDifference">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SquaredDifference (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SquaredDifference(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SquaredDifference'.
            </param>
        <summary>
              Returns (x - y)(x - y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>SquaredDifference</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Squeeze">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Squeeze (TensorFlow.TFOutput input, long[] squeeze_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Squeeze(valuetype TensorFlow.TFOutput input, int64[] squeeze_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="squeeze_dims" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The <c>input</c> to squeeze.
            </param>
        <param name="squeeze_dims">
              Optional argument
              If specified, only squeezes the dimensions listed. The dimension
              index starts at 0. It is an error to squeeze a dimension that is not 1. Must
              be in the range <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Squeeze'.
            </param>
        <summary>
              Removes dimensions of size 1 from the shape of a tensor.
            </summary>
        <returns>
              Contains the same data as <c>input</c>, but has one or more dimensions of
              size 1 removed.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor <c>input</c>, this operation returns a tensor of the same type with
              all dimensions of size 1 removed. If you don't want to remove all size 1
              dimensions, you can remove specific size 1 dimensions by specifying
              <c>axis</c>.
              
              For example:
              
               <code>
              # 't' is a tensor of shape [1, 2, 1, 3, 1, 1]
              shape(squeeze(t)) ==&amp;gt; [2, 3]
               </code>
              
              Or, to remove specific size 1 dimensions:
              
               <code>
              # 't' is a tensor of shape [1, 2, 1, 3, 1, 1]
              shape(squeeze(t, [2, 4])) ==&amp;gt; [1, 2, 3, 1]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Stack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Stack (TensorFlow.TFDataType elem_type, string stack_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Stack(valuetype TensorFlow.TFDataType elem_type, string stack_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="stack_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elem_type">
        </param>
        <param name="stack_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Stack'.
            </param>
        <summary>
              Deprecated, use StackV2.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Stack (TensorFlow.TFOutput[] values, Nullable&lt;int&gt; axis = 0, string operName = &quot;stack&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Stack(valuetype TensorFlow.TFOutput[] values, valuetype System.Nullable`1&lt;int32&gt; axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="axis" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <param name="axis">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>
            Stacks a list of rank-`R` tensors into one rank-`(R+1)` tensor.
            </summary>
        <returns>To be added.</returns>
        <remarks>
             Packs the list of tensors in <paramref name="values" /> into a tensor with rank one higher than
             each tensor in <paramref name="values" />, by packing them along the <paramref name="axis" /> dimension.
             Given a list of length <c>N</c> of tensors of shape <c>(A, B, C)</c>: if <c>axis == 0</c> then the 
             <c>output</c> tensor will have the shape <c>(N, A, B, C)</c>; if <c>axis == 1</c> then the <c>output</c>
             tensor will have the shape <c>(A, N, B, C)</c>; etc.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StackClose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation StackClose (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation StackClose(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StackClose'.
            </param>
        <summary>
              Deprecated, use StackCloseV2.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackCloseV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation StackCloseV2 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation StackCloseV2(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a stack.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StackCloseV2'.
            </param>
        <summary>
              Delete the stack from its resource container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackPop">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StackPop (TensorFlow.TFOutput handle, TensorFlow.TFDataType elem_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StackPop(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFDataType elem_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="elem_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="elem_type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StackPop'.
            </param>
        <summary>
              Deprecated, use StackPopV2.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackPopV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StackPopV2 (TensorFlow.TFOutput handle, TensorFlow.TFDataType elem_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StackPopV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFDataType elem_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="elem_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a stack.
            </param>
        <param name="elem_type">
              The type of the elem that is popped.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StackPopV2'.
            </param>
        <summary>
              Pop the element at the top of the stack.
            </summary>
        <returns>
              The tensor that is popped from the top of the stack.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackPush">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StackPush (TensorFlow.TFOutput handle, TensorFlow.TFOutput elem, Nullable&lt;bool&gt; swap_memory = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StackPush(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput elem, valuetype System.Nullable`1&lt;bool&gt; swap_memory, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="elem" Type="TensorFlow.TFOutput" />
        <Parameter Name="swap_memory" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="elem">
        </param>
        <param name="swap_memory">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StackPush'.
            </param>
        <summary>
              Deprecated, use StackPushV2.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackPushV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StackPushV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput elem, Nullable&lt;bool&gt; swap_memory = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StackPushV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput elem, valuetype System.Nullable`1&lt;bool&gt; swap_memory, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="elem" Type="TensorFlow.TFOutput" />
        <Parameter Name="swap_memory" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a stack.
            </param>
        <param name="elem">
              The tensor to be pushed onto the stack.
            </param>
        <param name="swap_memory">
              Optional argument
              Swap <c>elem</c> to CPU. Default to false.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StackPushV2'.
            </param>
        <summary>
              Push an element onto the stack.
            </summary>
        <returns>
              The same tensor as the input 'elem'.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StackV2 (TensorFlow.TFOutput max_size, TensorFlow.TFDataType elem_type, string stack_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StackV2(valuetype TensorFlow.TFOutput max_size, valuetype TensorFlow.TFDataType elem_type, string stack_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="max_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="elem_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="stack_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="max_size">
              The maximum size of the stack if non-negative. If negative, the stack
              size is unlimited.
            </param>
        <param name="elem_type">
              The type of the elements on the stack.
            </param>
        <param name="stack_name">
              Optional argument
              Overrides the name used for the temporary stack resource. Default
              value is the name of the 'Stack' op (which is guaranteed unique).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StackV2'.
            </param>
        <summary>
              A stack that produces elements in first-in last-out order.
            </summary>
        <returns>
              The handle to the stack.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Stage (TensorFlow.TFOutput[] values, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Stage(valuetype TensorFlow.TFOutput[] values, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              a list of tensors
              dtypes A list of data types that inserted values should adhere to.
            </param>
        <param name="capacity">
              Optional argument
              Maximum number of elements in the Staging Area. If &amp;gt; 0, inserts
              on the container will block when the capacity is reached.
            </param>
        <param name="memory_limit">
              Optional argument
              The maximum number of bytes allowed for Tensors in the Staging Area.
              If &amp;gt; 0, inserts will block until sufficient space is available.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container. Otherwise,
              a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              It is necessary to match this name to the matching Unstage Op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Stage'.
            </param>
        <summary>
              Stage values similar to a lightweight Enqueue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The basic functionality of this Op is similar to a queue with many
              fewer capabilities and options.  This Op is optimized for performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageClear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation StageClear (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation StageClear(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StageClear'.
            </param>
        <summary>
              Op removes all elements in the underlying container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StagePeek">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] StagePeek (TensorFlow.TFOutput index, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] StagePeek(valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StagePeek'.
            </param>
        <summary>
              Op peeks at the values at the specified index.  If the
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              underlying container does not contain sufficient elements
              this op will block until it does.   This Op is optimized for
              performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StageSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StageSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StageSize'.
            </param>
        <summary>
              Op returns the number of elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatelessMultinomial">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StatelessMultinomial (TensorFlow.TFOutput logits, TensorFlow.TFOutput num_samples, TensorFlow.TFOutput seed, Nullable&lt;TensorFlow.TFDataType&gt; output_dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StatelessMultinomial(valuetype TensorFlow.TFOutput logits, valuetype TensorFlow.TFOutput num_samples, valuetype TensorFlow.TFOutput seed, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; output_dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_samples" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logits">
              2-D Tensor with shape <c>[batch_size, num_classes]</c>.  Each slice <c>[i, :]</c>
              represents the unnormalized log probabilities for all classes.
            </param>
        <param name="num_samples">
              0-D.  Number of independent samples to draw for each row slice.
            </param>
        <param name="seed">
              2 seeds (shape [2]).
            </param>
        <param name="output_dtype">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessMultinomial'.
            </param>
        <summary>
              Draws samples from a multinomial distribution.
            </summary>
        <returns>
              2-D Tensor with shape <c>[batch_size, num_samples]</c>.  Each slice <c>[i, :]</c>
              contains the drawn class labels with range <c>[0, num_classes)</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatelessRandomNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StatelessRandomNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StatelessRandomNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput seed, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="seed">
              2 seeds (shape [2]).
            </param>
        <param name="dtype">
              Optional argument
              The type of the output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessRandomNormal'.
            </param>
        <summary>
              Outputs deterministic pseudorandom values from a normal distribution.
            </summary>
        <returns>
              Random values with specified shape.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values will have mean 0 and standard deviation 1.
              
              The outputs are a deterministic function of <c>shape</c> and <c>seed</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatelessRandomUniform">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StatelessRandomUniform (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StatelessRandomUniform(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput seed, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="seed">
              2 seeds (shape [2]).
            </param>
        <param name="dtype">
              Optional argument
              The type of the output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessRandomUniform'.
            </param>
        <summary>
              Outputs deterministic pseudorandom random values from a uniform distribution.
            </summary>
        <returns>
              Random values with specified shape.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a uniform distribution in the range <c>[0, 1)</c>. The
              lower bound 0 is included in the range, while the upper bound 1 is excluded.
              
              The outputs are a deterministic function of <c>shape</c> and <c>seed</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatelessTruncatedNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StatelessTruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StatelessTruncatedNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput seed, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="seed">
              2 seeds (shape [2]).
            </param>
        <param name="dtype">
              Optional argument
              The type of the output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessTruncatedNormal'.
            </param>
        <summary>
              Outputs deterministic pseudorandom values from a truncated normal distribution.
            </summary>
        <returns>
              Random values with specified shape.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a normal distribution with mean 0 and standard
              deviation 1, except that values whose magnitude is more than 2 standard
              deviations from the mean are dropped and re-picked.
              
              The outputs are a deterministic function of <c>shape</c> and <c>seed</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticRegexFullMatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StaticRegexFullMatch (TensorFlow.TFOutput input, string pattern, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StaticRegexFullMatch(valuetype TensorFlow.TFOutput input, string pattern, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A string tensor of the text to be processed.
            </param>
        <param name="pattern">
              The regular expression to match the input.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StaticRegexFullMatch'.
            </param>
        <summary>
              Check if the input matches the regex pattern.
            </summary>
        <returns>
              A bool tensor with the same shape as <c>input</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a string tensor of any shape. The pattern is the
              regular expression to be matched with every element of the input tensor.
              The boolean values (True or False) of the output tensor indicate
              if the input matches the regex pattern provided.
              
              The pattern follows the re2 syntax (https://github.com/google/re2/wiki/Syntax)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticRegexReplace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StaticRegexReplace (TensorFlow.TFOutput input, string pattern, string rewrite, Nullable&lt;bool&gt; replace_global = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StaticRegexReplace(valuetype TensorFlow.TFOutput input, string pattern, string rewrite, valuetype System.Nullable`1&lt;bool&gt; replace_global, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="rewrite" Type="System.String" />
        <Parameter Name="replace_global" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The text to be processed.
            </param>
        <param name="pattern">
              The regular expression to match the input.
            </param>
        <param name="rewrite">
              The rewrite to be applied to the matched expresion.
            </param>
        <param name="replace_global">
              Optional argument
              If True, the replacement is global, otherwise the replacement
              is done only on the first match.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StaticRegexReplace'.
            </param>
        <summary>
              Replaces the match of pattern in input with rewrite.
            </summary>
        <returns>
              The text after applying pattern and rewrite.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It follows the re2 syntax (https://github.com/google/re2/wiki/Syntax)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StopGradient (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StopGradient(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StopGradient'.
            </param>
        <summary>
              Stops gradient computation.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              When executed in a graph, this op outputs its input tensor as-is.
              
              When building ops to compute gradients, this op prevents the contribution of
              its inputs to be taken into account.  Normally, the gradient generator adds ops
              to a graph to compute the derivatives of a specified 'loss' by recursively
              finding out inputs that contributed to its computation.  If you insert this op
              in the graph it inputs are masked from the gradient generator.  They are not
              taken into account for computing gradients.
              
              This is useful any time you want to compute a value with TensorFlow but need
              to pretend that the value was a constant. Some examples include:
              
              *  The *EM* algorithm where the *M-step* should not involve backpropagation
              through the output of the *E-step*.
              *  Contrastive divergence training of Boltzmann machines where, when
              differentiating the energy function, the training must not backpropagate
              through the graph that generated the samples from the model.
              *  Adversarial training, where no backprop should happen through the adversarial
              example generation process.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StridedSlice">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StridedSlice (TensorFlow.TFOutput input, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, Nullable&lt;long&gt; begin_mask = null, Nullable&lt;long&gt; end_mask = null, Nullable&lt;long&gt; ellipsis_mask = null, Nullable&lt;long&gt; new_axis_mask = null, Nullable&lt;long&gt; shrink_axis_mask = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StridedSlice(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput end, valuetype TensorFlow.TFOutput strides, valuetype System.Nullable`1&lt;int64&gt; begin_mask, valuetype System.Nullable`1&lt;int64&gt; end_mask, valuetype System.Nullable`1&lt;int64&gt; ellipsis_mask, valuetype System.Nullable`1&lt;int64&gt; new_axis_mask, valuetype System.Nullable`1&lt;int64&gt; shrink_axis_mask, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="end" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="end_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ellipsis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="new_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shrink_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="begin">
          <c>begin[k]</c> specifies the offset into the <c>k</c>th range specification.
              The exact dimension this corresponds to will be determined by context.
              Out-of-bounds values will be silently clamped. If the <c>k</c>th bit of
              <c>begin_mask</c> then <c>begin[k]</c> is ignored and the full range of the
              appropriate dimension is used instead. Negative values causes indexing
              to start from the highest element e.g. If <c>foo==[1,2,3]</c> then <c>foo[-1]==3</c>.
            </param>
        <param name="end">
          <c>end[i]</c> is like <c>begin</c> with the exception that <c>end_mask</c> is
              used to determine full ranges.
            </param>
        <param name="strides">
          <c>strides[i]</c> specifies the increment in the <c>i</c>th specification
              after extracting a given element. Negative indices will reverse
              the original order. Out or range values are
              clamped to <c>[0,dim[i]) if slice[i]&amp;gt;0</c> or <c>[-1,dim[i]-1] if slice[i] &amp;lt; 0</c></param>
        <param name="begin_mask">
              Optional argument
              a bitmask where a bit i being 1 means to ignore the begin
              value and instead use the largest interval possible. At runtime
              begin[i] will be replaced with <c>[0, n-1)</c> if <c>stride[i] &amp;gt; 0</c> or
              <c>[-1, n-1]</c> if <c>stride[i] &amp;lt; 0</c></param>
        <param name="end_mask">
              Optional argument
              analogous to <c>begin_mask</c></param>
        <param name="ellipsis_mask">
              Optional argument
              a bitmask where bit <c>i</c> being 1 means the <c>i</c>th
              position is actually an ellipsis. One bit at most can be 1.
              If <c>ellipsis_mask == 0</c>, then an implicit ellipsis mask of <c>1 &amp;lt;&amp;lt; (m+1)</c>
              is provided. This means that <c>foo[3:5] == foo[3:5, ...]</c>. An ellipsis
              implicitly creates as many range specifications as necessary to fully
              specify the sliced range for every dimension. For example for a 4-dimensional
              tensor <c>foo</c> the slice <c>foo[2, ..., 5:8]</c> implies <c>foo[2, :, :, 5:8]</c>.
            </param>
        <param name="new_axis_mask">
              Optional argument
              a bitmask where bit <c>i</c> being 1 means the <c>i</c>th
              specification creates a new shape 1 dimension. For example
              <c>foo[:4, tf.newaxis, :2]</c> would produce a shape <c>(4, 1, 2)</c> tensor.
            </param>
        <param name="shrink_axis_mask">
              Optional argument
              a bitmask where bit <c>i</c> implies that the <c>i</c>th
              specification should shrink the dimensionality. begin and end
              must imply a slice of size 1 in the dimension. For example in
              python one might do <c>foo[:, 3, :]</c> which would result in
              <c>shrink_axis_mask</c> being 2.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StridedSlice'.
            </param>
        <summary>
              Return a strided slice from <c>input</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note, most python users will want to use the Python <c>Tensor.__getitem__</c>
              or <c>Variable.__getitem__</c> rather than this op directly.
              
              The goal of this op is to produce a new tensor with a subset of
              the elements from the <c>n</c> dimensional <c>input</c> tensor. The subset is chosen using
              a sequence of <c>m</c> sparse range specifications encoded into the arguments
              of this function. Note, in some cases
              <c>m</c> could be equal to <c>n</c>, but this need not be the case. Each
              range specification entry can be one of the following:
              
              - An ellipsis (...). Ellipses are used to imply zero or more
              dimensions of full-dimension selection and are produced using
              <c>ellipsis_mask</c>. For example, <c>foo[...]</c> is the identity slice.
              
              - A new axis. This is used to insert a new shape=1 dimension and is
              produced using <c>new_axis_mask</c>. For example, <c>foo[:, ...]</c> where
              <c>foo</c> is shape <c>(3, 4)</c> produces a <c>(1, 3, 4)</c> tensor.
              
              
              - A range <c>begin:end:stride</c>. This is used to specify how much to choose from
              a given dimension. <c>stride</c> can be any integer but 0.  <c>begin</c> is an integer
              which represents the index of the first value to select while <c>end</c> represents
              the index of the last value to select. The number of values selected in each
              dimension is <c>end - begin</c> if <c>stride &amp;gt; 0</c> and <c>begin - end</c> if <c>stride &amp;lt; 0</c>.
              <c>begin</c> and <c>end</c> can be negative where <c>-1</c> is the last element, <c>-2</c> is
              the second to last. <c>begin_mask</c> controls whether to replace the explicitly
              given <c>begin</c> with an implicit effective value of <c>0</c> if <c>stride &amp;gt; 0</c> and
              <c>-1</c> if <c>stride &amp;lt; 0</c>. <c>end_mask</c> is analogous but produces the number
              required to create the largest open interval. For example, given a shape
              <c>(3,)</c> tensor <c>foo[:]</c>, the effective <c>begin</c> and <c>end</c> are <c>0</c> and <c>3</c>. Do
              not assume this is equivalent to <c>foo[0:-1]</c> which has an effective <c>begin</c>
              and <c>end</c> of <c>0</c> and <c>2</c>. Another example is <c>foo[-2::-1]</c> which reverses the
              first dimension of a tensor while dropping the last two (in the original
              order elements). For example <c>foo = [1,2,3,4]; foo[-2::-1]</c> is <c>[4,3]</c>.
              
              - A single index. This is used to keep only elements that have a given
              index. For example (<c>foo[2, :]</c> on a shape <c>(5,6)</c> tensor produces a
              shape <c>(6,)</c> tensor. This is encoded in <c>begin</c> and <c>end</c> and
              <c>shrink_axis_mask</c>.
              
              Each conceptual range specification is encoded in the op's argument. This
              encoding is best understand by considering a non-trivial example. In
              particular,
              <c>foo[1, 2:4, None, ..., :-3:-1, :]</c> will be encoded as
              
               <code>
              begin = [1, 2, x, x, 0, x] # x denotes don't care (usually 0)
              end = [2, 4, x, x, -3, x]
              strides = [1, 1, x, x, -1, 1]
              begin_mask = 1&amp;lt;&amp;lt;4 | 1 &amp;lt;&amp;lt; 5 = 48
              end_mask = 1&amp;lt;&amp;lt;5 = 32
              ellipsis_mask = 1&amp;lt;&amp;lt;3 = 8
              new_axis_mask = 1&amp;lt;&amp;lt;2 4
              shrink_axis_mask = 1&amp;lt;&amp;lt;0
               </code>
              
              In this case if <c>foo.shape</c> is (5, 5, 5, 5, 5, 5) the final shape of
              the slice becomes (2, 1, 5, 5, 2, 5).
              Let us walk step by step through each argument specification.
              
              1.  The first argument in the example slice is turned into <c>begin = 1</c> and
              <c>end = begin + 1 = 2</c>. To disambiguate from the original spec <c>2:4</c> we
              also set the appropriate bit in <c>shrink_axis_mask</c>.
              
              2. <c>2:4</c> is contributes 2, 4, 1 to begin, end, and stride. All masks have
              zero bits contributed.
              
              3. None is a synonym for <c>tf.newaxis</c>. This means insert a dimension of size 1
              dimension in the final shape. Dummy values are contributed to begin,
              end and stride, while the new_axis_mask bit is set.
              
              4. <c>...</c> grab the full ranges from as many dimensions as needed to
              fully specify a slice for every dimension of the input shape.
              
              5. <c>:-3:-1</c> shows the use of negative indices. A negative index <c>i</c> associated
              with a dimension that has shape <c>s</c> is converted to a positive index
              <c>s + i</c>. So <c>-1</c> becomes <c>s-1</c> (i.e. the last element). This conversion
              is done internally so begin, end and strides receive x, -3, and -1.
              The appropriate begin_mask bit is set to indicate the start range is the
              full range (ignoring the x).
              
              6. <c>:</c> indicates that the entire contents of the corresponding dimension
              is selected. This is equivalent to <c>::</c> or <c>0::1</c>. begin, end, and strides
              receive 0, 0, and 1, respectively. The appropriate bits in <c>begin_mask</c> and
              <c>end_mask</c> are also set.
              
              *Requirements*:
              <c>0 != strides[i] for i in [0, m)</c><c>ellipsis_mask must be a power of two (only one ellipsis)</c></remarks>
      </Docs>
    </Member>
    <Member MemberName="StridedSliceAssign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StridedSliceAssign (TensorFlow.TFOutput reference, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, TensorFlow.TFOutput value, Nullable&lt;long&gt; begin_mask = null, Nullable&lt;long&gt; end_mask = null, Nullable&lt;long&gt; ellipsis_mask = null, Nullable&lt;long&gt; new_axis_mask = null, Nullable&lt;long&gt; shrink_axis_mask = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StridedSliceAssign(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput end, valuetype TensorFlow.TFOutput strides, valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;int64&gt; begin_mask, valuetype System.Nullable`1&lt;int64&gt; end_mask, valuetype System.Nullable`1&lt;int64&gt; ellipsis_mask, valuetype System.Nullable`1&lt;int64&gt; new_axis_mask, valuetype System.Nullable`1&lt;int64&gt; shrink_axis_mask, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="end" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="end_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ellipsis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="new_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shrink_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">To be added.</param>
        <param name="begin">To be added.</param>
        <param name="end">To be added.</param>
        <param name="strides">To be added.</param>
        <param name="value">To be added.</param>
        <param name="begin_mask">To be added.</param>
        <param name="end_mask">To be added.</param>
        <param name="ellipsis_mask">To be added.</param>
        <param name="new_axis_mask">To be added.</param>
        <param name="shrink_axis_mask">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StridedSliceGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StridedSliceGrad (TensorFlow.TFOutput shape, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, TensorFlow.TFOutput dy, Nullable&lt;long&gt; begin_mask = null, Nullable&lt;long&gt; end_mask = null, Nullable&lt;long&gt; ellipsis_mask = null, Nullable&lt;long&gt; new_axis_mask = null, Nullable&lt;long&gt; shrink_axis_mask = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StridedSliceGrad(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput end, valuetype TensorFlow.TFOutput strides, valuetype TensorFlow.TFOutput dy, valuetype System.Nullable`1&lt;int64&gt; begin_mask, valuetype System.Nullable`1&lt;int64&gt; end_mask, valuetype System.Nullable`1&lt;int64&gt; ellipsis_mask, valuetype System.Nullable`1&lt;int64&gt; new_axis_mask, valuetype System.Nullable`1&lt;int64&gt; shrink_axis_mask, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="end" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="end_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ellipsis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="new_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shrink_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
        </param>
        <param name="begin">
        </param>
        <param name="end">
        </param>
        <param name="strides">
        </param>
        <param name="dy">
        </param>
        <param name="begin_mask">
              Optional argument
            </param>
        <param name="end_mask">
              Optional argument
            </param>
        <param name="ellipsis_mask">
              Optional argument
            </param>
        <param name="new_axis_mask">
              Optional argument
            </param>
        <param name="shrink_axis_mask">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StridedSliceGrad'.
            </param>
        <summary>
              Returns the gradient of <c>StridedSlice</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Since <c>StridedSlice</c> cuts out pieces of its <c>input</c> which is size
              <c>shape</c>, its gradient will have the same shape (which is passed here
              as <c>shape</c>). The gradient will be zero in any element that the slice
              does not select.
              
              Arguments are the same as StridedSliceGrad with the exception that
              <c>dy</c> is the input gradient to be propagated and <c>shape</c> is the
              shape of <c>StridedSlice</c>'s <c>input</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringFormat">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringFormat (TensorFlow.TFOutput[] inputs, string template = null, string placeholder = null, Nullable&lt;long&gt; summarize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringFormat(valuetype TensorFlow.TFOutput[] inputs, string template, string placeholder, valuetype System.Nullable`1&lt;int64&gt; summarize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="template" Type="System.String" />
        <Parameter Name="placeholder" Type="System.String" />
        <Parameter Name="summarize" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              The list of tensors to format into the placeholder string.
            </param>
        <param name="template">
              Optional argument
              A string, the template to format tensor summaries into.
            </param>
        <param name="placeholder">
              Optional argument
              A string, at each placeholder in the template a subsequent tensor summary will be inserted.
            </param>
        <param name="summarize">
              Optional argument
              When formatting the tensor summaries print the first and last summarize entries of each tensor dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringFormat'.
            </param>
        <summary>
              Formats a string template using a list of tensors.
            </summary>
        <returns>
              = The resulting string scalar.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Formats a string template using a list of tensors, pretty-printing tensor summaries.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringJoin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringJoin (TensorFlow.TFOutput[] inputs, string separator = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringJoin(valuetype TensorFlow.TFOutput[] inputs, string separator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              A list of string tensors.  The tensors must all have the same shape,
              or be scalars.  Scalars may be mixed in; these will be broadcast to the shape
              of non-scalar inputs.
            </param>
        <param name="separator">
              Optional argument
              string, an optional join separator.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringJoin'.
            </param>
        <summary>
              Joins the strings in the given list of string tensors into one tensor;
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              with the given separator (default is an empty separator).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringLength">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringLength (TensorFlow.TFOutput input, string unit = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringLength(valuetype TensorFlow.TFOutput input, string unit, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="unit" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The string for which to compute the length.
            </param>
        <param name="unit">
              Optional argument
              The unit that is counted to compute string length.  One of: <c>"BYTE"</c> (for
              the number of bytes in each string) or <c>"UTF8_CHAR"</c> (for the number of UTF-8
              encoded Unicode code points in each string).  Results are undefined
              if <c>unit=UTF8_CHAR</c> and the <c>input</c> strings do not contain structurally
              valid UTF-8.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringLength'.
            </param>
        <summary>
              String lengths of <c>input</c>.
            </summary>
        <returns>
              Integer tensor that has the same shape as <c>input</c>. The output contains the
              element-wise string lengths of <c>input</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the length of each string given in the input tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSplit">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; StringSplit (TensorFlow.TFOutput input, TensorFlow.TFOutput delimiter, Nullable&lt;bool&gt; skip_empty = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; StringSplit(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput delimiter, valuetype System.Nullable`1&lt;bool&gt; skip_empty, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="delimiter" Type="TensorFlow.TFOutput" />
        <Parameter Name="skip_empty" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D. Strings to split.
            </param>
        <param name="delimiter">
              0-D. Delimiter characters (bytes), or empty string.
            </param>
        <param name="skip_empty">
              Optional argument
              A <c>bool</c>. If <c>True</c>, skip the empty strings from the result.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringSplit'.
            </param>
        <summary>
              Split elements of <c>input</c> based on <c>delimiter</c> into a <c>SparseTensor</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              indices: A dense matrix of int64 representing the indices of the sparse tensor.
              values: A vector of strings corresponding to the splited values.
              shape: a length-2 vector of int64 representing the shape of the sparse
              tensor, where the first value is N and the second value is the maximum number
              of tokens in a single input entry.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Let N be the size of source (typically N will be the batch size). Split each
              element of <c>input</c> based on <c>delimiter</c> and return a <c>SparseTensor</c>
              containing the splitted tokens. Empty tokens are ignored.
              
              <c>delimiter</c> can be empty, or a string of split characters. If <c>delimiter</c> is an
              empty string, each element of <c>input</c> is split into individual single-byte
              character strings, including splitting of UTF-8 multibyte sequences. Otherwise
              every character of <c>delimiter</c> is a potential split point.
              
              For example:
              N = 2, input[0] is 'hello world' and input[1] is 'a b c', then the output
              will be
              
              indices = [0, 0;
              0, 1;
              1, 0;
              1, 1;
              1, 2]
              shape = [2, 3]
              values = ['hello', 'world', 'a', 'b', 'c']
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSplitV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; StringSplitV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput sep, Nullable&lt;long&gt; maxsplit = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; StringSplitV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput sep, valuetype System.Nullable`1&lt;int64&gt; maxsplit, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="sep" Type="TensorFlow.TFOutput" />
        <Parameter Name="maxsplit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <c>1-D</c> string <c>Tensor</c>, the strings to split.
            </param>
        <param name="sep">
          <c>0-D</c> string <c>Tensor</c>, the delimiter character.
            </param>
        <param name="maxsplit">
              Optional argument
              An <c>int</c>. If <c>maxsplit &amp;gt; 0</c>, limit of the split of the result.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringSplitV2'.
            </param>
        <summary>
              Split elements of <c>source</c> based on <c>sep</c> into a <c>SparseTensor</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              indices:
              values:
              shape:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Let N be the size of source (typically N will be the batch size). Split each
              element of <c>source</c> based on <c>sep</c> and return a <c>SparseTensor</c>
              containing the split tokens. Empty tokens are ignored.
              
              For example, N = 2, source[0] is 'hello world' and source[1] is 'a b c',
              then the output will be
               <code>
              st.indices = [0, 0;
              0, 1;
              1, 0;
              1, 1;
              1, 2]
              st.shape = [2, 3]
              st.values = ['hello', 'world', 'a', 'b', 'c']
               </code>
              
              If <c>sep</c> is given, consecutive delimiters are not grouped together and are
              deemed to delimit empty strings. For example, source of <c>"1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;&amp;lt;&amp;gt;3"</c> and
              sep of <c>"&amp;lt;&amp;gt;"</c> returns <c>["1", "2", "", "3"]</c>. If <c>sep</c> is None or an empty
              string, consecutive whitespace are regarded as a single separator, and the
              result will contain no empty strings at the startor end if the string has
              leading or trailing whitespace.
              
              Note that the above mentioned behavior matches python's str.split.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringStrip">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringStrip (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringStrip(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A string <c>Tensor</c> of any shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringStrip'.
            </param>
        <summary>
              Strip leading and trailing whitespaces from the Tensor.
            </summary>
        <returns>
              A string <c>Tensor</c> of the same shape as the input.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHashBucket">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToHashBucket (TensorFlow.TFOutput string_tensor, long num_buckets, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToHashBucket(valuetype TensorFlow.TFOutput string_tensor, int64 num_buckets, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string_tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string_tensor">
        </param>
        <param name="num_buckets">
              The number of buckets.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucket'.
            </param>
        <summary>
              Converts each string in the input Tensor to its hash mod by a number of buckets.
            </summary>
        <returns>
              A Tensor of the same shape as the input <c>string_tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The hash function is deterministic on the content of the string within the
              process.
              
              Note that the hash function may change from time to time.
              This functionality will be deprecated and it's recommended to use
              <c>tf.string_to_hash_bucket_fast()</c> or <c>tf.string_to_hash_bucket_strong()</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHashBucketFast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToHashBucketFast (TensorFlow.TFOutput input, long num_buckets, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToHashBucketFast(valuetype TensorFlow.TFOutput input, int64 num_buckets, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The strings to assign a hash bucket.
            </param>
        <param name="num_buckets">
              The number of buckets.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucketFast'.
            </param>
        <summary>
              Converts each string in the input Tensor to its hash mod by a number of buckets.
            </summary>
        <returns>
              A Tensor of the same shape as the input <c>string_tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The hash function is deterministic on the content of the string within the
              process and will never change. However, it is not suitable for cryptography.
              This function may be used when CPU time is scarce and inputs are trusted or
              unimportant. There is a risk of adversaries constructing inputs that all hash
              to the same bucket. To prevent this problem, use a strong hash function with
              <c>tf.string_to_hash_bucket_strong</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHashBucketStrong">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToHashBucketStrong (TensorFlow.TFOutput input, long num_buckets, long[] key, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToHashBucketStrong(valuetype TensorFlow.TFOutput input, int64 num_buckets, int64[] key, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="key" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The strings to assign a hash bucket.
            </param>
        <param name="num_buckets">
              The number of buckets.
            </param>
        <param name="key">
              The key for the keyed hash function passed as a list of two uint64
              elements.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucketStrong'.
            </param>
        <summary>
              Converts each string in the input Tensor to its hash mod by a number of buckets.
            </summary>
        <returns>
              A Tensor of the same shape as the input <c>string_tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The hash function is deterministic on the content of the string within the
              process. The hash function is a keyed hash function, where attribute <c>key</c>
              defines the key of the hash function. <c>key</c> is an array of 2 elements.
              
              A strong hash is important when inputs may be malicious, e.g. URLs with
              additional components. Adversaries could try to make their inputs hash to the
              same bucket for a denial-of-service attack or to skew the results. A strong
              hash prevents this by making it difficult, if not infeasible, to compute inputs
              that hash to the same bucket. This comes at a cost of roughly 4x higher compute
              time than <c>tf.string_to_hash_bucket_fast</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToNumber">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToNumber (TensorFlow.TFOutput string_tensor, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToNumber(valuetype TensorFlow.TFOutput string_tensor, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string_tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string_tensor">
        </param>
        <param name="out_type">
              Optional argument
              The numeric type to interpret each string in <c>string_tensor</c> as.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToNumber'.
            </param>
        <summary>
              Converts each string in the input Tensor to the specified numeric type.
            </summary>
        <returns>
              A Tensor of the same shape as the input <c>string_tensor</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              (Note that int32 overflow results in an error while float overflow
              results in a rounded value.)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sub (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sub(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sub'.
            </param>
        <summary>
              Returns x - y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: <c>Subtract</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sum (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sum(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce. Must be in the range
              <c>[-rank(input), rank(input))</c>.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sum'.
            </param>
        <summary>
              Computes the sum of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces <c>input</c> along the dimensions given in <c>axis</c>. Unless
              <c>keep_dims</c> is true, the rank of the tensor is reduced by 1 for each entry in
              <c>axis</c>. If <c>keep_dims</c> is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Svd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Svd (TensorFlow.TFOutput input, Nullable&lt;bool&gt; compute_uv = null, Nullable&lt;bool&gt; full_matrices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Svd(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; compute_uv, valuetype System.Nullable`1&lt;bool&gt; full_matrices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="compute_uv" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="full_matrices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A tensor of shape <c>[..., M, N]</c> whose inner-most 2 dimensions
              form matrices of size <c>[M, N]</c>. Let <c>P</c> be the minimum of <c>M</c> and <c>N</c>.
            </param>
        <param name="compute_uv">
              Optional argument
              If true, left and right singular vectors will be
              computed and returned in <c>u</c> and <c>v</c>, respectively.
              If false, <c>u</c> and <c>v</c> are not set and should never referenced.
            </param>
        <param name="full_matrices">
              Optional argument
              If true, compute full-sized <c>u</c> and <c>v</c>. If false
              (the default), compute only the leading <c>P</c> singular vectors.
              Ignored if <c>compute_uv</c> is <c>False</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Svd'.
            </param>
        <summary>
              Computes the singular value decompositions of one or more matrices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              s: Singular values. Shape is <c>[..., P]</c>.
              u: Left singular vectors. If <c>full_matrices</c> is <c>False</c> then shape is
              <c>[..., M, P]</c>; if <c>full_matrices</c> is <c>True</c> then shape is
              <c>[..., M, M]</c>. Undefined if <c>compute_uv</c> is <c>False</c>.
              v: Left singular vectors. If <c>full_matrices</c> is <c>False</c> then shape is
              <c>[..., N, P]</c>. If <c>full_matrices</c> is <c>True</c> then shape is <c>[..., N, N]</c>.
              Undefined if <c>compute_uv</c> is false.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the SVD of each inner matrix in <c>input</c> such that
              <c>input[..., :, :] = u[..., :, :] * diag(s[..., :, :]) * transpose(v[..., :, :])</c><code>
              # a is a tensor containing a batch of matrices.
              # s is a tensor of singular values for each matrix.
              # u is the tensor containing of left singular vectors for each matrix.
              # v is the tensor containing of right singular vectors for each matrix.
              s, u, v = svd(a)
              s, _, _ = svd(a, compute_uv=False)
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Switch (TensorFlow.TFOutput data, TensorFlow.TFOutput pred, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Switch(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput pred, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="pred" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be forwarded to the appropriate output.
            </param>
        <param name="pred">
              A scalar that specifies which output port will receive data.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Switch'.
            </param>
        <summary>
              Forwards <c>data</c> to the output port determined by <c>pred</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_false: If <c>pred</c> is false, data will be forwarded to this output.
              output_true: If <c>pred</c> is true, data will be forwarded to this output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If <c>pred</c> is true, the <c>data</c> input is forwarded to <c>output_true</c>. Otherwise,
              the data goes to <c>output_false</c>.
              
              See also <c>RefSwitch</c> and <c>Merge</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TakeDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TakeDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput count, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="count" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="count">
              A scalar representing the number of elements from the <c>input_dataset</c>
              that should be taken. A value of <c>-1</c> indicates that all of <c>input_dataset</c>
              is taken.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TakeDataset'.
            </param>
        <summary>
              Creates a dataset that contains <c>count</c> elements from the <c>input_dataset</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeManySparseFromTensorsMap">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TakeManySparseFromTensorsMap (TensorFlow.TFOutput sparse_handles, TensorFlow.TFDataType dtype, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TakeManySparseFromTensorsMap(valuetype TensorFlow.TFOutput sparse_handles, valuetype TensorFlow.TFDataType dtype, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_handles" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_handles">
              1-D, The <c>N</c> serialized <c>SparseTensor</c> objects.
              Shape: <c>[N]</c>.
            </param>
        <param name="dtype">
              The <c>dtype</c> of the <c>SparseTensor</c> objects stored in the
              <c>SparseTensorsMap</c>.
            </param>
        <param name="container">
              Optional argument
              The container name for the <c>SparseTensorsMap</c> read by this op.
            </param>
        <param name="shared_name">
              Optional argument
              The shared name for the <c>SparseTensorsMap</c> read by this op.
              It should not be blank; rather the <c>shared_name</c> or unique Operation name
              of the Op that created the original <c>SparseTensorsMap</c> should be used.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TakeManySparseFromTensorsMap'.
            </param>
        <summary>
              Read <c>SparseTensors</c> from a <c>SparseTensorsMap</c> and concatenate them.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices: 2-D.  The <c>indices</c> of the minibatch <c>SparseTensor</c>.
              sparse_values: 1-D.  The <c>values</c> of the minibatch <c>SparseTensor</c>.
              sparse_shape: 1-D.  The <c>shape</c> of the minibatch <c>SparseTensor</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input <c>sparse_handles</c> must be an <c>int64</c> matrix of shape <c>[N, 1]</c> where
              <c>N</c> is the minibatch size and the rows correspond to the output handles of
              <c>AddSparseToTensorsMap</c> or <c>AddManySparseToTensorsMap</c>.  The ranks of the
              original <c>SparseTensor</c> objects that went into the given input ops must all
              match.  When the final <c>SparseTensor</c> is created, it has rank one
              higher than the ranks of the incoming <c>SparseTensor</c> objects
              (they have been concatenated along a new row dimension on the left).
              
              The output <c>SparseTensor</c> object's shape values for all dimensions but the
              first are the max across the input <c>SparseTensor</c> objects' shape values
              for the corresponding dimensions.  Its first shape value is <c>N</c>, the minibatch
              size.
              
              The input <c>SparseTensor</c> objects' indices are assumed ordered in
              standard lexicographic order.  If this is not the case, after this
              step run <c>SparseReorder</c> to restore index ordering.
              
              For example, if the handles represent an input, which is a <c>[2, 3]</c> matrix
              representing two original <c>SparseTensor</c> objects:
              
               <code>
              index = [ 0]
              [10]
              [20]
              values = [1, 2, 3]
              shape = [50]
               </code>
              
              and
              
               <code>
              index = [ 2]
              [10]
              values = [4, 5]
              shape = [30]
               </code>
              
              then the final <c>SparseTensor</c> will be:
              
               <code>
              index = [0  0]
              [0 10]
              [0 20]
              [1  2]
              [1 10]
              values = [1, 2, 3, 4, 5]
              shape = [2 50]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Tan (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Tan(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Tan'.
            </param>
        <summary>
              Computes tan of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Tanh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Tanh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Tanh'.
            </param>
        <summary>
              Computes hyperbolic tangent of <c>x</c> element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TanhGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TanhGrad (TensorFlow.TFOutput y, TensorFlow.TFOutput dy, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TanhGrad(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput dy, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="dy">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TanhGrad'.
            </param>
        <summary>
              Computes the gradient for the tanh of <c>x</c> wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, <c>grad = dy * (1 - y*y)</c>, where <c>y = tanh(x)</c>, and <c>dy</c>
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporaryVariable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TemporaryVariable (TensorFlow.TFShape shape, TensorFlow.TFDataType dtype, string var_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TemporaryVariable(class TensorFlow.TFShape shape, valuetype TensorFlow.TFDataType dtype, string var_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="var_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the variable tensor.
            </param>
        <param name="dtype">
              The type of elements in the variable tensor.
            </param>
        <param name="var_name">
              Optional argument
              Overrides the name used for the temporary variable resource. Default
              value is the name of the 'TemporaryVariable' op (which is guaranteed unique).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TemporaryVariable'.
            </param>
        <summary>
              Returns a tensor that may be mutated, but only persists within a single step.
            </summary>
        <returns>
              A reference to the variable tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is an experimental op for internal use only and it is possible to use this
              op in unsafe ways.  DO NOT USE unless you fully understand the risks.
              
              It is the caller's responsibility to ensure that 'ref' is eventually passed to a
              matching 'DestroyTemporaryVariable' op after all other uses have completed.
              
              Outputs a ref to the tensor state so it may be read or modified.
              
              E.g.
              var = state_ops._temporary_variable([1, 2], types.float_)
              var_name = var.op.name
              var = state_ops.assign(var, [[4.0, 5.0]])
              var = state_ops.assign_add(var, [[6.0, 7.0]])
              final = state_ops._destroy_temporary_variable(var, var_name=var_name)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayCloseV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation TensorArrayCloseV2 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation TensorArrayCloseV2(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayCloseV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayCloseV3
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayCloseV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation TensorArrayCloseV3 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation TensorArrayCloseV3(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray (output of TensorArray or TensorArrayGrad).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayCloseV3'.
            </param>
        <summary>
              Delete the TensorArray from its resource container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This enables the user to close and release the resource in the middle
              of a step/run.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayConcatV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayConcatV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape_except0 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayConcatV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape_except0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape_except0" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="flow_in">
        </param>
        <param name="dtype">
        </param>
        <param name="element_shape_except0">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayConcatV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayConcatV3
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              value:
              lengths:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayConcatV3">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayConcatV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape_except0 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayConcatV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape_except0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape_except0" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="dtype">
              The type of the elem that is returned.
            </param>
        <param name="element_shape_except0">
              Optional argument
              The expected shape of an element, if known,
              excluding the first dimension. Used to validate the shapes of
              TensorArray elements. If this shape is not fully specified, concatenating
              zero-size TensorArrays is an error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayConcatV3'.
            </param>
        <summary>
              Concat the elements from the TensorArray into value <c>value</c>.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              value: All of the elements in the TensorArray, concatenated along the first
              axis.
              lengths: A vector of the row sizes of the original T elements in the
              value output.  In the example above, this would be the values:
              <c>(n1, n2, ..., n(T-1))</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Takes <c>T</c> elements of shapes
              
               <code>
              (n0 x d0 x d1 x ...), (n1 x d0 x d1 x ...), ..., (n(T-1) x d0 x d1 x ...)
               </code>
              
              and concatenates them into a Tensor of shape:
              
               <code>
               (n0 + n1 + ... + n(T-1) x d0 x d1 x ...)
               </code>
              
              All elements must have the same shape (excepting the first dimension).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGatherV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayGatherV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayGatherV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="indices">
        </param>
        <param name="flow_in">
        </param>
        <param name="dtype">
        </param>
        <param name="element_shape">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGatherV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayGatherV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGatherV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayGatherV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayGatherV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="indices">
              The locations in the TensorArray from which to read tensor elements.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="dtype">
              The type of the elem that is returned.
            </param>
        <param name="element_shape">
              Optional argument
              The expected shape of an element, if known. Used to
              validate the shapes of TensorArray elements. If this shape is not
              fully specified, gathering zero-size TensorArrays is an error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGatherV3'.
            </param>
        <summary>
              Gather specific elements from the TensorArray into output <c>value</c>.
            </summary>
        <returns>
              All of the elements in the TensorArray, concatenated along a new
              axis (the new dimension 0).
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              All elements selected by <c>indices</c> must have the same shape.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGradV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayGradV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string source, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayGradV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string source, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="flow_in">
        </param>
        <param name="source">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGradV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayGradV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGradV3">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayGradV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string source, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayGradV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string source, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to the forward TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="source">
              The gradient source string, used to decide which gradient TensorArray
              to return.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGradV3'.
            </param>
        <summary>
              Creates a TensorArray for storing the gradients of values in the given handle.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              grad_handle:
              flow_out:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the given TensorArray gradient already exists, returns a reference to it.
              
              Locks the size of the original TensorArray by disabling its dynamic size flag.
              
              **A note about the input flow_in:**
              
              The handle flow_in forces the execution of the gradient lookup to occur
              only after certain other operations have occurred.  For example, when
              the forward TensorArray is dynamically sized, writes to this TensorArray
              may resize the object.  The gradient TensorArray is statically sized based
              on the size of the forward TensorArray when this operation executes.
              Furthermore, the size of the forward TensorArray is frozen by this call.
              As a result, the flow is used to ensure that the call to generate the gradient
              TensorArray only happens after all writes are executed.
              
              In the case of dynamically sized TensorArrays, gradient computation should
              only be performed on read operations that have themselves been chained via
              flow to occur only after all writes have executed. That way the final size
              of the forward TensorArray is known when this operation is called.
              
              **A note about the source attribute:**
              
              TensorArray gradient calls use an accumulator TensorArray object.  If
              multiple gradients are calculated and run in the same session, the multiple
              gradient nodes may accidentally flow through the same accumulator TensorArray.
              This double counts and generally breaks the TensorArray gradient flow.
              
              The solution is to identify which gradient call this particular
              TensorArray gradient is being called in.  This is performed by identifying
              a unique string (e.g. "gradients", "gradients_1", ...) from the input
              gradient Tensor's name.  This string is used as a suffix when creating
              the TensorArray gradient object here (the attribute <c>source</c>).
              
              The attribute <c>source</c> is added as a suffix to the forward TensorArray's
              name when performing the creation / lookup, so that each separate gradient
              calculation gets its own TensorArray accumulator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGradWithShape">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayGradWithShape (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, TensorFlow.TFOutput shape_to_prepend, string source, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayGradWithShape(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFOutput shape_to_prepend, string source, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_to_prepend" Type="TensorFlow.TFOutput" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to the forward TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="shape_to_prepend">
              An int32 vector representing a shape. Elements in the gradient accumulator will
              have shape which is this shape_to_prepend value concatenated with shape of the
              elements in the TensorArray corresponding to the input handle.
            </param>
        <param name="source">
              The gradient source string, used to decide which gradient TensorArray
              to return.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGradWithShape'.
            </param>
        <summary>
              Creates a TensorArray for storing multiple gradients of values in the given handle.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              grad_handle:
              flow_out:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Similar to TensorArrayGradV3. However it creates an accumulator with an
              expanded shape compared to the input TensorArray whose gradient is being
              computed. This enables multiple gradients for the same TensorArray to be
              calculated using the same accumulator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayReadV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayReadV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayReadV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="index">
        </param>
        <param name="flow_in">
        </param>
        <param name="dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayReadV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayReadV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayReadV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayReadV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayReadV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="index">
        </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="dtype">
              The type of the elem that is returned.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayReadV3'.
            </param>
        <summary>
              Read an element from the TensorArray into output <c>value</c>.
            </summary>
        <returns>
              The tensor that is read from the TensorArray.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayScatterV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayScatterV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayScatterV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="indices">
        </param>
        <param name="value">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayScatterV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayScatterV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayScatterV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayScatterV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayScatterV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="indices">
              The locations at which to write the tensor elements.
            </param>
        <param name="value">
              The concatenated tensor to write to the TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayScatterV3'.
            </param>
        <summary>
              Scatter the data from the input value into specific TensorArray elements.
            </summary>
        <returns>
              A float scalar that enforces proper chaining of operations.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
          <c>indices</c> must be a vector, its length must match the first dim of <c>value</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySizeV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySizeV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySizeV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySizeV2'.
            </param>
        <summary>
              Deprecated. Use TensorArraySizeV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySizeV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySizeV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySizeV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray (output of TensorArray or TensorArrayGrad).
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySizeV3'.
            </param>
        <summary>
              Get the current size of the TensorArray.
            </summary>
        <returns>
              The current size of the TensorArray.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySplitV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySplitV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput value, TensorFlow.TFOutput lengths, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySplitV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput lengths, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="lengths" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="value">
        </param>
        <param name="lengths">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySplitV2'.
            </param>
        <summary>
              Deprecated. Use TensorArraySplitV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySplitV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySplitV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput value, TensorFlow.TFOutput lengths, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySplitV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput lengths, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="lengths" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="value">To be added.</param>
        <param name="lengths">To be added.</param>
        <param name="flow_in">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayV2 (TensorFlow.TFOutput size, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, Nullable&lt;bool&gt; dynamic_size = null, Nullable&lt;bool&gt; clear_after_read = null, string tensor_array_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayV2(valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, valuetype System.Nullable`1&lt;bool&gt; dynamic_size, valuetype System.Nullable`1&lt;bool&gt; clear_after_read, string tensor_array_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dynamic_size" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="clear_after_read" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="tensor_array_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="size">
        </param>
        <param name="dtype">
        </param>
        <param name="element_shape">
              Optional argument
            </param>
        <param name="dynamic_size">
              Optional argument
            </param>
        <param name="clear_after_read">
              Optional argument
            </param>
        <param name="tensor_array_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayV3">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayV3 (TensorFlow.TFOutput size, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, Nullable&lt;bool&gt; dynamic_size = null, Nullable&lt;bool&gt; clear_after_read = null, Nullable&lt;bool&gt; identical_element_shapes = null, string tensor_array_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayV3(valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, valuetype System.Nullable`1&lt;bool&gt; dynamic_size, valuetype System.Nullable`1&lt;bool&gt; clear_after_read, valuetype System.Nullable`1&lt;bool&gt; identical_element_shapes, string tensor_array_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dynamic_size" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="clear_after_read" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="identical_element_shapes" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="tensor_array_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="size">
              The size of the array.
            </param>
        <param name="dtype">
              The type of the elements on the tensor_array.
            </param>
        <param name="element_shape">
              Optional argument
              The expected shape of an element, if known. Used to
              validate the shapes of TensorArray elements. If this shape is not
              fully specified, gathering zero-size TensorArrays is an error.
            </param>
        <param name="dynamic_size">
              Optional argument
              A boolean that determines whether writes to the TensorArray
              are allowed to grow the size.  By default, this is not allowed.
            </param>
        <param name="clear_after_read">
              Optional argument
              If true (default), Tensors in the TensorArray are cleared
              after being read.  This disables multiple read semantics but allows early
              release of memory.
            </param>
        <param name="identical_element_shapes">
              Optional argument
              If true (default is false), then all
              elements in the TensorArray will be expected to have have identical shapes.
              This allows certain behaviors, like dynamically checking for
              consistent shapes on write, and being able to fill in properly
              shaped zero tensors on stack -- even if the element_shape attribute
              is not fully defined.
            </param>
        <param name="tensor_array_name">
              Optional argument
              Overrides the name used for the temporary tensor_array
              resource. Default value is the name of the 'TensorArray' op (which
              is guaranteed unique).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayV3'.
            </param>
        <summary>
              An array of Tensors of given size.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              handle: The handle to the TensorArray.
              flow: A scalar used to control gradient flow.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Write data via Write and read via Read or Pack.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayWriteV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayWriteV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayWriteV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="index">
        </param>
        <param name="value">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayWriteV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayGradV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayWriteV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayWriteV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayWriteV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="index">
              The position to write to inside the TensorArray.
            </param>
        <param name="value">
              The tensor to write to the TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayWriteV3'.
            </param>
        <summary>
              Push an element onto the tensor_array.
            </summary>
        <returns>
              A float scalar that enforces proper chaining of operations.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorDataset (TensorFlow.TFOutput[] components, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorDataset(valuetype TensorFlow.TFOutput[] components, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="components">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorDataset'.
            </param>
        <summary>
              Creates a dataset that emits <c>components</c> as a tuple of tensors once.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListElementShape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListElementShape (TensorFlow.TFOutput input_handle, TensorFlow.TFDataType shape_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListElementShape(valuetype TensorFlow.TFOutput input_handle, valuetype TensorFlow.TFDataType shape_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="shape_type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListElementShape'.
            </param>
        <summary>
              The shape of the elements of the given list, as a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              input_handle: the list
              element_shape: the shape of elements of the list
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListFromTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListFromTensor (TensorFlow.TFOutput tensor, TensorFlow.TFOutput element_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListFromTensor(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput element_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
        </param>
        <param name="element_shape">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListFromTensor'.
            </param>
        <summary>
              Creates a TensorList which, when stacked, has the value of <c>tensor</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each tensor in the result list corresponds to one row of the input tensor.
              
              tensor: The input tensor.
              output_handle: The list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListGather">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListGather (TensorFlow.TFOutput input_handle, TensorFlow.TFOutput indices, TensorFlow.TFDataType element_dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListGather(valuetype TensorFlow.TFOutput input_handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType element_dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="indices">
        </param>
        <param name="element_dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListGather'.
            </param>
        <summary>
              Creates a Tensor by indexing into the TensorList.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each row in the produced Tensor corresponds to the element in the TensorList
              specified by the given index (see <c>tf.gather</c>).
              
              input_handle: The input tensor list.
              indices: The indices used to index into the list.
              values: The tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListGetItem">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListGetItem (TensorFlow.TFOutput input_handle, TensorFlow.TFOutput index, TensorFlow.TFDataType element_dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListGetItem(valuetype TensorFlow.TFOutput input_handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFDataType element_dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="index">
        </param>
        <param name="element_dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListGetItem'.
            </param>
        <summary>
              Returns the item in the list with the given index.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              input_handle: the list
              index: the position in the list from which an element will be retrieved
              item: the element at that position
              
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListLength">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListLength (TensorFlow.TFOutput input_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListLength(valuetype TensorFlow.TFOutput input_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListLength'.
            </param>
        <summary>
              Returns the number of tensors in the input tensor list.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              input_handle: the input list
              length: the number of tensors in the list
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListPopBack">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorListPopBack (TensorFlow.TFOutput input_handle, TensorFlow.TFDataType element_dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorListPopBack(valuetype TensorFlow.TFOutput input_handle, valuetype TensorFlow.TFDataType element_dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="element_dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListPopBack'.
            </param>
        <summary>
              Returns the last element of the input list as well as a list with all but that element.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_handle:
              tensor:
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Fails if the list is empty.
              
              input_handle: the input list
              tensor: the withdrawn last element of the list
              element_dtype: the type of elements in the list
              element_shape: the shape of the output tensor
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListPushBack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListPushBack (TensorFlow.TFOutput input_handle, TensorFlow.TFOutput tensor, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListPushBack(valuetype TensorFlow.TFOutput input_handle, valuetype TensorFlow.TFOutput tensor, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="tensor">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListPushBack'.
            </param>
        <summary>
              Returns a list list which has the passed-in <c>Tensor</c> as last element and the other elements of the given list in <c>input_handle</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              tensor: The tensor to put on the list.
              input_handle: The old list.
              output_handle: A list with the elements of the old list followed by tensor.
              element_dtype: the type of elements in the list.
              element_shape: a shape compatible with that of elements in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListReserve">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListReserve (TensorFlow.TFOutput element_shape, TensorFlow.TFOutput num_elements, TensorFlow.TFDataType element_dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListReserve(valuetype TensorFlow.TFOutput element_shape, valuetype TensorFlow.TFOutput num_elements, valuetype TensorFlow.TFDataType element_dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_elements" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="element_shape">
        </param>
        <param name="num_elements">
        </param>
        <param name="element_dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListReserve'.
            </param>
        <summary>
              List of the given size with empty elements.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              element_shape: the shape of the future elements of the list
              num_elements: the number of elements to reserve
              handle: the output list
              element_dtype: the desired type of elements in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListScatter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListScatter (TensorFlow.TFOutput tensor, TensorFlow.TFOutput indices, TensorFlow.TFOutput element_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListScatter(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput element_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
        </param>
        <param name="indices">
        </param>
        <param name="element_shape">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListScatter'.
            </param>
        <summary>
              Creates a TensorList by indexing into a Tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each member of the TensorList corresponds to one row of the input tensor,
              specified by the given index (see <c>tf.gather</c>).
              
              tensor: The input tensor.
              indices: The indices used to index into the list.
              element_shape: The shape of the elements in the list (can be less specified than
              the shape of the tensor).
              output_handle: The TensorList.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListSetItem">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListSetItem (TensorFlow.TFOutput input_handle, TensorFlow.TFOutput index, TensorFlow.TFOutput item, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListSetItem(valuetype TensorFlow.TFOutput input_handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput item, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="item" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="index">
        </param>
        <param name="item">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListSetItem'.
            </param>
        <summary>
              Sets the index-th position of the list to contain the given tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              input_handle: the list
              index: the position in the list to which the tensor will be assigned
              item: the element to be assigned to that position
              output_handle: the new list, with the element in the proper position
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorListStack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorListStack (TensorFlow.TFOutput input_handle, TensorFlow.TFDataType element_dtype, Nullable&lt;long&gt; num_elements = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorListStack(valuetype TensorFlow.TFOutput input_handle, valuetype TensorFlow.TFDataType element_dtype, valuetype System.Nullable`1&lt;int64&gt; num_elements, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="element_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="num_elements" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_handle">
        </param>
        <param name="element_dtype">
        </param>
        <param name="num_elements">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorListStack'.
            </param>
        <summary>
              Stacks all tensors in the list.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Requires that all tensors have the same shape.
              
              input_handle: the input list
              tensor: the gathered result
              num_elements: optional. If not -1, the number of elements in the list.
              
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorSliceDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorSliceDataset (TensorFlow.TFOutput[] components, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorSliceDataset(valuetype TensorFlow.TFOutput[] components, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="components">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSliceDataset'.
            </param>
        <summary>
              Creates a dataset that emits each dim-0 slice of <c>components</c> once.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorSummary (TensorFlow.TFOutput tensor, string description = null, string[] labels = null, string display_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorSummary(valuetype TensorFlow.TFOutput tensor, string description, string[] labels, string display_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="labels" Type="System.String[]" />
        <Parameter Name="display_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
              A tensor to serialize.
            </param>
        <param name="description">
              Optional argument
              A json-encoded SummaryDescription proto.
            </param>
        <param name="labels">
              Optional argument
              An unused list of strings.
            </param>
        <param name="display_name">
              Optional argument
              An unused string.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSummary'.
            </param>
        <summary>
              Outputs a <c>Summary</c> protocol buffer with a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is being phased out in favor of TensorSummaryV2, which lets callers pass
              a tag as well as a serialized SummaryMetadata proto string that contains
              plugin-specific data. We will keep this op to maintain backwards compatibility.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorSummaryV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorSummaryV2 (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, TensorFlow.TFOutput serialized_summary_metadata, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorSummaryV2(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput serialized_summary_metadata, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="serialized_summary_metadata" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              A string attached to this summary. Used for organization in TensorBoard.
            </param>
        <param name="tensor">
              A tensor to serialize.
            </param>
        <param name="serialized_summary_metadata">
              A serialized SummaryMetadata proto. Contains plugin
              data.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSummaryV2'.
            </param>
        <summary>
              Outputs a <c>Summary</c> protocol buffer with a tensor and per-plugin data.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TextLineDataset (TensorFlow.TFOutput filenames, TensorFlow.TFOutput compression_type, TensorFlow.TFOutput buffer_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TextLineDataset(valuetype TensorFlow.TFOutput filenames, valuetype TensorFlow.TFOutput compression_type, valuetype TensorFlow.TFOutput buffer_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="TensorFlow.TFOutput" />
        <Parameter Name="compression_type" Type="TensorFlow.TFOutput" />
        <Parameter Name="buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filenames">
              A scalar or a vector containing the name(s) of the file(s) to be
              read.
            </param>
        <param name="compression_type">
              A scalar containing either (i) the empty string (no
              compression), (ii) "ZLIB", or (iii) "GZIP".
            </param>
        <param name="buffer_size">
              A scalar containing the number of bytes to buffer.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TextLineDataset'.
            </param>
        <summary>
              Creates a dataset that emits the lines of one or more text files.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineReader">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TextLineReader (Nullable&lt;long&gt; skip_header_lines = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TextLineReader(valuetype System.Nullable`1&lt;int64&gt; skip_header_lines, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skip_header_lines" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="skip_header_lines">
              Optional argument
              Number of lines to skip from the beginning of every file.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TextLineReader'.
            </param>
        <summary>
              A Reader that outputs the lines of a file delimited by '\n'.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TextLineReaderV2 (Nullable&lt;long&gt; skip_header_lines = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TextLineReaderV2(valuetype System.Nullable`1&lt;int64&gt; skip_header_lines, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skip_header_lines" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="skip_header_lines">
              Optional argument
              Number of lines to skip from the beginning of every file.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TextLineReaderV2'.
            </param>
        <summary>
              A Reader that outputs the lines of a file delimited by '\n'.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TFRecordDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TFRecordDataset (TensorFlow.TFOutput filenames, TensorFlow.TFOutput compression_type, TensorFlow.TFOutput buffer_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TFRecordDataset(valuetype TensorFlow.TFOutput filenames, valuetype TensorFlow.TFOutput compression_type, valuetype TensorFlow.TFOutput buffer_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="TensorFlow.TFOutput" />
        <Parameter Name="compression_type" Type="TensorFlow.TFOutput" />
        <Parameter Name="buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filenames">
              A scalar or vector containing the name(s) of the file(s) to be
              read.
            </param>
        <param name="compression_type">
              A scalar containing either (i) the empty string (no
              compression), (ii) "ZLIB", or (iii) "GZIP".
            </param>
        <param name="buffer_size">
              A scalar representing the number of bytes to buffer. A value of
              0 means no buffering will be performed.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TFRecordDataset'.
            </param>
        <summary>
              Creates a dataset that emits the records from one or more TFRecord files.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TFRecordReader">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TFRecordReader (string container = null, string shared_name = null, string compression_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TFRecordReader(string container, string shared_name, string compression_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="compression_type" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="compression_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TFRecordReader'.
            </param>
        <summary>
              A Reader that outputs the records from a TensorFlow Records file.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TFRecordReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TFRecordReaderV2 (string container = null, string shared_name = null, string compression_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TFRecordReaderV2(string container, string shared_name, string compression_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="compression_type" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="compression_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TFRecordReaderV2'.
            </param>
        <summary>
              A Reader that outputs the records from a TensorFlow Records file.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadUnsafeUnigramCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ThreadUnsafeUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ThreadUnsafeUnigramCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ThreadUnsafeUnigramCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tile">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Tile (TensorFlow.TFOutput input, TensorFlow.TFOutput multiples, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Tile(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput multiples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="multiples" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D or higher.
            </param>
        <param name="multiples">
              1-D. Length must be the same as the number of dimensions in <c>input</c></param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Tile'.
            </param>
        <summary>
              Constructs a tensor by tiling a given tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation creates a new tensor by replicating <c>input</c><c>multiples</c> times.
              The output tensor's i'th dimension has <c>input.dims(i) * multiples[i]</c> elements,
              and the values of <c>input</c> are replicated <c>multiples[i]</c> times along the 'i'th
              dimension. For example, tiling <c>[a b c d]</c> by <c>[2]</c> produces
              <c>[a b c d a b c d]</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TileGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TileGrad (TensorFlow.TFOutput input, TensorFlow.TFOutput multiples, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TileGrad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput multiples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="multiples" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="multiples">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TileGrad'.
            </param>
        <summary>
              Returns the gradient of <c>Tile</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Since <c>Tile</c> takes an input and repeats the input <c>multiples</c> times
              along each dimension, <c>TileGrad</c> takes in <c>multiples</c> and aggregates
              each repeated tile of <c>input</c> into <c>output</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Timestamp (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Timestamp(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Timestamp'.
            </param>
        <summary>
              Provides the time since epoch in seconds.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns the timestamp as a <c>float64</c> for seconds since the Unix epoch.
              
              Note: the timestamp is computed when the op is executed, not when it is added
              to the graph.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public TensorFlow.TFFunction ToFunction (string functionName, string description, TensorFlow.TFOperation[] operations, TensorFlow.TFOutput[] inputs, TensorFlow.TFOutput[] outputs, string[] outputNames, bool appendHashToFunctionName = false, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFFunction ToFunction(string functionName, string description, class TensorFlow.TFOperation[] operations, valuetype TensorFlow.TFOutput[] inputs, valuetype TensorFlow.TFOutput[] outputs, string[] outputNames, bool appendHashToFunctionName, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFFunction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="operations" Type="TensorFlow.TFOperation[]" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="outputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="outputNames" Type="System.String[]" />
        <Parameter Name="appendHashToFunctionName" Type="System.Boolean" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="functionName">Name of the new function.  Should match the operation name (OpDef.name) regexp [A-Z][A-Za-z0-9_.\\-/]*.  If appendHashToFunctioName is false, the name must be unique (at least those registered in graphs where this function will be used).</param>
        <param name="description">Optional, human readable description of this function.</param>
        <param name="operations">Array of operations to become the body of the function or null.  
                If no array is given , all the
                operations in function body will become part of the function
                except operations referenced in inputs. These operations
                must have a single output (these operations are typically
                placeholders created for the sole purpose of representing
                an input).
            
                If an array is given, all operations
                in it will become part of the function. In particular, no
                automatic skipping of dummy input operations is performed.
            </param>
        <param name="inputs">Array that specify the inputs to the function, or null.  The names used for function inputs are normalized
                names of the operations (usually placeholders) pointed to by
                inputs.  These operation names should start with a letter.
                Normalization will convert all letters to lowercase and
                non-alphanumeric characters to '_' to make resulting names match
                the "[a-z][a-z0-9_]*" pattern for operation argument names.
                `inputs` cannot contain the same tensor twice.</param>
        <param name="outputs">rray that specify the inputs to the function, or null.   This can contain the same tensor twice.</param>
        <param name="outputNames">The names of the function's outputs.   The array either has the same elements of outputs, or be null.   Names must match "[a-z][a-z0-9_]*" regexp, if null is passed, the names are generated automatically.</param>
        <param name="appendHashToFunctionName">If set to <c>true</c> appends hash to functionName, otherwise it will use the specified name in functionName.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Creates a TFFunction from a TFGraph
            </summary>
        <returns>The function.</returns>
        <remarks>
          <para>
              This method converts the graph whose operations (or a subset of its operations) will be converted
              into a TFFunction.
            </para>
          <para>
              Note that when the same TF_Output is listed as both an input and an output,
              the corresponding function's output will equal to this input,
              instead of the original node's output.
            </para>
          <para>
            Callers must also satisfy the following constraints:
            </para>
          <para>
            <paramref name="inputs" /> cannot refer to TFOutputs within a control flow context. For
              example, one cannot use the output of "switch" node as input.
            </para>
          <para>
            <paramref name="inputs" /> and <paramref name="outputs" /> cannot have reference types. Reference types are
              not exposed through C API and are being replaced with Resources. We support
              reference types inside function's body to support legacy code. Do not
              use them in new code.
            </para>
          <para>
              Every node in the function's body must have all of its inputs (including
              control inputs). In other words, for every node in the body, each input
              must be either listed in <paramref name="inputs" /> or must come from another node in
              the body. In particular, it is an error to have a control edge going from
              a node outside of the body into a node in the body. This applies to control
              edges going from nodes referenced in <paramref name="inputs" /> to nodes in the body when
              the former nodes are not in the body (automatically skipped or not
              included in explicitly specified body).
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGraphDef">
      <MemberSignature Language="C#" Value="public void ToGraphDef (TensorFlow.TFBuffer outputGraphDef, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToGraphDef(class TensorFlow.TFBuffer outputGraphDef, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputGraphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="outputGraphDef">Target buffer where the graphs is serialized into.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Write out a serialized representation of the graph (as a GraphDef protocol buffer message) into <paramref name="outputGraphDef" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopK">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TopK (TensorFlow.TFOutput input, long k, Nullable&lt;bool&gt; sorted = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TopK(valuetype TensorFlow.TFOutput input, int64 k, valuetype System.Nullable`1&lt;bool&gt; sorted, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="sorted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D or higher with last dimension at least <c>k</c>.
            </param>
        <param name="k">
              Number of top elements to look for along the last dimension (along each
              row for matrices).
            </param>
        <param name="sorted">
              Optional argument
              If true the resulting <c>k</c> elements will be sorted by the values in
              descending order.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TopK'.
            </param>
        <summary>
              Finds values and indices of the <c>k</c> largest elements for the last dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              values: The <c>k</c> largest elements along each last dimensional slice.
              indices: The indices of <c>values</c> within the last dimension of <c>input</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the input is a vector (rank-1), finds the <c>k</c> largest entries in the vector
              and outputs their values and indices as vectors.  Thus <c>values[j]</c> is the
              <c>j</c>-th largest entry in <c>input</c>, and its index is <c>indices[j]</c>.
              
              For matrices (resp. higher rank input), computes the top <c>k</c> entries in each
              row (resp. vector along the last dimension).  Thus,
              
              values.shape = indices.shape = input.shape[:-1] + [k]
              
              If two elements are equal, the lower-index element appears first.
              
              If <c>k</c> varies dynamically, use <c>TopKV2</c> below.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopKV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TopKV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput k, Nullable&lt;bool&gt; sorted = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TopKV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput k, valuetype System.Nullable`1&lt;bool&gt; sorted, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="k" Type="TensorFlow.TFOutput" />
        <Parameter Name="sorted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D or higher with last dimension at least <c>k</c>.
            </param>
        <param name="k">
              0-D.  Number of top elements to look for along the last dimension (along each
              row for matrices).
            </param>
        <param name="sorted">
              Optional argument
              If true the resulting <c>k</c> elements will be sorted by the values in
              descending order.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TopKV2'.
            </param>
        <summary>
              Finds values and indices of the <c>k</c> largest elements for the last dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              values: The <c>k</c> largest elements along each last dimensional slice.
              indices: The indices of <c>values</c> within the last dimension of <c>input</c>.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the input is a vector (rank-1), finds the <c>k</c> largest entries in the vector
              and outputs their values and indices as vectors.  Thus <c>values[j]</c> is the
              <c>j</c>-th largest entry in <c>input</c>, and its index is <c>indices[j]</c>.
              
              For matrices (resp. higher rank input), computes the top <c>k</c> entries in each
              row (resp. vector along the last dimension).  Thus,
              
              values.shape = indices.shape = input.shape[:-1] + [k]
              
              If two elements are equal, the lower-index element appears first.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TPUEmbeddingActivations">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TPUEmbeddingActivations (TensorFlow.TFOutput embedding_variable, TensorFlow.TFOutput sliced_activations, long table_id, long lookup_id, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TPUEmbeddingActivations(valuetype TensorFlow.TFOutput embedding_variable, valuetype TensorFlow.TFOutput sliced_activations, int64 table_id, int64 lookup_id, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="embedding_variable" Type="TensorFlow.TFOutput" />
        <Parameter Name="sliced_activations" Type="TensorFlow.TFOutput" />
        <Parameter Name="table_id" Type="System.Int64" />
        <Parameter Name="lookup_id" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="embedding_variable">
              A trainable variable, enabling optimizers to find this op.
            </param>
        <param name="sliced_activations">
              The embedding activations Tensor to return.
            </param>
        <param name="table_id">
              The id of the table in the embedding layer configuration from which
              these activations were computed.
            </param>
        <param name="lookup_id">
              Identifier of the set of embedding indices which produced these
              activations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TPUEmbeddingActivations'.
            </param>
        <summary>
              An op enabling differentiation of TPU Embeddings.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op simply returns its first input, which is assumed to have been sliced
              from the Tensors returned by TPUEmbeddingDequeueActivations. The presence of this
              op, and its first argument being a trainable Variable, enables automatic
              differentiation of graphs containing embeddings via the TPU Embedding Python
              libraries.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TPUReplicatedInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TPUReplicatedInput (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TPUReplicatedInput(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TPUReplicatedInput'.
            </param>
        <summary>
              Operator that connects N unreplicated inputs to an N-way replicated TPU computation.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TPUReplicatedOutput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] TPUReplicatedOutput (TensorFlow.TFOutput input, long num_replicas, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] TPUReplicatedOutput(valuetype TensorFlow.TFOutput input, int64 num_replicas, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_replicas" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="num_replicas">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TPUReplicatedOutput'.
            </param>
        <summary>
              Operator that connects the output of an N-way replicated TPU computation to N separate outputs.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Transpose (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Transpose(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Transpose'.
            </param>
        <summary>
              Shuffle dimensions of x according to a permutation.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output `y` has the same rank as `x`. The shapes of `x` and `y` satisfy:
                `y.shape[i] == x.shape[perm[i]] for i in [0, 1, ..., rank(x) - 1]`
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Transpose (TensorFlow.TFOutput x, TensorFlow.TFOutput perm, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Transpose(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput perm, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="perm" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="perm">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Transpose'.
            </param>
        <summary>
              Shuffle dimensions of x according to a permutation.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output <c>y</c> has the same rank as <c>x</c>. The shapes of <c>x</c> and <c>y</c> satisfy:
              <c>y.shape[i] == x.shape[perm[i]] for i in [0, 1, ..., rank(x) - 1]</c></remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncateDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TruncateDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TruncateDiv(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncateDiv'.
            </param>
        <summary>
              Returns x / y element-wise for integer types.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Truncation designates that negative numbers will round fractional quantities
              toward zero. I.e. -7 / 5 = -1. This matches C semantics but it is different
              than Python semantics. See <c>FloorDiv</c> for a division function that matches
              Python Semantics.
              
              *NOTE*: <c>TruncateDiv</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncatedNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TruncatedNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="dtype">
              The type of the output.
            </param>
        <param name="seed">
              Optional argument
              If either <c>seed</c> or <c>seed2</c> are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncatedNormal'.
            </param>
        <summary>
              Outputs random values from a truncated normal distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with random truncated normal
              values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a normal distribution with mean 0 and standard
              deviation 1, except that values whose magnitude is more than 2 standard
              deviations from the mean are dropped and re-picked.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncateMod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TruncateMod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TruncateMod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncateMod'.
            </param>
        <summary>
              Returns element-wise remainder of division. This emulates C semantics in that
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              the result here is consistent with a truncating divide. E.g. <c>truncate(x / y) *
              y + truncate_mod(x, y) = x</c>.
              
              *NOTE*: <c>TruncateMod</c> supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEvaluateConstant">
      <MemberSignature Language="C#" Value="public bool TryEvaluateConstant (TensorFlow.TFOutput output, ref TensorFlow.TFTensor tensor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEvaluateConstant(valuetype TensorFlow.TFOutput output, class TensorFlow.TFTensor tensor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFTensor&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="output">Output.</param>
        <param name="tensor">Tensor.</param>
        <summary>
            Attempts to evaluate the <paramref name="output" />.   This is only possible if <paramref name="output" /> does not
            depend on any graph inputs - the function is safe to call if this is not the case though.
            </summary>
        <returns>
          <c>true</c>, if the evaluation is successful, in which case the result is returned in <paramref name="tensor" />, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRpc">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TryRpc (TensorFlow.TFOutput address, TensorFlow.TFOutput method, TensorFlow.TFOutput request, string protocol = null, Nullable&lt;bool&gt; fail_fast = null, Nullable&lt;long&gt; timeout_in_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TryRpc(valuetype TensorFlow.TFOutput address, valuetype TensorFlow.TFOutput method, valuetype TensorFlow.TFOutput request, string protocol, valuetype System.Nullable`1&lt;bool&gt; fail_fast, valuetype System.Nullable`1&lt;int64&gt; timeout_in_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="TensorFlow.TFOutput" />
        <Parameter Name="method" Type="TensorFlow.TFOutput" />
        <Parameter Name="request" Type="TensorFlow.TFOutput" />
        <Parameter Name="protocol" Type="System.String" />
        <Parameter Name="fail_fast" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="timeout_in_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">
          <c>0-D</c> or <c>1-D</c>.  The address (i.e. host_name:port) of the RPC server.
              If this tensor has more than 1 element, then multiple parallel rpc requests
              are sent.  This argument broadcasts with <c>method</c> and <c>request</c>.
            </param>
        <param name="method">
          <c>0-D</c> or <c>1-D</c>.  The method address on the RPC server.
              If this tensor has more than 1 element, then multiple parallel rpc requests
              are sent.  This argument broadcasts with <c>address</c> and <c>request</c>.
            </param>
        <param name="request">
          <c>0-D</c> or <c>1-D</c>.  Serialized proto strings: the rpc request argument.
              If this tensor has more than 1 element, then multiple parallel rpc requests
              are sent.  This argument broadcasts with <c>address</c> and <c>method</c>.
            </param>
        <param name="protocol">
              Optional argument
              RPC protocol to use.  Empty string means use the default protocol.
              Options include 'grpc'.
            </param>
        <param name="fail_fast">
              Optional argument
              <c>boolean</c>. If <c>true</c> (default), then failures to connect
              (i.e., the server does not immediately respond) cause an RPC failure.
            </param>
        <param name="timeout_in_ms">
              Optional argument
              <c>int</c>. If <c>0</c> (default), then the kernel will run the RPC
              request and only time out if the RPC deadline passes or the session times out.
              If this value is greater than <c>0</c>, then the op will raise an exception if
              the RPC takes longer than <c>timeout_in_ms</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TryRpc'.
            </param>
        <summary>
              Perform batches of RPC requests.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              response: Same shape as <c>request</c>. Serialized proto strings: the rpc responses.
              status_code: Same shape as <c>request</c>.  Values correspond to tensorflow Status enum codes.
              status_message: Same shape as <c>request</c>.  Values correspond to Status messages
              returned from the RPC calls.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This op asynchronously performs either a single RPC request, or a batch
              of requests.  RPC requests are defined by three main parameters:
              
              - <c>address</c> (the host+port or BNS address of the request)
              - <c>method</c> (the method name for the request)
              - <c>request</c> (the serialized proto string, or vector of strings,
              of the RPC request argument).
              
              For example, if you have an RPC service running on port localhost:2345,
              and its interface is configured with the following proto declaration:
              
               <code>
              service MyService {
              rpc MyMethod(MyRequestProto) returns (MyResponseProto) {
              }
              };
               </code>
              
              then call this op with arguments:
              
               <code>
              address = "localhost:2345"
              method = "MyService/MyMethod"
               </code>
              
              The <c>request</c> tensor is a string tensor representing serialized <c>MyRequestProto</c>
              strings; and the output string tensor <c>response</c> will have the same shape
              and contain (upon successful completion) corresponding serialized
              <c>MyResponseProto</c> strings.
              
              For example, to send a single, empty, <c>MyRequestProto</c>, call
              this op with <c>request = ""</c>.  To send 5 **parallel** empty requests,
              call this op with <c>request = ["", "", "", "", ""]</c>.
              
              More generally, one can create a batch of <c>MyRequestProto</c> serialized protos
              from regular batched tensors using the <c>encode_proto</c> op, and convert
              the response <c>MyResponseProto</c> serialized protos to batched tensors
              using the <c>decode_proto</c> op.
              
              **NOTE** Working with serialized proto strings is faster than instantiating
              actual proto objects in memory, so no performance degradation is expected
              compared to writing custom kernels for this workflow.
              
              Unlike the standard <c>Rpc</c> op, if the connection fails or the remote worker
              returns an error status, this op does **not** reraise the exception.
              Instead, the <c>status_code</c> and <c>status_message</c> entry for the corresponding RPC
              call is set with the error returned from the RPC call.  The <c>response</c> tensor
              will contain valid response values for those minibatch entries whose RPCs did
              not fail; the rest of the entries will have empty strings.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Unbatch (TensorFlow.TFOutput batched_tensor, TensorFlow.TFOutput batch_index, TensorFlow.TFOutput id, long timeout_micros, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Unbatch(valuetype TensorFlow.TFOutput batched_tensor, valuetype TensorFlow.TFOutput batch_index, valuetype TensorFlow.TFOutput id, int64 timeout_micros, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batched_tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_index" Type="TensorFlow.TFOutput" />
        <Parameter Name="id" Type="TensorFlow.TFOutput" />
        <Parameter Name="timeout_micros" Type="System.Int64" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="batched_tensor">
        </param>
        <param name="batch_index">
        </param>
        <param name="id">
        </param>
        <param name="timeout_micros">
        </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unbatch'.
            </param>
        <summary>
              Reverses the operation of Batch for a single output Tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              An instance of Unbatch either receives an empty batched_tensor, in which case it
              asynchronously waits until the values become available from a concurrently
              running instance of Unbatch with the same container and shared_name, or receives
              a non-empty batched_tensor in which case it finalizes all other concurrently
              running instances and outputs its own element from the batch.
              
              batched_tensor: The possibly transformed output of Batch. The size of the first
              dimension should remain unchanged by the transformations for the operation to
              work.
              batch_index: The matching batch_index obtained from Batch.
              id: The id scalar emitted by Batch.
              unbatched_tensor: The Tensor corresponding to this execution.
              timeout_micros: Maximum amount of time (in microseconds) to wait to receive the
              batched input tensor associated with a given invocation of the op.
              container: Container to control resource sharing.
              shared_name: Instances of Unbatch with the same container and shared_name are
              assumed to possibly belong to the same batch. If left empty, the op name will
              be used as the shared name.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnbatchGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnbatchGrad (TensorFlow.TFOutput original_input, TensorFlow.TFOutput batch_index, TensorFlow.TFOutput grad, TensorFlow.TFOutput id, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnbatchGrad(valuetype TensorFlow.TFOutput original_input, valuetype TensorFlow.TFOutput batch_index, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput id, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="original_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_index" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="id" Type="TensorFlow.TFOutput" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="original_input">
        </param>
        <param name="batch_index">
        </param>
        <param name="grad">
        </param>
        <param name="id">
        </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnbatchGrad'.
            </param>
        <summary>
              Gradient of Unbatch.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Acts like Batch but using the given batch_index index of batching things as they
              become available. This ensures that the gradients are propagated back in the
              same session which did the forward pass.
              
              original_input: The input to the Unbatch operation this is the gradient of.
              batch_index: The batch_index given to the Unbatch operation this is the gradient
              of.
              grad: The downstream gradient.
              id: The id scalar emitted by Batch.
              batched_grad: The return value, either an empty tensor or the batched gradient.
              container: Container to control resource sharing.
              shared_name: Instances of UnbatchGrad with the same container and shared_name
              are assumed to possibly belong to the same batch. If left empty, the op name
              will be used as the shared name.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnicodeScript">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnicodeScript (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnicodeScript(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A Tensor of int32 Unicode code points.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnicodeScript'.
            </param>
        <summary>
              Determine the script codes of a given tensor of Unicode integer code points.
            </summary>
        <returns>
              A Tensor of int32 script codes corresponding to each input code point.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation converts Unicode code points to script codes corresponding to
              each code point. Script codes correspond to International Components for
              Unicode (ICU) UScriptCode values. See http://icu-project.org/apiref/icu4c/uscript_8h.html.
              Returns -1 (USCRIPT_INVALID_CODE) for invalid codepoints. Output shape will
              match input shape.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniformCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; UniformCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; UniformCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UniformCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a uniform distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Unique (TensorFlow.TFOutput x, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Unique(valuetype TensorFlow.TFOutput x, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D.
            </param>
        <param name="out_idx">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unique'.
            </param>
        <summary>
              Finds unique elements in a 1-D tensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: 1-D.
              idx: 1-D.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This operation returns a tensor <c>y</c> containing all of the unique elements of <c>x</c>
              sorted in the same order that they occur in <c>x</c>. This operation also returns a
              tensor <c>idx</c> the same size as <c>x</c> that contains the index of each value of <c>x</c>
              in the unique output <c>y</c>. In other words:
              
              <c>y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]</c>
              
              For example:
              
               <code>
              # tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]
              y, idx = unique(x)
              y ==&amp;gt; [1, 2, 4, 7, 8]
              idx ==&amp;gt; [0, 0, 1, 2, 2, 2, 3, 4, 4]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; UniqueV2 (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; UniqueV2(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput axis, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="axis">To be added.</param>
        <param name="out_idx">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueWithCounts">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; UniqueWithCounts (TensorFlow.TFOutput x, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; UniqueWithCounts(valuetype TensorFlow.TFOutput x, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D.
            </param>
        <param name="out_idx">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UniqueWithCounts'.
            </param>
        <summary>
              Finds unique elements in a 1-D tensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: 1-D.
              idx: 1-D.
              count: 1-D.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This operation returns a tensor <c>y</c> containing all of the unique elements of <c>x</c>
              sorted in the same order that they occur in <c>x</c>. This operation also returns a
              tensor <c>idx</c> the same size as <c>x</c> that contains the index of each value of <c>x</c>
              in the unique output <c>y</c>. Finally, it returns a third tensor <c>count</c> that
              contains the count of each element of <c>y</c> in <c>x</c>. In other words:
              
              <c>y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]</c>
              
              For example:
              
               <code>
              # tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]
              y, idx, count = unique_with_counts(x)
              y ==&amp;gt; [1, 2, 4, 7, 8]
              idx ==&amp;gt; [0, 0, 1, 2, 2, 2, 3, 4, 4]
              count ==&amp;gt; [2, 1, 3, 1, 2]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueWithCountsV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; UniqueWithCountsV2 (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; UniqueWithCountsV2(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput axis, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="axis">To be added.</param>
        <param name="out_idx">To be added.</param>
        <param name="operName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unpack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] Unpack (TensorFlow.TFOutput value, long num, Nullable&lt;long&gt; axis = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] Unpack(valuetype TensorFlow.TFOutput value, int64 num, valuetype System.Nullable`1&lt;int64&gt; axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="num" Type="System.Int64" />
        <Parameter Name="axis" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              1-D or higher, with <c>axis</c> dimension size equal to <c>num</c>.
            </param>
        <param name="num">
        </param>
        <param name="axis">
              Optional argument
              Dimension along which to unpack.  Negative values wrap around, so the
              valid range is <c>[-R, R)</c>.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unpack'.
            </param>
        <summary>
              Unpacks a given dimension of a rank-<c>R</c> tensor into <c>num</c> rank-<c>(R-1)</c> tensors.
            </summary>
        <returns>
              The list of tensors unpacked from <c>value</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Unpacks <c>num</c> tensors from <c>value</c> by chipping it along the <c>axis</c> dimension.
              For example, given a tensor of shape <c>(A, B, C, D)</c>;
              
              If <c>axis == 0</c> then the i'th tensor in <c>output</c> is the slice <c>value[i, :, :, :]</c>
              and each tensor in <c>output</c> will have shape <c>(B, C, D)</c>. (Note that the
              dimension unpacked along is gone, unlike <c>split</c>).
              
              If <c>axis == 1</c> then the i'th tensor in <c>output</c> is the slice <c>value[:, i, :, :]</c>
              and each tensor in <c>output</c> will have shape <c>(A, C, D)</c>.
              Etc.
              
              This is the opposite of <c>pack</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnravelIndex">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnravelIndex (TensorFlow.TFOutput indices, TensorFlow.TFOutput dims, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnravelIndex(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dims" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              An 0-D or 1-D <c>int</c> Tensor whose elements are indices into the
              flattened version of an array of dimensions dims.
            </param>
        <param name="dims">
              An 1-D <c>int</c> Tensor. The shape of the array to use for unraveling
              indices.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnravelIndex'.
            </param>
        <summary>
              Converts a flat index or array of flat indices into a tuple of
            </summary>
        <returns>
              An 2-D (or 1-D if indices is 0-D) tensor where each row has the
              same shape as the indices array.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              coordinate arrays.
              
              @compatibility(numpy)
              Equivalent to np.unravel_index
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsortedSegmentMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnsortedSegmentMax (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnsortedSegmentMax(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A tensor whose shape is a prefix of <c>data.shape</c>.END
              }
              out_arg {
              name: "output"
              description: &amp;lt;&amp;lt;END
              Has same shape as data, except for the first <c>segment_ids.rank</c>
              dimensions, which are replaced with a single dimension which has size
              <c>num_segments</c>.
            </param>
        <param name="num_segments">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentMax'.
            </param>
        <summary>
              Computes the maximum along segments of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              This operator is similar to the unsorted segment sum operator found
              [(here)](../../../api_docs/python/math_ops.md#UnsortedSegmentSum).
              Instead of computing the sum over segments, it computes the maximum such that:
              
              \\(output_i = \max_{j...} data[j...]\\) where max is over tuples <c>j...</c> such
              that <c>segment_ids[j...] == i</c>.
              
              If the maximum is empty for a given segment ID <c>i</c>, it outputs the smallest
              possible value for the specific numeric type,
              <c>output[i] = numeric_limits&amp;lt;T&amp;gt;::lowest()</c>.
              
              If the given segment ID <c>i</c> is negative, then the corresponding value is
              dropped, and will not be included in the result.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/UnsortedSegmentMax.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsortedSegmentMin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnsortedSegmentMin (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnsortedSegmentMin(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A tensor whose shape is a prefix of <c>data.shape</c>.
            </param>
        <param name="num_segments">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentMin'.
            </param>
        <summary>
              Computes the minimum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for the first <c>segment_ids.rank</c>
              dimensions, which are replaced with a single dimension which has size
              <c>num_segments</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#segmentation)
              for an explanation of segments.
              
              This operator is similar to the unsorted segment sum operator found
              [(here)](../../../api_docs/python/math_ops.md#UnsortedSegmentSum).
              Instead of computing the sum over segments, it computes the minimum such that:
              
              \\(output_i = \min_{j...} data_[j...]\\) where min is over tuples <c>j...</c> such
              that <c>segment_ids[j...] == i</c>.
              
              If the minimum is empty for a given segment ID <c>i</c>, it outputs the largest
              possible value for the specific numeric type,
              <c>output[i] = numeric_limits&amp;lt;T&amp;gt;::max()</c>.
              
              If the given segment ID <c>i</c> is negative, then the corresponding value is
              dropped, and will not be included in the result.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsortedSegmentProd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnsortedSegmentProd (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnsortedSegmentProd(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A tensor whose shape is a prefix of <c>data.shape</c>.
            </param>
        <param name="num_segments">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentProd'.
            </param>
        <summary>
              Computes the product along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for the first <c>segment_ids.rank</c>
              dimensions, which are replaced with a single dimension which has size
              <c>num_segments</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#segmentation)
              for an explanation of segments.
              
              This operator is similar to the unsorted segment sum operator found
              [(here)](../../../api_docs/python/math_ops.md#UnsortedSegmentSum).
              Instead of computing the sum over segments, it computes the product of all
              entries belonging to a segment such that:
              
              \\(output_i = \prod_{j...} data[j...]\\) where the product is over tuples
              <c>j...</c> such that <c>segment_ids[j...] == i</c>.
              
              If there is no entry for a given segment ID <c>i</c>, it outputs 1.
              
              If the given segment ID <c>i</c> is negative, then the corresponding value is
              dropped, and will not be included in the result.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsortedSegmentSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnsortedSegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnsortedSegmentSum(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A tensor whose shape is a prefix of <c>data.shape</c>.
            </param>
        <param name="num_segments">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentSum'.
            </param>
        <summary>
              Computes the sum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for the first <c>segment_ids.rank</c>
              dimensions, which are replaced with a single dimension which has size
              <c>num_segments</c>.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read
              [the section on segmentation](https://tensorflow.org/api_guides/python/math_ops#Segmentation)
              for an explanation of segments.
              
              Computes a tensor such that
              \\(output[i] = \sum_{j...} data[j...]\\) where the sum is over tuples <c>j...</c> such
              that <c>segment_ids[j...] == i</c>.  Unlike <c>SegmentSum</c>, <c>segment_ids</c>
              need not be sorted and need not cover all values in the full
              range of valid values.
              
              If the sum is empty for a given segment ID <c>i</c>, <c>output[i] = 0</c>.
              If the given segment ID <c>i</c> is negative, the value is dropped and will not be
              added to the sum of the segment.
              
              <c>num_segments</c> should equal the number of distinct segment IDs.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/UnsortedSegmentSum.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unstage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] Unstage (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] Unstage(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unstage'.
            </param>
        <summary>
              Op is similar to a lightweight Dequeue.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The basic functionality is similar to dequeue with many fewer
              capabilities and options.  This Op is optimized for performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpperBound">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UpperBound (TensorFlow.TFOutput sorted_inputs, TensorFlow.TFOutput values, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UpperBound(valuetype TensorFlow.TFOutput sorted_inputs, valuetype TensorFlow.TFOutput values, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sorted_inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sorted_inputs">
              2-D Tensor where each row is ordered.
            </param>
        <param name="values">
              2-D Tensor with the same numbers of rows as <c>sorted_search_values</c>. Contains
              the values that will be searched for in <c>sorted_search_values</c>.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UpperBound'.
            </param>
        <summary>
              Applies upper_bound(sorted_search_values, values) along each row.
            </summary>
        <returns>
              A <c>Tensor</c> with the same shape as <c>values</c>.  It contains the last scalar index
              into the last dimension where values can be inserted without changing the
              ordered property.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each set of rows with the same index in (sorted_inputs, values) is treated
              independently.  The resulting row is the equivalent of calling
              <c>np.searchsorted(sorted_inputs, values, side='right')</c>.
              
              The result is not a global index to the entire
              <c>Tensor</c>, but rather just the index in the last dimension.
              
              A 2-D example:
              sorted_sequence = [[0, 3, 9, 9, 10],
              [1, 2, 3, 4, 5]]
              values = [[2, 4, 9],
              [0, 2, 6]]
              
              result = UpperBound(sorted_sequence, values)
              
              result == [[1, 2, 4],
              [0, 2, 5]]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="VarHandleOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput VarHandleOp (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput VarHandleOp(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              the type of this variable. Must agree with the dtypes
              of all ops using this variable.
            </param>
        <param name="shape">
              The (possibly partially specified) shape of this variable.
            </param>
        <param name="container">
              Optional argument
              the container this variable is placed in.
            </param>
        <param name="shared_name">
              Optional argument
              the name by which this variable is referred to.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'VarHandleOp'.
            </param>
        <summary>
              Creates a handle to a Variable resource.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public TensorFlow.Variable Variable (TensorFlow.TFOutput initialValue, bool trainable = true, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.Variable Variable(valuetype TensorFlow.TFOutput initialValue, bool trainable, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.Variable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialValue" Type="TensorFlow.TFOutput" />
        <Parameter Name="trainable" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialValue">Initial value.</param>
        <param name="trainable">If true, this add the variable to the graph's TrainableVariables, this collection is intended to be used by the Optimizer classes.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Variable node, with a starting initial value.  Convenience that registers the init variable to a global queue.
            </summary>
        <returns>The returning Variable contains the variable, with three nodes with the operations making up the variable assignment.</returns>
        <remarks>
            Variables need to be initialized before the main execution so you will typically want to
            run the session on the variable.
            
            The init sequence for the variable is stored in the graph, you must manually initialize 
            those by running the session on the global variables.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public TensorFlow.Variable Variable (TensorFlow.TFOutput initialValue, out TensorFlow.TFOutput value, bool trainable = true, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.Variable Variable(valuetype TensorFlow.TFOutput initialValue, valuetype TensorFlow.TFOutput value, bool trainable, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.Variable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialValue" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput&amp;" RefType="out" />
        <Parameter Name="trainable" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialValue">Initial value.</param>
        <param name="value">Returns the value of the variable.</param>
        <param name="trainable">If true, this add the variable to the graph's TrainableVariables, this collection is intended to be used by the Optimizer classes.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Variable node, with a starting initial value.  Convenience that registers the init variable to a global queue.
            </summary>
        <returns>The returning Variable contains the variable, with three nodes with the operations making up the variable assignment.</returns>
        <remarks>
            Variables need to be initialized before the main execution so you will typically want to
            run the session on the variable.
            
            The init sequence for the variable is stored in the graph, you must manually initialize 
            those by running the session on the global variables.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public TensorFlow.Variable Variable (TensorFlow.TFOutput initialValue, out TensorFlow.TFOperation init, out TensorFlow.TFOutput value, bool trainable = true, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.Variable Variable(valuetype TensorFlow.TFOutput initialValue, class TensorFlow.TFOperation init, valuetype TensorFlow.TFOutput value, bool trainable, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.Variable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialValue" Type="TensorFlow.TFOutput" />
        <Parameter Name="init" Type="TensorFlow.TFOperation&amp;" RefType="out" />
        <Parameter Name="value" Type="TensorFlow.TFOutput&amp;" RefType="out" />
        <Parameter Name="trainable" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialValue">Initial value.</param>
        <param name="init">Returns the operation that initializes the value of the variable.</param>
        <param name="value">Returns the value of the variable.</param>
        <param name="trainable">If true, this add the variable to the graph's TrainableVariables, this collection is intended to be used by the Optimizer classes.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Variable node, with a starting initial value.
            </summary>
        <returns>The returning Variable contains the variable, with three nodes with the operations making up the variable assignment.</returns>
        <remarks>
            Variables need to be initialized before the main execution so you will typically want to
            run the session on the variable
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Variable (TensorFlow.TFShape shape, TensorFlow.TFDataType dtype, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Variable(class TensorFlow.TFShape shape, valuetype TensorFlow.TFDataType dtype, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
        </param>
        <param name="dtype">
        </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Variable'.
            </param>
        <summary>
              Use VariableV2 instead.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableShape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput VariableShape (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput VariableShape(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'VariableShape'.
            </param>
        <summary>
              Returns the shape of the variable pointed to by <c>resource</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns a 1-D integer tensor representing the shape of <c>input</c>.
              
              For example:
              
               <code>
              # 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]
              shape(t) ==&amp;gt; [2, 2, 3]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput VariableV2 (TensorFlow.TFShape shape, TensorFlow.TFDataType dtype, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput VariableV2(class TensorFlow.TFShape shape, valuetype TensorFlow.TFDataType dtype, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the variable tensor.
            </param>
        <param name="dtype">
              The type of elements in the variable tensor.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this variable is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this variable is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'VariableV2'.
            </param>
        <summary>
              Holds state in the form of a tensor that persists across steps.
            </summary>
        <returns>
              A reference to the variable tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a ref to the tensor state so it may be read or modified.
              TODO(zhifengc/mrry): Adds a pointer to a more detail document
              about sharing states in tensorflow.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="VarIsInitializedOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput VarIsInitializedOp (TensorFlow.TFOutput resource, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput VarIsInitializedOp(valuetype TensorFlow.TFOutput resource, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              the input resource handle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'VarIsInitializedOp'.
            </param>
        <summary>
              Checks whether a resource handle-based variable has been initialized.
            </summary>
        <returns>
              a scalar boolean which is true if the variable has been
              initialized.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Versions">
      <MemberSignature Language="C#" Value="public void Versions (TensorFlow.TFBuffer outputVersionDef, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Versions(class TensorFlow.TFBuffer outputVersionDef, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputVersionDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="outputVersionDef">The buffer where the serialized protocol buffer will be stored.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Returns the serialized VersionDef proto for this graph.
            </summary>
        <returns>The versions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Where (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Where(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Where'.
            </param>
        <summary>
              Returns locations of nonzero / true values in a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns the coordinates of true elements in <c>condition</c>. The
              coordinates are returned in a 2-D tensor where the first dimension (rows)
              represents the number of true elements, and the second dimension (columns)
              represents the coordinates of the true elements. Keep in mind, the shape of
              the output tensor can vary depending on how many true values there are in
              <c>condition</c>. Indices are output in row-major order.
              
              For example:
              
               <code>
              # 'input' tensor is [[True, False]
              #                    [True, False]]
              # 'input' has two true values, so output has two coordinates.
              # 'input' has rank of 2, so coordinates have two indices.
              where(input) ==&amp;gt; [[0, 0],
              [1, 0]]
              
              # <c>condition</c> tensor is [[[True, False]
              #                     [True, False]]
              #                    [[False, True]
              #                     [False, True]]
              #                    [[False, False]
              #                     [False, True]]]
              # 'input' has 5 true values, so output has 5 coordinates.
              # 'input' has rank of 3, so coordinates have three indices.
              where(input) ==&amp;gt; [[0, 0, 0],
              [0, 1, 0],
              [1, 0, 1],
              [1, 1, 1],
              [2, 1, 1]]
              
              # <c>condition</c> tensor is [[[1.5,  0.0]
              #                     [-0.5, 0.0]]
              #                    [[0.0,  0.25]
              #                     [0.0,  0.75]]
              #                    [[0.0,  0.0]
              #                     [0.0,  0.01]]]
              # 'input' has 5 nonzero values, so output has 5 coordinates.
              # 'input' has rank of 3, so coordinates have three indices.
              where(input) ==&amp;gt; [[0, 0, 0],
              [0, 1, 0],
              [1, 0, 1],
              [1, 1, 1],
              [2, 1, 1]]
              
              # <c>condition</c> tensor is [[[1.5 + 0.0j, 0.0  + 0.0j]
              #                     [0.0 + 0.5j, 0.0  + 0.0j]]
              #                    [[0.0 + 0.0j, 0.25 + 1.5j]
              #                     [0.0 + 0.0j, 0.75 + 0.0j]]
              #                    [[0.0 + 0.0j, 0.0  + 0.0j]
              #                     [0.0 + 0.0j, 0.01 + 0.0j]]]
              # 'input' has 5 nonzero magnitude values, so output has 5 coordinates.
              # 'input' has rank of 3, so coordinates have three indices.
              where(input) ==&amp;gt; [[0, 0, 0],
              [0, 1, 0],
              [1, 0, 1],
              [1, 1, 1],
              [2, 1, 1]]
               </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Where (TensorFlow.TFOutput condition, Nullable&lt;TensorFlow.TFOutput&gt; x, Nullable&lt;TensorFlow.TFOutput&gt; y, string name = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Where(valuetype TensorFlow.TFOutput condition, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; x, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; y, string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="y" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">LabeledTensor of type `bool`.</param>
        <param name="x">LabeledTensor for values where condition is true.</param>
        <param name="y">LabeledTensor for values where condition is false.</param>
        <param name="name">Optional op name.</param>
        <summary>
              Return elements from x or y depending on condition.
            </summary>
        <returns>The labeled tensor with values according to condition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="While">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] While (TensorFlow.TFOutput[] inputs, TensorFlow.TFGraph.WhileConstructor constructor, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] While(valuetype TensorFlow.TFOutput[] inputs, class TensorFlow.TFGraph/WhileConstructor constructor, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="constructor" Type="TensorFlow.TFGraph+WhileConstructor" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="inputs">Inputs.</param>
        <param name="constructor">Callback method that fills out the various while loop parameters.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Constructs a while loop with the specified inputs and a callback that composes the while loop
            </summary>
        <returns>
            An array of TFOutputs from creating the While loop, or null if there is an error creating the 
            while loop, or if the constructor raised an exception when it was invoked.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WholeFileReader">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput WholeFileReader (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput WholeFileReader(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'WholeFileReader'.
            </param>
        <summary>
              A Reader that outputs the entire contents of a file as a value.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              To use, enqueue filenames in a Queue.  The output of ReaderRead will
              be a filename (key) and the contents of that file (value).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WholeFileReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput WholeFileReaderV2 (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput WholeFileReaderV2(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'WholeFileReaderV2'.
            </param>
        <summary>
              A Reader that outputs the entire contents of a file as a value.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              To use, enqueue filenames in a Queue.  The output of ReaderRead will
              be a filename (key) and the contents of that file (value).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput WindowDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput size, TensorFlow.TFOutput shift, TensorFlow.TFOutput stride, TensorFlow.TFOutput drop_remainder, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput WindowDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput shift, valuetype TensorFlow.TFOutput stride, valuetype TensorFlow.TFOutput drop_remainder, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="shift" Type="TensorFlow.TFOutput" />
        <Parameter Name="stride" Type="TensorFlow.TFOutput" />
        <Parameter Name="drop_remainder" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="size">
              A scalar representing the number of elements to accumulate in a window.
            </param>
        <param name="shift">
              A scalar representing the steps moving the sliding window forward in one
              iteration. It must be positive.
            </param>
        <param name="stride">
              A scalar representing the stride of the input elements of the sliding window.
              It must be positive.
            </param>
        <param name="drop_remainder">
              A scalar representing whether a window should be dropped in case its size is
              smaller than desired.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'WindowDataset'.
            </param>
        <summary>
              A dataset that creates window datasets from the input dataset.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithDependencies">
      <MemberSignature Language="C#" Value="public TensorFlow.TFDependencies WithDependencies (TensorFlow.TFOperation[] dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFDependencies WithDependencies(class TensorFlow.TFOperation[] dependencies) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFDependencies</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencies" Type="TensorFlow.TFOperation[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
            Adds new dependencies for new tensors and operations created while the context is active.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithScope">
      <MemberSignature Language="C#" Value="public TensorFlow.TFScope WithScope (string nameScopeDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFScope WithScope(string nameScopeDesc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFScope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameScopeDesc" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nameScopeDesc">The namescope description, if the value is null, this
            will reset the toplevel namescope to be the empty value. </param>
        <summary>
            Creates a new namescope by setting the scope to the description provided.
            </summary>
        <returns>A new scope that will remain in use until the return TFScope is disposed.</returns>
        <remarks>
          <para>
            To more easily name your operations and group then, you can use the
            WithScope method to set a current name scope that alter the complete name
            of an operation added to the graph.
            </para>
          <para>
            The graph starts with a scope set to the empty string, you can introduce new
            scopes by calling WithScope, and can be conveniently used with the C# using
            statement, like this:
            </para>
          <code>
            Assert (graph.CurrentNamescope, "");
            using (var nested = graph.WithScope ("nested")){
               Assert (graph.CurrentNameScope, "nested");
               using (var inner = graph.WithScope ("inner")){
                   Assert (graph.CurrentNameScope, "nested/inner");
               }
            }
            </code>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkerHeartbeat">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput WorkerHeartbeat (TensorFlow.TFOutput request, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput WorkerHeartbeat(valuetype TensorFlow.TFOutput request, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="request">
              A string tensor containing a serialized WorkerHeartbeatRequest
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'WorkerHeartbeat'.
            </param>
        <summary>
              Worker heartbeat op.
            </summary>
        <returns>
              A string tensor containing a serialized WorkerHeartbeatResponse
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Heartbeats may be sent periodically to indicate the coordinator is still active,
              to retrieve the current worker status and to expedite shutdown when necessary.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFile">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation WriteFile (TensorFlow.TFOutput filename, TensorFlow.TFOutput contents, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation WriteFile(valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFOutput contents, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              scalar. The name of the file to which we write the contents.
            </param>
        <param name="contents">
              scalar. The content to be written to the output file.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'WriteFile'.
            </param>
        <summary>
              Writes contents to the file at input filename. Creates file and recursively
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              creates directory if not existing.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xdivy">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Xdivy (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Xdivy(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Xdivy'.
            </param>
        <summary>
              Returns 0 if x == 0, and x / y otherwise, elementwise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Xlogy">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Xlogy (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Xlogy(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Xlogy'.
            </param>
        <summary>
              Returns 0 if x == 0, and x * log(y) otherwise, elementwise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeros">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Zeros (TensorFlow.TFShape shape, TensorFlow.TFDataType dtype = TensorFlow.TFDataType.Double, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Zeros(class TensorFlow.TFShape shape, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">Shape of the output tensor</param>
        <param name="dtype">Optional Type of the Zero value. Default: Double</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Outputs Zero values based on shape of tensor
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZerosLike">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ZerosLike (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ZerosLike(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              a tensor of type T.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ZerosLike'.
            </param>
        <summary>
              Returns a tensor of zeros with the same shape and type as x.
            </summary>
        <returns>
              a tensor of the same shape and type as x but filled with zeros.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Zeta (TensorFlow.TFOutput x, TensorFlow.TFOutput q, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Zeta(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput q, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="q" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="q">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Zeta'.
            </param>
        <summary>
              Compute the Hurwitz zeta function \\(\zeta(x, q)\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The Hurwitz zeta function is defined as:
              
              
              \\(\zeta(x, q) = \sum_{n=0}^{\infty} (q + n)^{-x}\\)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZipDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ZipDataset (TensorFlow.TFOutput[] input_datasets, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ZipDataset(valuetype TensorFlow.TFOutput[] input_datasets, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_datasets" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_datasets">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ZipDataset'.
            </param>
        <summary>
              Creates a dataset that zips together <c>input_datasets</c>.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
