<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bgapi2_genicam_dotnet</name>
    </assembly>
    <members>
        <member name="T:BGAPI2.Bgapi2Enumerations`1">
            <summary>
            This base class provides the functionality of an enumerator to enable foreach-iterations.
            It is used for all list/dictionary classes in the bgapi.
            "Key" Value is a string.
            </summary>
            <typeparam name="TValue">the bgapi2 object</typeparam>
        </member>
        <member name="T:BGAPI2.SystemListEnumeration">
            <summary>
            This class inherits from the generic Bgapi2Enumerations class and provides
            an implementation for an enumeration of BGAPI2.Systems.
            </summary>
        </member>
        <member name="T:BGAPI2.SystemList">
            <summary>
            Specialized Bgapi2ObjectList for BGAPI2 System objects (TL producers)
            </summary>
        </member>
        <member name="M:BGAPI2.SystemList.find(System.String)">
            <summary>
            This function delivers a KeyValuePair(string, System) which is not empty
            if and only if the System with the id is contained in the current system configuration.
            </summary>
            <param name="id">string id for the system to be found</param>
            <returns>KeyValuePair(string, System) result which is nonempty if System was found</returns>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">If a null value was passed</exception>
        </member>
        <member name="P:BGAPI2.SystemList.Item(System.String)">
            <summary>
            Overload indexing operator []
            </summary>
            <returns>Bgapi.System entry in Systemlist at position systemid</returns>
        </member>
        <member name="P:BGAPI2.SystemList.Keys">
            <summary>
            This Property delivers a collection of Keys of all available systems
            </summary>
            <returns>Dictionary(string, System).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.SystemList.Values">
            <summary>
            This Property delivers a collection of Values of all available systems
            </summary>
            <returns>Dictionary(string, System).KeyCollection Values</returns>
        </member>
        <member name="P:BGAPI2.SystemList.Count">
            <summary>
            This Property delivers the total number of available systems
            </summary>
            <returns>int Count</returns>
        </member>
        <member name="M:BGAPI2.SystemList.Clear">
            <summary>
            Clear SystemList closes and removes all currently available Systems from the SystemList.
            After it is called the SystemList will be empty.
            </summary>
        </member>
        <member name="P:BGAPI2.SystemList.Instance">
            <summary>
            This Property delivers a static instance of the SystemList.
            The Instance will be created with the first get of this property.
            Every following get delivers always the same instance. This approach makes sure that only one instance of this class can be created.
            </summary>
            <returns>SystemList</returns>
        </member>
        <member name="M:BGAPI2.SystemList.CreateInstanceFromPath(System.String)">
             <summary>
             This function delivers a static instance of the SystemList using the producerpath
             The Instance will be created with the first call of this function.
             Every following gets of the Instance property delivers always the same instance.
             </summary>
             <param name="producerpath">Path to be used producer files</param>
             <returns>
            SystemList
            </returns>
            <exception cref="T:BGAPI2.Exceptions.ResourceInUseException">This exception will be thrown by repeated use or if the instance was already created by function SystemList.GetInstance.</exception>
        </member>
        <member name="M:BGAPI2.SystemList.ReleaseInstance">
            <summary>
            This Property delivers a static instance of the SystemList.
            The Instance will be created with the first get of this property.
            Every following get delivers always the same instance. This approach makes sure that only one instance of this class can be created.
            </summary>
            <returns>SystemList</returns>
        </member>
        <member name="M:BGAPI2.SystemList.Refresh">
             <summary>
            This functions starts the search for GenTL producers with file extension 'cti' and follows a fixed searching procedure.
            First, the current working directory is searched and then the directories specified in the GenICam variable (see remarks).
            By using the function SystemList::CreateInstanceFromPath the GenICam variable will be ignored and the specified path is used instead.
            The found GenTL producers will be inserted into the SystemList.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ErrorException">Internal sytem error, thrown if the GenTL producer couldn't be loaded. Check trace output for a detailed error description.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>
            The GenICam variable on 64bit systems is defined as 'GENICAM_GENTL64_PATH', on 32bit systems 'GENICAM_GENTL32_PATH'.
            Already found GenTL producers remain unaffected by the Refresh function.
            If a GenTL producer is found twice in different directories, it is up to the user to use the correct one.
            </remarks>
        </member>
        <member name="M:BGAPI2.SystemList.Add(BGAPI2.System)">
            <summary>
            This function adds a GenTL producer to the system list.
            It can be used to e.g. load GenTL producer which were not found by the searching procedure of the Refresh function.
            </summary>
            <param name="system">The System (GenTL producer) to be added</param>
            <exception cref="T:BGAPI2.Exceptions.ErrorException">Internal sytem error, thrown if the GenTL producer couldn't be loaded. Check trace output for a detailed error description.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>
            The GenICam variable on 64bit systems is defined as 'GENICAM_GENTL64_PATH', on 32bit systems 'GENICAM_GENTL32_PATH'.
            Already found GenTL producers remain unaffected by the Refresh function.
            If a GenTL producer is found twice in different directories, it is up to the user to use the correct one.
            </remarks>
        </member>
        <member name="T:BGAPI2.InterfaceListEnumeration">
            <summary>
            This class inherits from the generic Bgapi2Enumerations class and provides
            an implementation for an enumeration of BGAPI2.Interfaces.
            </summary>
        </member>
        <member name="T:BGAPI2.InterfaceList">
            <summary>
            Specialized Bgapi2ObjectList for BGAPI2 Interface objects (e.g. GigE interfaces, USB interfaces, ...)
            This class is used to search and list interface objects.
            </summary>
        </member>
        <member name="F:BGAPI2.InterfaceList.mInterfaceList">
            <summary>
            This Property delivers all Keys of all any available interface
            </summary>
            <returns>Dictionary(string, Interface).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.InterfaceList.Item(System.String)">
            <summary>
            Overload indexing operator []
            </summary>
            <returns>Bgapi.Interface entry in Interfacelist at position interfaceid</returns>
        </member>
        <member name="P:BGAPI2.InterfaceList.Keys">
            <summary>
            This Property delivers a collection of Keys of all available Interfaces
            </summary>
            <returns>Dictionary(string, Interface).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.InterfaceList.Values">
            <summary>
            This Property delivers a collection of Values of all available Interfaces
            </summary>
            <returns>Dictionary(string, Interface).KeyCollection Values</returns>
        </member>
        <member name="M:BGAPI2.InterfaceList.Refresh(System.UInt64)">
            <summary>
            Refresh InterfaceList enumerates all currently available Interfaces.
            Before it is called the first time the InterfaceList will be empty.
            This overload calls Refresh with a user-given timeout.
            </summary>
            /// <param name="iTimeout">ulong TimeOut for this method</param>
        </member>
        <member name="M:BGAPI2.InterfaceList.find(System.String)">
            <summary>
            This function delivers a KeyValuePair(string, Interface) which is not empty
            if and only if the Interface with the id is contained in the current Interface configuration.
            </summary>
            <param name="id">string id for the Interface to be found</param>
            <returns>KeyValuePair(string, Interface) result which is nonempty if Interface was found</returns>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">If a null value was passed</exception>
        </member>
        <member name="P:BGAPI2.InterfaceList.Count">
            <summary>
            This Property delivers the total number of available Interfaces
            </summary>
            <returns>int Count</returns>
        </member>
        <member name="M:BGAPI2.InterfaceList.Clear">
            <summary>
            Clear InterfaceList closes and removes all currently available Interfaces from the InterfaceList.
            After it is called the InterfaceList will be empty.
            </summary>
        </member>
        <member name="T:BGAPI2.DeviceListEnumeration">
            <summary>
            This class inherits from the generic Bgapi2Enumerations class and provides
            an implementation for an enumeration of BGAPI2.Devices.
            </summary>
        </member>
        <member name="T:BGAPI2.DeviceList">
            <summary>
            Specialized Bgapi2ObjectList for BGAPI2 Device objects (e.g. cameras, ...)
            This class is used to search and list interface objects.
            </summary>
        </member>
        <member name="F:BGAPI2.DeviceList.mDeviceList">
            <summary>
            This Property delivers all Keys of all any available device
            </summary>
            <returns>Dictionary(string, Device).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.DeviceList.Item(System.String)">
            <summary>
            Overload indexing operator []
            </summary>
            <returns>Bgapi.Device entry in Devicelist at position deviceid</returns>
        </member>
        <member name="P:BGAPI2.DeviceList.Keys">
            <summary>
            This Property delivers a collection of Keys of all available Device
            </summary>
            <returns>Dictionary(string, Device).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.DeviceList.Values">
            <summary>
            This Property delivers a collection of Values of all available Devices
            </summary>
            <returns>Dictionary(string, Device).KeyCollection Values</returns>
        </member>
        <member name="M:BGAPI2.DeviceList.Refresh(System.UInt64)">
            <summary>
            Refresh DeviceList enumerates all currently available Devices.
            Before it is called the first time the DeviceList will be empty.
            This overload calls Refresh with a user-given timeout.
            </summary>
            /// <param name="iTimeout">ulong TimeOut for this method</param>
        </member>
        <member name="M:BGAPI2.DeviceList.find(System.String)">
            <summary>
            This function delivers a KeyValuePair(string, Device) which is not empty
            if and only if the Device with the id is contained in the current Device configuration.
            </summary>
            <param name="id">string id for the Device to be found</param>
            <returns>KeyValuePair(string, Device) result which is nonempty if Device was found</returns>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">If a null value was passed</exception>
        </member>
        <member name="P:BGAPI2.DeviceList.Count">
            <summary>
            This Property delivers the total number of available Devices
            </summary>
            <returns>int Count</returns>
        </member>
        <member name="M:BGAPI2.DeviceList.Clear">
            <summary>
            Clear DeviceList closes and removes all currently available Devices from the DevicesList.
            After it is called the DeviceList will be empty.
            </summary>
        </member>
        <member name="T:BGAPI2.DatastreamListEnumeration">
            <summary>
            This class inherits from the generic Bgapi2Enumerations class and provides
            an implementation for an enumeration of BGAPI2.Datastreams.
            </summary>
        </member>
        <member name="T:BGAPI2.DataStreamList">
            <summary>
            Specialized Bgapi2ObjectList for BGAPI2 DataStream objects
            This class is used to discover and list data stream objects.
            </summary>
        </member>
        <member name="F:BGAPI2.DataStreamList.mDatastreamList">
            <summary>
            This Property delivers all Keys of all any available Datastream
            </summary>
            <returns>Dictionary(string, Datastream).KeyCollection Keys</returns>
        </member>
        <member name="M:BGAPI2.DataStreamList.Refresh">
            <summary>
            Refresh DataStreamList enumerates all currently available DataStreams.
            Before it is called the first time the DataStreamList will be empty.
            This overload calls Refresh with a timeout of zero internally.
            </summary>
        </member>
        <member name="P:BGAPI2.DataStreamList.Item(System.String)">
            <summary>
            Overload indexing operator []
            </summary>
            <returns>Bgapi.DataStream entry in DataStreamlist at position DataStreamid</returns>
        </member>
        <member name="P:BGAPI2.DataStreamList.Keys">
            <summary>
            This Property delivers a collection of Keys of all available DataStreams
            </summary>
            <returns>Dictionary(string, DataStream).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.DataStreamList.Values">
            <summary>
            This Property delivers a collection of Values of all available DataStreams
            </summary>
            <returns>Dictionary(string, DataStream).KeyCollection Values</returns>
        </member>
        <member name="M:BGAPI2.DataStreamList.find(System.String)">
            <summary>
            This function delivers a KeyValuePair(string, DataStream) which is not empty
            if and only if the DataStream with the id is contained in the current DataStream configuration.
            </summary>
            <param name="id">string id for the DataStream to be found</param>
            <returns>KeyValuePair(string, DataStream) result which is nonempty if DataStream was found</returns>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">If a null value was passed</exception>
        </member>
        <member name="P:BGAPI2.DataStreamList.Count">
            <summary>
            This Property delivers the total number of available Datastreams
            </summary>
            <returns>int Count</returns>
        </member>
        <member name="M:BGAPI2.DataStreamList.Clear">
            <summary>
            Clear DataStreamList closes and removes all currently available DataStreams from the DataStreamList.
            After it is called the DataStreamList will be empty.
            </summary>
        </member>
        <member name="F:BGAPI2.DataStreamList.mpDevice">
             <summary>
            This function starts the search for DataStreams.
            The DataStreamList is part of a Device object and the Refresh function search only DataStreams at this Device (e.g. a camera).
            The found DataStreams will be inserted into the DataStreamList.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>Usual is only one DataStream per camera at this moment but it's possible in the future, that more than one streams are available</remarks>
        </member>
        <member name="T:BGAPI2.BufferListEnumeration">
            <summary>
            This class inherits from the generic Bgapi2Enumerations class and provides
            an implementation for an enumeration of BGAPI2.Buffers.
            </summary>
        </member>
        <member name="T:BGAPI2.BufferList">
            <summary>
            Specialized Bgapi2ObjectList for BGAPI2 Buffer objects
            This class is used for discovery and listing of buffer objects.
            </summary>
        </member>
        <member name="F:BGAPI2.BufferList.mBufferList">
            <summary>
            This Property delivers all Keys of all any available Buffer
            </summary>
            <returns>Dictionary(string, Buffer).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.BufferList.Count">
            <summary>
            This Property delivers the total number of available Buffers
            </summary>
            <returns>int Count</returns>
        </member>
        <member name="P:BGAPI2.BufferList.Keys">
            <summary>
            This Property delivers a collection of Keys of all available Buffers
            </summary>
            <returns>Dictionary(string, Buffer).KeyCollection Keys</returns>
        </member>
        <member name="P:BGAPI2.BufferList.Values">
            <summary>
            This Property delivers a collection of Values of all available Buffers
            </summary>
            <returns>Dictionary(string, Buffer).KeyCollection Values</returns>
        </member>
        <member name="M:BGAPI2.BufferList.find(System.String)">
            <summary>
            This function delivers a KeyValuePair(string, Buffer) which is not empty
            if and only if the Buffer with the id is contained in the current Buffer configuration.
            </summary>
            <param name="id">string id for the Buffer to be found</param>
            <returns>KeyValuePair(string, Buffer) result which is nonempty if Buffer was found</returns>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">If a null value was passed</exception>
        </member>
        <member name="M:BGAPI2.BufferList.FlushInputToOutputQueue">
            <summary>
            This function moves all Buffer objects of the Buffer list to the input buffer queue even those in the output buffer queue. See function Buffer.QueueBuffer and DataStreamEventControl.GetFilledBuffer.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.FlushAllToInputQueue">
            <summary>
            This function moves all free (not queued) Buffer objects of the Buffer list to the input buffer queue. See function Buffer.QueueBuffer.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.FlushUnqueuedToInputQueue">
            <summary>
            This function discards all Buffer objects in the output buffer queue. The discarded Buffer objects are free.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.DiscardOutputBuffers">
            <summary>
            This function discards all Buffer objects in the input buffer queue and output buffer queue. The discarded Buffer objects are free.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.DiscardAllBuffers">
            <summary>
            This function discards all Buffer objects in the input buffer queue and output buffer queue. The discarded Buffer objects are free.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.RemoveAll">
            <summary>
            This function removes all Buffer objects from the Buffer list.
            </summary>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.RevokeBuffer(BGAPI2.Buffer)">
            <summary>
            This function removes a Buffer object from the buffer list.
            </summary>
            <param name="buffer">The Buffer object to be removed.</param>
            <returns>
            The object passed to the Buffer at its creation.
            </returns>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed parameter is not a valid Buffer object.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.Add(BGAPI2.Buffer)">
            <summary>
            This function adds a Buffer object to the buffer list. If the Buffer object is created without external memory, this function allocates the necessary memory.
            </summary>
            <param name="buffer">The Buffer object to be added.</param>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed parameter is not a valid Buffer object.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.BufferList.Add(System.String,BGAPI2.Buffer)">
            <summary>
            This function adds a Buffer object to the buffer list. If the Buffer object is created without external memory, this function allocates the necessary memory.
            </summary>
            <param name="id">User defined Key parameter for the Buffer object in the BufferList</param>
            <param name="buffer">The Buffer object to be added.</param>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed parameter is not a valid Buffer object.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>
            The automated genarated key is the best way to generate unique keys.
            It is preferred to use the overloaded function without id.
            </remarks>
        </member>
        <member name="P:BGAPI2.BufferList.DeliveredCount">
            <summary>
            This function delivers the number of lost frames due to queue underrun since the DataStream object was started. This counter is incremented every time the data could not be acquired because there was no Buffer object in the input buffer queue.
            </summary>
            <returns>UInt64 The count of the delivered Buffers</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>For better understanding the buffer handling please compare with the graphic in the programmers guide.</remarks>
        </member>
        <member name="P:BGAPI2.BufferList.UnderrunCount">
            <summary>
            This function delivers the number of lost frames due to queue underrun since the DataStream object was started. This counter is incremented every time the data could not be acquired because there was no Buffer object in the input buffer queue.
            </summary>
            <returns>UInt64 The number of lost frames.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>For better understanding the buffer handling please compare with the graphic in the programmers guide.</remarks>
        </member>
        <member name="P:BGAPI2.BufferList.AnnouncedCount">
            <summary>
            This function delivers the number of Buffer objects in the Buffer list. Same as BufferList.Count.
            </summary>
            <returns>The number of Buffer objects in the Buffer list.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>For better understanding the buffer handling please compare with the graphic in the programmers guide.</remarks>
        </member>
        <member name="P:BGAPI2.BufferList.QueuedCount">
            <summary>
            This function delivers the number of Buffer objects in the input buffer queue. See function Buffer.QueueBuffer.
            </summary>
            <returns>The number of Buffer objects in the input buffer queue.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>For better understanding the buffer handling please compare with the graphic in the programmers guide.</remarks>
        </member>
        <member name="P:BGAPI2.BufferList.AwaitDeliveryCount">
            <summary>
            This function delivers the number of Buffer objects in the output buffer queue. See function DataStreamEventControl.GetFilledBuffer.
            </summary>
            <returns>The number of Buffer objects in the output buffer queue.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>For better understanding the buffer handling please compare with the graphic in the programmers guide.</remarks>
        </member>
        <member name="P:BGAPI2.BufferList.StartedCount">
            <summary>
            This function delivers the number of Buffer objects which are currently being filled.
            </summary>
            <returns>UInt64 The number of Buffer objects which are currently being filled.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>For better understanding the buffer handling please compare with the graphic in the programmers guide.</remarks>
        </member>
        <member name="M:BGAPI2.ThrowBGAPI2Exception.start(System.Int32,System.String,System.String)">
            <summary>
            This function throws an exception with the specific exception class
            </summary>
            <param name="errorcode">Error number</param>
            <param name="description">Description of the error</param>
            <param name="funcname">The Name of the function that triggered the error</param>
        </member>
        <member name="T:BGAPI2.Trace">
            <summary>
            The class Trace offers the possibility to monitor the program flow and detect errors. This class belongs to the additional classes.
            This class consists exclusively of static functions.
            </summary>
        </member>
        <member name="M:BGAPI2.Trace.Enable(System.Boolean)">
            <summary>
            This function switches the trace on
            </summary>
            <param name="benable">This flag activates the writing of the trace messages into a file.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateOutputToFile(System.Boolean,System.String)">
            <summary>
            This function activates the writing of the trace messages into the specified file.
            </summary>
            <param name="bactive">This flag activates the writing of the trace messages into a file.</param>
            <param name="tracefilename">The name of the file to which the trace messages is written.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateOutputToDebugger(System.Boolean)">
            <summary>
            This function activates the writing of the trace messages into the debugger output.
            </summary>
            <param name="bactive">This flag activates the writing of the trace messages into the debugger output.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateMaskError(System.Boolean)">
            <summary>
            This function activates the writing of errors.
            </summary>
            <param name="bactive">This flag activates the writing of errors.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateMaskWarning(System.Boolean)">
            <summary>
            This function activates the writing of warnings.
            </summary>
            <param name="bactive">This flag activates the writing of warnings.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateMaskInformation(System.Boolean)">
            <summary>
            This function activates the writing of information.
            </summary>
            <param name="bactive">This flag activates the writing of information.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateOutputOptionTimestamp(System.Boolean)">
            <summary>
            This function inserts a timestamp into the trace message.
            </summary>
            <param name="bactive">This flag activates the inserting of the timestamp.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateOutputOptionTimestampDiff(System.Boolean)">
            <summary>
            This function inserts a timestamp difference to the last message into the current message.
            </summary>
            <param name="bactive">This flag activates the inserting of the timestamp difference.</param>
        </member>
        <member name="M:BGAPI2.Trace.ActivateOutputOptionPrefix(System.Boolean)">
            <summary>
            This function inserts a short prefix into the current message which specifies the source of the message, e.g. bgapi2_genicam.dll or a Baumer GenTL producer.
            </summary>
            <param name="bactive">This flag activates the inserting of a short prefix.</param>
        </member>
        <member name="P:BGAPI2.Trace.Instance">
            <summary>
            Get the one and only bgapi2 Trace object instance.
            </summary>
            <returns>
            bgapi2 Trace object
            </returns>
        </member>
        <member name="M:BGAPI2.Global.getInstance">
            <summary>
            Get the one and only bgapi2 Global object instance.
            </summary>
            <returns>
            bgapi2 object
            </returns>
        </member>
        <member name="T:BGAPI2.ImageProcessor">
            <summary>
            The task of the class ImageProcessor are the creation of image objects and the transformation of pixel formats.
            This class belongs to the additional classes.
            A transformation can be the demosaicing of raw sensor pixel arrangements in a common displayable pixelformat, e.g. RAWBAYER to RGB8 or RGB to YUV.
            This class is based on DLL "bgapi2_img.dll".
            </summary>
        </member>
        <member name="M:BGAPI2.ImageProcessor.#ctor">
            <summary>
            Constructor of ImageProcessor class.
            </summary>
        </member>
        <member name="M:BGAPI2.ImageProcessor.Finalize">
            <summary>
            Destructor of ImageProcessor class.
            </summary>
        </member>
        <member name="M:BGAPI2.ImageProcessor.GetVersion">
            <summary>
            Get the version number of the ImageProcessor library. The delivered string is composed of these several tags: Major.Minor.LastChanged.RevId.
            </summary>
            <returns>string The version number of the ImageProcessor library.</returns>
        </member>
        <member name="M:BGAPI2.ImageProcessor.CreateImage(System.UInt32,System.UInt32,System.String,System.IntPtr,System.UInt64)">
            <summary>
            This function creates an Image object according the parameters width, height and pixelformat. The Image object uses a user defines buffer.
            </summary>
            <param name="width">The width of the Image object in pixel.</param>
            <param name="height">The height of the Image object in pixel.</param>
            <param name="pixelformat">The pixelformat of the Image object.</param>
            <param name="pBuffer">The user defined image buffer.</param>
            <param name="uBufferSize">The size of the user defined image buffer bytes.</param>
            <returns>The created Image object.</returns>
        </member>
        <member name="M:BGAPI2.ImageProcessor.CreateTransformedImage(BGAPI2.Image,System.String)">
            <summary>
            This function transformes the pixelformat of this Image object and creates a new Image object.
            </summary>
            <param name="imageSource">The source Image objecrt.</param>
            <param name="dstPixelformat">The destination pixel format of the new Image object.</param>
            <returns>The destination Image object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ErrorException">Error while transform the image.</exception>
            <remarks>Please note, that not all pixelformats can be transformed in all other formats. See the programmersguide.</remarks>
        </member>
        <member name="M:BGAPI2.ImageProcessor.CreateBitmap(BGAPI2.Image,System.Boolean)">
            <summary>
            Create a Bitmap Object from the Image object. Image will be converted to default pixeltype first,
            before creation of the Bitmap.
            Created Bitmap can be used as long as the parent image object was not released.
            </summary>
            <param name="image"> source Image object.</param>
            <param name="bColoredBitmap">If set to true a Bitmap as RGB8 will be created, as Mono8 otherwise.</param>
            <returns>The created Bitmap object</returns>
            <exception cref="T:BGAPI2.Exceptions.ErrorException">Could not create bit map.</exception>
            <see cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="P:BGAPI2.ImageProcessor.NodeTree">
            <summary>
            Provides the features of the ImageProcessor as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap</returns>
            <remarks>Use this NodeMap for using in Controls like TreeView.</remarks>
        </member>
        <member name="P:BGAPI2.ImageProcessor.NodeList">
            <summary>
            This property provides the features of ImageProcessor as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap</returns>
            <remarks>Use this NodeMap e.g. for searching over all Features</remarks>
        </member>
        <member name="M:BGAPI2.ImageProcessor.Dispose(System.Boolean)">
            <summary>
            Dispose function.
            </summary>
        </member>
        <member name="T:BGAPI2.Image">
            <summary>
            This class represents an image.
            </summary>
        </member>
        <member name="M:BGAPI2.Image.Release">
            <summary>
            This function frees all used resoures.
            If a Bitmap was created DO NOT use it anymore.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:BGAPI2.Image.Init(System.UInt32,System.UInt32,System.String,System.IntPtr,System.UInt64)">
            <summary>
            This function reinitialize an Image object according the parameters width, height and pixelformat. The Image object uses a user defines buffer.
            </summary>
            <param name="width">The width of the Image object in pixel.</param>
            <param name="height">The height of the Image object in pixel.</param>
            <param name="pixelformat">The pixelformat of the Image object.</param>
            <param name="pBuffer">The user defined image buffer.</param>
            <param name="uBufferSize">The size of the user defined image buffer bytes.</param>
            <returns>void</returns>
        </member>
        <member name="P:BGAPI2.Image.Width">
            <summary>
            Gets the width of the Image in pixels
            </summary>
            <returns>UInt32 The width of the image in pixel.</returns>
            <remarks>This property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Image.Height">
            <summary>
            Gets the height of the Image in pixel.
            </summary>
            <returns>UInt32 The height of the image in pixel.</returns>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Image.PixelFormat">
            <summary>
            Gets the pixel format of the Image object.
            </summary>
            <returns>string The pixelformat of the Image object.</returns>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Image.Buffer">
            <summary>
            Returns the IntPtr of the Image Buffer
            </summary>
            <returns>IntPtr Buffer</returns>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Image.NodeTree">
            <summary>
            Provides the features of the Image as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap</returns>
            <remarks>Use this NodeMap for using in Controls like TreeView.</remarks>
        </member>
        <member name="P:BGAPI2.Image.NodeList">
            <summary>
            This property provides the features of Image as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap</returns>
            <remarks>Use this NodeMap e.g. for searching over all Features</remarks>
        </member>
        <member name="M:BGAPI2.Image.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="T:BGAPI2.System">
            <summary>
            This class represents a producer/system.
            </summary>
        </member>
        <member name="M:BGAPI2.System.#ctor(System.String)">
            <summary>
            This constuctor sets the path to the producer file.
            </summary>
            <param name="filepath">The path including filename of GenTL producer to be loaded.</param>
        </member>
        <member name="M:BGAPI2.System.Finalize">
            <summary>
            Destructor of System class.
            </summary>
        </member>
        <member name="M:BGAPI2.System.Open">
            <summary>
            This function opens the system object and makes their functions available. Exceptions are the info-functions, which are already available before opening the system.
            </summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ResourceInUseException">This exception will be thrown if the system object is already open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.System.Close">
            <summary>
            This function closes the system object and releases the used resources.
            </summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.System.ToString">
            <summary>
            Returns the display name of this System.
            </summary>
            <returns>string the display name of the System</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>Returns the same as DisplayName</remarks>
        </member>
        <member name="P:BGAPI2.System.Interfaces">
            <summary>
            Gets the interface list of the system.
            </summary>
            <returns>InterfaceList The interface list of the System</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The system object is not opened.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use the Refresh function to fill the InterfaceList</remarks>
        </member>
        <member name="P:BGAPI2.System.NodeTree">
            <summary>
            Provides the features of the System as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The tree structure of all features of the System.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
        </member>
        <member name="P:BGAPI2.System.NodeList">
            <summary>
            This property provides the features of System as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The list of all features of this System object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for searching a Feature</remarks>
        </member>
        <member name="P:BGAPI2.System.Id">
            <summary>
            Gets the unique string identifier of the System which is used in the SystemList (Key).
            </summary>
            <returns>string: The Key of the System object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.Vendor">
            <summary>
            Gets the name of the GenTL producer vendor.
            </summary>
            <returns>string</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.Model">
            <summary>Gets the name of the GenTL producer to distinguish different kinds of GenTL Producer implementations.</summary>
            <returns>string: The Model of the Producer.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.Version">
            <summary>Gets the GenTL Producer version.</summary>
            <returns>string: The GenTL producer version.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.TLType">
            <summary>Gets the transport layer type of the GenTL Producer.</summary>
            <returns>string: The transport layer type of GenTL Producer.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.FileName">
            <summary>Gets the file name of the GenTL Producer.</summary>
            <returns>string: The file name of the GenTL Producer.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.PathName">
            <summary>Gets the full path to the GenTL Producer including filename.</summary>
            <returns>string: The full path to the GenTL Producer including filename.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.DisplayName">
            <summary>Gets a meaningful name of the GenTL Producer for display only.</summary>
            <returns>string: A meaningful name of the GenTL Producer for display only.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.System.IsOpen">
            <summary>Gets true, if the system is opened.</summary>
            <returns>bool: true, if the system is open.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="M:BGAPI2.System.Dispose(System.Boolean)">
            <summary>
            Dispose function.
            </summary>
        </member>
        <member name="T:BGAPI2.Interface">
            <summary>
            The class Interface represents a physical interface, e.g. GEV or a logical interface, such as USB and belongs to the BGAPI2 main classes.
            </summary>
        </member>
        <member name="M:BGAPI2.Interface.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:BGAPI2.Interface.Open">
            <summary>This function opens the interface object and make their functions available. Exceptions are the info-functions, which are already available before opening the interface.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.ResourceInUseException">This exception will be thrown if the interface object is already open.</exception>
        </member>
        <member name="M:BGAPI2.Interface.Close">
            <summary>This function closes the interface object and releases the used resources.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Interface.ToString">
            <summary>Gets a meaningful name of the Interface for display only.</summary>
            <returns>string: a meaningful name of the Interface for display only.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Interface.Devices">
            <summary>Gets the device list of the interface.</summary>
            <returns>DeviceList: The device list of the interface.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>The Property is Read only. Use the Refresh function to fill the Devicelist.</remarks>
        </member>
        <member name="P:BGAPI2.Interface.NodeTree">
            <summary>
            Provides the features of the Interface as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The tree structure of all features of the Interface.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
        </member>
        <member name="P:BGAPI2.Interface.NodeList">
            <summary>
            This property provides the features of Interface as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The list of all features of this Iterface object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for searching a Feature</remarks>
        </member>
        <member name="P:BGAPI2.Interface.Id">
            <summary>Gets the unique string identifier of the Interface, which is used in the InterfaceList.</summary>
            <returns>The unique string identifier (Key).</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Interface.DisplayName">
            <summary>Gets a meaningful name of the Interface for display only.</summary>
            <returns>string: The meaningful name of the Interface.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Interface.TLType">
            <summary>Gets the transport layer type of the Interface.</summary>
            <returns>string: The transport layer type of Interface.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Interface.IsOpen">
            <summary>Gets true, if the interface is opened.</summary>
            <returns>bool: true, if the interface is open.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Interface.Parent">
            <summary>Gets the superordinate System object.</summary>
            <returns>System: The superordinate System object. </returns>
        </member>
        <member name="M:BGAPI2.Interface.Dispose(System.Boolean)">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BGAPI2.Device">
            <summary>
            The class Device is used to retrieve information (e.g. model, manufacturer, access modes)
            of the device (camera) and also to control the device. This class belongs to the BGAPI2 main classes.
            </summary>
        </member>
        <member name="M:BGAPI2.Device.Finalize">
            <summary>
            Destructor of Device class.
            </summary>
        </member>
        <member name="M:BGAPI2.Device.Open">
            <summary>This function opens the device object and makes their functions available. Exceptions are the info-functions, which are already available before opening the device.</summary>
            <returns>void</returns>
            <Exception cref="T:BGAPI2.Exceptions.ResourceInUseException">This exception will be thrown if the interface object is already open.</Exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>GigEVision (GEV) devices supports several access methods for opening. The several methods are read access, read and write access and exclusive read and write access. If a device is opened for reading another application can get read and write access. If a device is opened for reading and writing one or more other applications only can get read access. If a device is opened for exclusive reading and writing the access from other applications is not possible.
            Devices of other transport layer types (e.g. USB3Vision) supports only the exclusive read and write access, that means the open function opens the device for reading and writing. The access from other applications is not possible.</remarks>
        </member>
        <member name="M:BGAPI2.Device.OpenExclusive">
            <summary>This function opens the device object exclusive and makes their functions available. Exceptions are the info-functions, which are already available before opening the device.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ResourceInUseException">This exception will be thrown if the interface object is already open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>GigEVision (GEV) devices supports several access methods for opening. The several methods are read access, read and write access and exclusive read and write access. If a device is opened for reading another application can get read and write access. If a device is opened for reading and writing one or more other applications only can get read access. If a device is opened for exclusive reading and writing the access from other applications is not possible.
            Devices of other transport layer types (e.g. USB3Vision) supports only the exclusive read and write access, that means the open function opens the device for reading and writing. The access from other applications is not possible.</remarks>
        </member>
        <member name="M:BGAPI2.Device.OpenReadOnly">
            <summary>This function opens the device object only for reading and make their functions available. Exceptions are the info-functions, which are already available before opening the device.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ResourceInUseException">This exception will be thrown if the interface object is already open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>GigEVision (GEV) devices supports several access methods for opening. The several methods are read access, read and write access and exclusive read and write access. If a device is opened for reading another application can get read and write access. If a device is opened for reading and writing one or more other applications only can get read access. If a device is opened for exclusive reading and writing the access from other applications is not possible.
            Devices of other transport layer types (e.g. USB3Vision) supports only the exclusive read and write access, that means the open function opens the device for reading and writing. The access from other applications is not possible.</remarks>
        </member>
        <member name="M:BGAPI2.Device.Close">
            <summary>This function closes the device object and releases the used resources.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Device.StartStacking(System.Boolean)">
            <summary>This function starts the stacked mode for write commands (control commands). See remarks.</summary>
            <param name="bReplaceMode">Enable or disable the replace mode. Enable or disable the replace mode. This mode will control whether all accesses to a register will be transferred to the device or only the last one.</param>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The device object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>The stacked mode is a high-performance method for transmitting write commands (control commands) to the device. The control commands were packed into one packet and transmitted as a concatenated command. The stacked mode is started by calling the function Device.StartStacking. All following control commands were collected and will not be transmitted until the calling of Device.WriteStack. After calling Device.WriteStack the stacked mode is stopped.</remarks>
        </member>
        <member name="M:BGAPI2.Device.WriteStack">
            <summary>This function starts the stacked mode for write commands (control commands). See remarks.</summary>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The device object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NoDataException">The stacked mode is not started or no control commands were written after calling the function Device.StartStacking.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>The stacked mode is a high-performance method for transmitting write commands (control commands) to the device. The control commands were packed into one packet an transmitted as concatenated command. The stacked mode is started by calling the function Device::StartStacking. All following control commands were collected and will not transmitted until the calling of Device::WriteStack. After calling Device::WriteStack the stacked mode is stopped.</remarks>
        </member>
        <member name="M:BGAPI2.Device.SetUpdateMode(System.Boolean,System.String)">
            <summary>This function enables or disables the update mode. See remarks.</summary>
            <param name="bEnable">Enable or disable the update mode. This mode will allow you to perform updates on the device.</param>
            <param name="sCustomKey">Reserved for future use and should be set to "".</param>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The device object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NoDataException">The stacked mode is not started or no control commands were written after calling the function Device.StartStacking.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>The update mode allows an firmware update of the device. The remote device features will not be available in the update mode.</remarks>
            <remarks>In order to enable the update mode all data streams of the device have to be closed.</remarks>
            <remarks>The update mode requires the BO_UpdateAPI2 library.</remarks>
            <remarks>If you perform an update, previously requested node objects of the remote device will become invalid.</remarks>
        </member>
        <member name="M:BGAPI2.Device.ToString">
            <summary>This function delivers a meaningful name of the Device for display only.</summary>
            <returns>string: A meaningful name of the Device for display only.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="P:BGAPI2.Device.DataStreams">
            <summary>Gets the data stream list of the device.</summary>
            <returns>DataStreamList: The data stream list of the device.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.NodeTree">
            <summary>
            Provides the features of the Device as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The tree structure of all features of the Device.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
        </member>
        <member name="P:BGAPI2.Device.NodeList">
            <summary>
            This property provides the features of Device as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The list of all features of this Device object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for searching a Feature</remarks>
        </member>
        <member name="P:BGAPI2.Device.RemoteNodeTree">
            <summary>
            The remote functions of the Device class are used to get access to the features of the physical (remote) device.
            This property provides the features of the remote device as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            The access to the features (elements) of the subordinated levels of hierarchy the properties Node.NodeTree and Node.NodeList should be used respectively.
            An element of the list has only subordinated levels of hierarchy, if the interface type of the element is category ('ICategory'). See property Node.Interface.
            </summary>
            <returns>NodeMap: The list of all features of the remote device in form of a NodeMap object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of the remote device is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
        </member>
        <member name="P:BGAPI2.Device.RemoteNodeList">
            <summary>
            The remote functions of the Device class are used to get access to the features of the physical (remote) device.
            This property provides the features of the remote device as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            Unlike RemoteNodeTree all elements of the interface type category ('ICategory') are removed. See property Node.Interface.
            </summary>
            <returns>NodeMap: The list of all features of the remote device in form of a NodeMap object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of the remote device is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for searching a Feature</remarks>
        </member>
        <member name="P:BGAPI2.Device.RemoteConfigurationFile">
            <summary>
             The remote functions of the Device class are used to get access to the features of the physical (remote) device.
             This property gets the GenICam XML File of the remote device.
            </summary>
            <returns>string: The GenICam XML File of the remote device.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of the remote device is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.Id">
            <summary>Gets the unique string identifier of the Device, which is used in the DeviceList.</summary>
            <returns>string: The unique string identifier.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.Vendor">
            <summary>Gets the name of the device vendor.</summary>
            <returns>string: The name of the device vendor.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.Model">
            <summary>Gets the name of the device.</summary>
            <returns>string: The name of the device.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.SerialNumber">
            <summary>Gets the serial number of the device.</summary>
            <returns>string: The serial number of the device.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.TLType">
            <summary>Gets the TL type of this device</summary>
            <returns>The TL type of this device</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.DisplayName">
            <summary>Gets a meaningful name of the Device for display only.
            For Baumer devices this function delivers the value of the feature 'DeviceUserID'. If this feature is not available or empty the model name of the device is delivered instead.
            </summary>
            <returns>string: The meaningful name of the Device.</returns>
            /// <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.AccessStatus">
            <summary>
            This function delivers the access mode to the device. If this function is used before opening the device, it provides the possible access mode. The following possibilities can occur before opening the device.
            If the property delivers with "RW" before opening, the device can be opened with one of the functions Device::Open or Device::OpenExclusive.
            If the property delivers with "RO" before opening, the device can be opend only with function Device::OpenReadOnly.
            If the property delivers with "NA" before opening, the device can not be opened.
            If the property delivers with "Unknown" before opening, the access mode could not be determined. The call to an open function may throw an exception.
            Is the device already opened, this function delivers the current access mode. The following variants can occur after opening the device.
            If the device was opened with the function Device::Open or Device::OpenExclusive, the function delivers "RW".
            If the device was opened with the function Device::OpenReadOnly, the property delivers "RO".
            </summary>
            <returns>
            string "RW" - read and write access
            string "RO" - only read access
            string "NA" - No access, e.g. the device is not reachable (GEV).
            string "Unknown" - The access mode could not be determined.
            </returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of the remote device is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.IsOpen">
            <summary>Gets true, if the device is opened.</summary>
            <returns>bool: true, if the device is open.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Device.IsUpdateModeAvailable">
            <summary>Gets true, if the update mode is available.</summary>
            <returns>bool: true, if the update mode is available.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
            <remarks>The update mode allows an firmware update of the device. The remote device features will not be available in the update mode.</remarks>
            <remarks>In order to enable the update mode all data streams of the device have to be closed.</remarks>
            <remarks>The update mode requires the BO_UpdateAPI2 library.</remarks>
        </member>
        <member name="P:BGAPI2.Device.IsUpdateModeActive">
            <summary>Gets true, if the update mode is active.</summary>
            <returns>bool: true, if the update mode is active.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
            <remarks>The update mode allows an firmware update of the device. The remote device features will not be available in the update mode.</remarks>
            <remarks>In order to enable the update mode all data streams of the device have to be closed.</remarks>
            <remarks>The update mode requires the BO_UpdateAPI2 library.</remarks>
        </member>
        <member name="P:BGAPI2.Device.UpdateNodeTree">
            <summary>
            The update functions of the Device class are used to get access to the update features of the physical (remote) device.
            This property provides the update features of the remote device as tree structure in form of a NodeMap.
            The access to the update features (elements) of the subordinated levels of hierarchy the properties Node.NodeTree and Node.NodeList should be used respectively.
            An element of the list has only subordinated levels of hierarchy, if the interface type of the element is category ('ICategory'). See property Node.Interface.
            </summary>
            <returns>NodeMap: The list of all update features as NodeMap object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of update featuires is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
            <remarks>The update nodes are only available if the update mode is active.</remarks>
        </member>
        <member name="P:BGAPI2.Device.UpdateNodeList">
            <summary>
            The remote functions of the Device class are used to get access to the features of the physical (remote) device.
            This property provides the features of the remote device as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            Unlike RemoteNodeTree all elements of the interface type category ('ICategory') are removed. See property Node.Interface.
            </summary>
            <returns>NodeMap: The list of all features of the remote device in form of a NodeMap object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of the remote device is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for searching a Feature</remarks>
            <remarks>The update nodes are only available if the update mode is active.</remarks>
        </member>
        <member name="P:BGAPI2.Device.UpdateConfigurationFile">
            <summary>
             The update functions of the Device class are used to get access to the update features of the physical (remote) device.
             This property gets the GenICam XML File of update features.
            </summary>
            <returns>string: The GenICam XML File of update features.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of update features is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
            <remarks>The update configuration file is only available if the update mode is active.</remarks>
        </member>
        <member name="P:BGAPI2.Device.Parent">
            <summary>Gets the superordinate Interface object.</summary>
            <returns>Interface: The superordinate Interface object. </returns>
        </member>
        <member name="M:BGAPI2.Device.Dispose(System.Boolean)">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="M:BGAPI2.Device.GetRemoteNodeList">
             <summary>
             Get the structured NodeMap with all remote features of this Device object.
             </summary>
             <returns>
             NodeMap
             </returns>
             <exception cref="T:BGAPI2.Exceptions.IException">
             Only Exceptions based of BGAPI2.Exceptions.IException
             Use IException.GetErrorDescription or check trace output for more detailed error information.
            </exception>
             <remarks>Use this NodeMap for using in Controls like TreeView.</remarks>
        </member>
        <member name="M:BGAPI2.Device.GetUpdateNodeList">
             <summary>
             Get the structured NodeMap with all remote features of this Device object.
             </summary>
             <returns>
             NodeMap
             </returns>
             <exception cref="T:BGAPI2.Exceptions.IException">
             Only Exceptions based of BGAPI2.Exceptions.IException
             Use IException.GetErrorDescription or check trace output for more detailed error information.
            </exception>
             <remarks>Use this NodeMap for using in Controls like TreeView.</remarks>
        </member>
        <member name="T:BGAPI2.DataStream">
            <summary>
            This class represents a datastream.
            </summary>
        </member>
        <member name="M:BGAPI2.DataStream.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:BGAPI2.DataStream.Open">
            <summary>This function opens the DataStream object and makes their functions available. An exception are the info-functions, which are already available before opening the DataStream object.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ResourceInUseException">This exception will be thrown if the interface object is already open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.DataStream.Close">
            <summary>This function closes the DataStream object and releases the used resources.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.DataStream.StartAcquisition(System.UInt64)">
            <summary>This function starts the DataStream object. It is ready to receive data blocks. The DataStream object is started for an undefined number of transmissions until it is stopped by one of the two functions DataStream::StopAcquisition or DataStream::AbortAcquisition.</summary>
            <returns>void</returns>
            <param name="iNumToAcquire">UInt64: The number of expected data blocks.</param>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.DataStream.StartAcquisition">
            <summary>This function starts the DataStream object. It is ready to receive data blocks. The DataStream object is started for an undefined number of transmissions until it is stopped by one of the two functions DataStream.StopAcquisition or DataStream.AbortAcquisition.
            A data block includes all data of the used payload type, e.g. for 'ChunkData' a data block includes all chunk blocks, for 'Image' a data block includes only image data.
            </summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
        </member>
        <member name="M:BGAPI2.DataStream.StopAcquisition">
            <summary>This function stops the DataStream object directly if no transmission is active or after finishing a active transmission. It is not longer possible to receive data blocks.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
        </member>
        <member name="M:BGAPI2.DataStream.AbortAcquisition">
            <summary>This function stops the DataStream object immediately. Active transmissions are aborted. The aborted buffer gets the status 'incomplete'. See function Buffer.IsIncomplete.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
        </member>
        <member name="M:BGAPI2.DataStream.ToString">
            <summary>This function delivers the unique string identifier of the DataStream object, which is used in the DataStream list.</summary>
            <returns>string: The unique string identifier of the DataStream object</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="P:BGAPI2.DataStream.BufferList">
            <summary>Gets the buffer list of the DataStream object.</summary>
            <returns>BufferList: The buffer list of the DataStream object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
        </member>
        <member name="P:BGAPI2.DataStream.NodeTree">
            <summary>
            Provides the features of the DataStream as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The tree structure of all features of the DataStream.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
        </member>
        <member name="P:BGAPI2.DataStream.NodeList">
            <summary>
            This property provides the features of DataStream as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The list of all features of this DataStream object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for searching a Feature</remarks>
        </member>
        <member name="P:BGAPI2.DataStream.Id">
            <summary>Gets the unique string identifier of the DataStream object, which is used in the DataStream list.</summary>
            <returns>string: The unique string identifier.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.DataStream.PayloadSize">
            <summary>
            This property gets the size of the expecting data block of this DataStream object in bytes based on the current device settings and including all control data (e.g. chunk header).
            This property is mainly used for devices which supports several data streams to allow stream based memory allocation.
            </summary>
            <returns>UInt64: The size of the expected data block in bytes.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.DataStream.IsGrabbing">
            <summary>Gets true, if the DataStream object is started. See functions DataStream.StartAcquisition and DataStream.StartAcquisitionContinuous.</summary>
            <returns>bool: If the delivered value is true, the DataStream object is started.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
        </member>
        <member name="P:BGAPI2.DataStream.TLType">
            <summary>Gets the transport layer type of the DataStream object.</summary>
            <returns>string: The transport layer type of DataStream object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.DataStream.IsDefinedPayloadSize">
            <summary>Gets true, if the DataStream object supports the property DataStream.PayloadSize.</summary>
            <returns>If the delivered value is true, the DataStream object supports the property DataStream.PayloadSize.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.DataStream.IsOpen">
            <summary>Gets true, if the data stream is opened.</summary>
            <returns>bool: true, if the data stream is open.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.DataStream.Parent">
            <summary>Gets the superordinate Device object.</summary>
            <returns>Device: The superordinate Device object. </returns>
        </member>
        <member name="M:BGAPI2.DataStream.Dispose(System.Boolean)">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BGAPI2.Buffer">
            <summary>
            This class represents a buffer.
            </summary>
        </member>
        <member name="M:BGAPI2.Buffer.#ctor">
            <summary>Parameterless constructor for creating of a Buffer-Object. When using this constructor, the buffer object takes care of memory management. The necessary memory for this Buffer-Object will only be allocated when it is added to a Buffer list.</summary>
        </member>
        <member name="M:BGAPI2.Buffer.#ctor(System.Object)">
            <summary>Constructor for creating of a Buffer-Object. When using this constructor, the buffer object takes care of memory management. The necessary memory for this Buffer-Object will only be allocated when added to a Buffer list.</summary>
            <param name="UserObj">A reference to a user object. This reference is stored in the Buffer-Object and can be queried at any time. See property Buffer.UserObj.</param>
        </member>
        <member name="M:BGAPI2.Buffer.#ctor(System.IntPtr,System.UInt64,System.IntPtr)">
            <summary>Constructor for creating of a Buffer-Object. When using this constructor, the user must take care of memory management. The necessary memory for this Buffer-Object has to be allocated beforehand.</summary>
            <param name="pUserBuffer">A reference to a user allocated memory</param>
            <param name="iSize">The size of the user allocated memory in bytes</param>
            <param name="pPrivate"> A pointer to a user allocated memory. This pointer is stored in the Buffer-Object and can be queried at any time.</param>
        </member>
        <member name="M:BGAPI2.Buffer.Finalize">
            <summary>
            Destructor of Buffer class.
            </summary>
        </member>
        <member name="M:BGAPI2.Buffer.QueueBuffer">
            <summary>
            This function moves a Buffer object of the BufferList into the input buffer queue and make it available for the image acquisition.
            If the image aquisition is done the filled Buffer object is moved into the output buffer queue and is fetched with function DataStreamEventControl.GetFilledBuffer. See also the functions of the BufferList, to move the Buffer object between the internal lists.
            The Buffer object has to previously added with BufferList::Add to a BufferList, otherwise the function raises an exception.
            </summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of the remote device is not available.</exception>
        </member>
        <member name="M:BGAPI2.Buffer.ToString">
            <summary>This function delivers the unique string identifier of the Buffer object, which is used in the BufferList.</summary>
            <returns>string: The unique string identifier.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="P:BGAPI2.Buffer.Id">
            <summary>Gets the unique string identifier of the Buffer object, which is used in the BufferList.</summary>
            <returns>string: The unique string identifier.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="P:BGAPI2.Buffer.NodeTree">
            <summary>
            Provides the features of the Buffer as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The tree structure of all features of the Buffer.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.NodeList">
            <summary>
            This property provides the features of Buffer as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap.
            </summary>
            <returns>NodeMap: The list of all features of this Buffer object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for searching a Feature</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.ChunkNodeTree">
            <summary>
            Gets a NodeMap of available chunk information of the Buffer object. Only valid for chunk payload types 'ChunkData' and 'ImageExt'.
            </summary>
            <returns>NodeMap: The list of all features of this Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap for using with controls like TreeView</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.UserObject">
            <summary>Gets a reference to a user object. See the construcors Buffer(object pUserObj).</summary>
            <returns>Object: A reference to a user object</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The GenICam XML file of the remote device is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="P:BGAPI2.Buffer.MemPtr">
            <summary>Gets a reference of an IntPtr to the memory of the Buffer object.</summary>
            <returns>IntPtr: To the memory of the Buffer object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is currently no memory allocated, because it was not added to a BufferList. This exception is thrown only when using the constructors Buffer() and Buffer(object userObj).</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.ErrorDescription or check trace output for more detailed error information. This exception is thrown only when using the constructors Buffer() and Buffer(objec userObj)."</exception>
        </member>
        <member name="P:BGAPI2.Buffer.MemSize">
            <summary>Gets the size of the allocated memory.</summary>
            <returns>UInt64: The size of the allocated memory.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is currently no memory allocated, because it was not added to a BufferList. This exception is thrown only when using the constructors Buffer() and Buffer(object userObj).</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.ErrorDescription or check trace output for more detailed error information.This exception is thrown only when using the constructors Buffer() and Buffer(object userObj).</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.Timestamp">
            <summary>Gets the timestamp of the image. The basic requirement for this function is that the Buffer object needs valid image data. See also the exception description of Exceptions.LowLevelException.</summary>
            <returns>UInt64: The timestamp of the image.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">
            GenTL Producer error. Possible reasons of this exception are: the Buffer object is still empty,
            the Buffer object is moved into the input buffer queue with Buffer.QueueBuffer,
            the Buffer object is filled, but is not fetched with DataStreamEventControl.GetFilledBuffer,
            the payload type of the received data is not supported by the GenTL producer. See function Buffer.PayloadType.
            Use IException.ErrorDescription or check trace output for more detailed error information.
            </exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.NewData">
            <summary>Gets true if the object buffer contains new data.</summary>
            <returns>bool: true if the object buffer contains new data.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.IsQueued">
            <summary>Gets a flag that indicates whether the Buffer object has been queued.
            The flag is set when the Buffer object is moved into the input buffer queue. See functions Buffer.QueueBuffer, BufferList.FlushAllToInputQueue and BufferList.FlushUnqueuedToInputQueue.
            The flag is reset when the Buffer object is fetched by DataStreamEventControl.GetFilledBuffer function.</summary>
            <returns>bool: The flag that indicates whether the object buffer contains new data</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.IsAcquiring">
            <summary>
            Gets a flag that indicates whether the Buffer object is being filled.
            The flag is set when data is written in the memory of the Buffer object.
            The flag is reset when the Buffer object is filled.
            </summary>
            <returns>bool: The flag that indicates whether the Buffer object is being filled.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            /// <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">
            GenTL Producer error. Use IException.ErrorDescription or check trace output for more detailed error information.
            A possible reason for this exception is the use of this function with the Baumer Filter Driver.
            </exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.IsIncomplete">
            <summary>
            Gets a flag that indicates whether the expected data has been completely transferred.
            The flag is set when the expected data was not completely transferred.
            The flag is reset when all expected data was transferred.
            </summary>
            <returns>bool: The flag that indicates whether the expected data has been completely transferred.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.TLType">
            <summary>Gets the transport layer type with which the data were transmitted.</summary>
            <returns>string: The transport layer type with which the data were transmitted.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.SizeFilled">
            <summary>Gets the number of transferred bytes.</summary>
            <returns>UInt64 The number of transferred bytes.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.Width">
            <summary>Gets the width of the image in pixel.</summary>
            <returns>UInt64: The width of the image in pixel.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">Possible reasons for this exceptions are the Buffer object is not added to a BufferList, when using the payload type chunk the chunk feature 'ChunkWidth' is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.Height">
            <summary>Gets the height of the image in pixel.</summary>
            <returns>UInt64: The height of the image in pixel.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">Possible reasons for this exceptions are the Buffer object is not added to a BufferList, when using the payload type chunk the chunk feature 'ChunkHeight' is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.XOffset">
            <summary>Gets the offset in X direction in pixel.</summary>
            <returns>UInt64: The offset in X direction in pixel.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">Possible reasons for this exceptions are the Buffer object is not added to a BufferList, when using the payload type chunk the chunk feature 'ChunkOffsetX' is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.YOffset">
            <summary>Gets the offset in Y direction in pixel.</summary>
            <returns>UInt64: The offset in Y direction in pixel.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">Possible reasons for this exceptions are the Buffer object is not added to a BufferList, when using the payload type chunk the chunk feature 'ChunkOffsetY' is not available.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.XPadding">
            <summary>Gets the number of extra bytes transmitted at the end of each line and it is only specified for the payload types Image and Extended Chunk Data. See function Buffer.PayloadType.</summary>
            <returns>UInt64: The number of extra bytes transmitted at the end of each line.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">Possible reasons for this exceptions are the Buffer object is not added to a BufferList, when using the wrong the payload type.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.YPadding">
            <summary>Gets the number of extra bytes transmitted at the end of the image and it is only specified for the payload types Image and Extended Chunk Data. See function Buffer.PayloadType.</summary>
            <returns>UInt64: The number of extra bytes transmitted at the end of the image.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">Possible reasons for this exceptions are the Buffer object is not added to a BufferList, when using the wrong the payload type.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.FrameID">
            <summary>Gets a sequentially incremented number of the image. The number refers e.g. for GigE Vision and for USB3 Vision to the block ID of the stream.</summary>
            <returns>UInt64: The sequentially incremented number of the image.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.ImagePresent">
            <summary>This property is currently not supported.</summary>
            <returns></returns>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This function is currently not suported.</exception>
        </member>
        <member name="P:BGAPI2.Buffer.ImageOffset">
            <summary>Gets the offset into the memory of the Buffer object to the begin of the image data.</summary>
            <returns>UInt64: The offset into the memory of the Buffer object to the begin of the image data.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object doesn't include image data. The possible reason for this exception is, the image chunk on the device is not enabled.</exception>
        </member>
        <member name="P:BGAPI2.Buffer.PayloadType">
            <summary>Gets the payload type of the Buffer object. See the payload type definitions in bgapi2_def.h (BGAPI2_PAYLOADTYPE_xxx).</summary>
            <returns>string: The payload type of the Buffer object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.PixelFormat">
            <summary>Gets the pixel format of the Buffer object.</summary>
            <returns>string: The pixelformat of the Buffer object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.DeliveredImageHeight">
            <summary>Gets the transmitted lines of an image. Only valid for the payload types 'Image' and 'ImageExt'.</summary>
            <returns>UInt64: The transmitted lines of an image.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Possible reasons for this exception are a incomplete transferred image and a wrong payload type. Use IException::GetErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>
            For matrix cameras this usually is the image height. This function finds application for variable size linescan images.
            This Property is read only.
            </remarks>
        </member>
        <member name="P:BGAPI2.Buffer.DeliveredChunkPayloadSize">
            <summary>Gets the number of transmitted bytes. Only valid for the chunk payload types 'ChunkData' and 'ImageExt'.</summary>
            <returns>UInt64: The number of transmitted bytes.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Possible reasons for this exception are a incomplete transferred image and a wrong payload type. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.ContainsChunk">
            <summary>Checks if the buffer contains chunk data.</summary>
            <returns>bool: chunk present in buffer.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Possible reasons for this exception are a incomplete transferred image and a wrong payload type. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.ChunkLayoutID">
            <summary>Gets a value representing the current structure of the chunk data. This value changes when changing the structure of the chunk data.
            The change in this value initiates a new internal parsing of the chunk data. Only valid for chunk payload types 'ChunkData' and 'ImageExt'.</summary>
            <returns>UInt64: The number of transmitted bytes.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Buffer object is not added to a BufferList.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Possible reasons for this exception are a incomplete transferred image and a wrong payload type. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Buffer.Parent">
            <summary>This function delivers the superordinate DataStream object but only if the Buffer object was added to a BufferList.</summary>
            <returns>DataStream: The superordinate DataStream object or NULL if the Buffer object is not added to a BufferList. </returns>
        </member>
        <member name="M:BGAPI2.Buffer.Dispose(System.Boolean)">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BGAPI2.NodeMap">
            <summary>
            This class represents a list of nodes.
            The class NodeMap represents a collection of Node objects based on the underlying XML definition file. This class supports two representation forms, a unstructured list and a tree structure.
            The tree structure is a hierarchical representation. Special kinds of nodes can have subordinate nodes. These nodes are from interface type 'ICategory' (see property Node.Interface). The access to its subordinate nodes occurs by calling NodeMap.NodeTree.
            The unstructured list representation is linear. All nodes from type 'ICategory' are removed and all its subordinate nodes are moved into the unstructured list.
            The following properties use the unstructured list representation: System.NodeList, Interface.NodeList, Device.NodeList, DataStream.NodeList, Buffer.NodeList, ImageProcessor.NodeList, Image.NodeList, Device.RemoteNodeList, Node.NodeList, Node.EnumNodeList, NodeSelectedNodeList
            The following properties use the tree structure representation: System.NodeTree, Interface.NodeTree, Device.NodeTree, DataStream.NodeTree, Buffer.NodeTree, ImageProcessor.NodeTree, Image.NodeTree, Device.RemoteNodeTree, Node.NodeTree
            </summary>
        </member>
        <member name="M:BGAPI2.NodeMap.GetNodePresent(System.String)">
            <summary>This function delivers a flag that indicates whether the NodeMap contains a Node with the specified name.</summary>
            <returns>bool: The flag which indicates whether the NodeMap contains a Node with the specified name.</returns>
        </member>
        <member name="P:BGAPI2.NodeMap.Count">
            <summary>Gets the number of Node objects in the Node list.</summary>
            <returns>UInt64: The number of Node objects in the Node list.</returns>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.NodeMap.Item(System.String)">
            <summary>
            Returns the Node by the passed name
            </summary>
            <param name="name">the name of the node (feature name)</param>
            <returns>Node</returns>
        </member>
        <member name="P:BGAPI2.NodeMap.Item(System.UInt64)">
            <summary>
            Returns the Node by the passed index
            </summary>
            <param name="i">index of the node</param>
            <returns>Node</returns>
        </member>
        <member name="T:BGAPI2.Node">
            <summary>
            This class represents a node/feature.
            </summary>
        </member>
        <member name="M:BGAPI2.Node.Execute">
            <summary>This function executes the command of the Node object.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Node.get(System.Byte[]@,System.UInt64)">
            <summary>This function gets a chunk of data from a node object.</summary>
            <param name="arrayBytes">A reference to byte array to store data</param>
            <param name="uiLength">Number of Bytes to read</param>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Node.set(System.Byte[])">
            <summary>This function sets a chunk of data to a node object.</summary>
            <param name="arrayBytes">An byte array containing data to write</param>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="T:BGAPI2.Node.SmartValue">
            <summary>Gets or Sets the value as 'long', 'double', 'bool' or 'string'.</summary>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.ToString">
             <summary>Gets the value as 'string'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(BGAPI2.Node.SmartValue)~System.String">
             <summary>Gets the value as 'string'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(System.String)~BGAPI2.Node.SmartValue">
             <summary>Set the value as 'string'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(BGAPI2.Node.SmartValue)~System.Int64">
             <summary>Gets the value as 'long'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(System.Int64)~BGAPI2.Node.SmartValue">
             <summary>Set the value as 'long'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(BGAPI2.Node.SmartValue)~System.Double">
             <summary>Gets the value as 'double'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(System.Double)~BGAPI2.Node.SmartValue">
             <summary>Set the value as 'double'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(BGAPI2.Node.SmartValue)~System.Boolean">
             <summary>Gets the value as 'bool'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="M:BGAPI2.Node.SmartValue.op_Implicit(System.Boolean)~BGAPI2.Node.SmartValue">
             <summary>Set the value as 'bool'.</summary>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="P:BGAPI2.Node.NodeTree">
            <summary>Provides the subordinate features of the Node object as tree structure in form of a NodeMap. For a detailed description of the tree structure representation refer to the class description of NodeMap. Only valid for the interface type 'ICategory'.</summary>
            <returns>NodeMap: The tree structure of all features of this Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="P:BGAPI2.Node.NodeList">
            <summary>Provides the subordinate features of the Node object as unstructured list in form of a NodeMap. For a detailed description of the unstructured list representation refer to the class description of NodeMap. Only valid for the interface type 'ICategory'.</summary>
            <returns>NodeMap: The list of all features of this Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>Use this NodeMap e.g. for searching over all Features</remarks>
        </member>
        <member name="P:BGAPI2.Node.Interface">
            <summary>Gets the interface type of the Node object. Depending on the interface type the needed access functions are available. The available interface types are defined in header file bgapi2_def.h. See definitions BGAPI2_NODEINTERFACE_xxx.</summary>
            <returns>string: The interface type of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Extension">
            <summary>Gets user specific data from the XML definition of this Node object.</summary>
            <returns>string: The user specific data.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.ToolTip">
            <summary>Gets a short description text suitable for a ToolTip representation.</summary>
            <returns>string: The short description text of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Description">
            <summary>Gets a description text of the  Node object.</summary>
            <returns>string: The description text of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Name">
            <summary>Gets the name of the Node object.</summary>
            <returns>string: The name of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Displayname">
            <summary>Gets a name of the node object suitable for displaying.</summary>
            <returns>string: The display name of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Visibility">
            <summary>Gets a value representing the visibility of the Node object.</summary>
            <returns>string: The visibility of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.EventID">
            <summary>Gets an ID of a asynchronous event to which the Node object is linked.</summary>
            <returns>UInt64: The ID of a asynchronous event.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The EventID is not specified in the XML description of this Node object.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.IsImplemented">
            <summary>Gets a flag that indicates whether the Node object is implemented.</summary>
            <returns>bool: The flag that indicates whether the Node object is implemented.</returns>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. A possible reason for this exception is the loss of connection to the device.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.IsAvailable">
            <summary>Gets a flag that indicates whether the Node object is available.
            This status is equivalent to the access mode 'NA'. See property Node.CurrentAccessMode.</summary>
            <returns>bool: The flag that indicates whether the Node object is available.</returns>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.IsLocked">
            <summary>This function delivers a flag that indicates whether the Node object is locked for writing.
            This status is equivalent to the access mode 'RO'.</summary>
            <returns>bool: The flag that indicates whether the Node object is locked for writing.</returns>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <see>See property Node.CurrentAccessMode.</see>
        </member>
        <member name="P:BGAPI2.Node.ImposedAccessMode">
            <summary>Gets a value that specifies the general access to the Node object. This value is not affected by other Node objects.
            The available access modes are defined in header file bgapi2_def.h. See definitions BGAPI2_NODEACCESS_xxx.</summary>
            <returns>string The general access to the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <seealso cref="P:BGAPI2.Node.CurrentAccessMode"/>
        </member>
        <member name="P:BGAPI2.Node.CurrentAccessMode">
            <summary>Gets a value that represents the current access to the Node object.
            This value is affected by the change of dependent Node objects. In such a case, the current access mode is different and limited (i.e. less accessible) for general access mode.
            The available access modes are defined in header file bgapi2_def.h. See definitions BGAPI2_NODEACCESS_xxx.
            Get the current accesmode of this Node object.</summary>
            <returns>string The current access to the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.IsReadable">
            <summary>This function delivers a flag that indicates whether the Node object is readable.
            This status is equivalent to the access mode 'RO' or 'RW'.</summary>
            <returns>bool: The flag that indicates whether the Node object is readable.</returns>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <see>See property Node.CurrentAccessMode.</see>
        </member>
        <member name="P:BGAPI2.Node.IsWriteable">
            <summary>This function delivers a flag that indicates whether the Node object is writeable.
            This status is equivalent to the access mode 'WO' or 'RW'.</summary>
            <returns>bool: The flag that indicates whether the Node object is writeable.</returns>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <see>See property Node.CurrentAccessMode.</see>
        </member>
        <member name="P:BGAPI2.Node.Alias">
            <summary>Gets the name of a Node object specified as the alias. An alias describes the same feature in a different manner.</summary>
            <returns>string: The name of the alias Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">No alias specified.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            /// <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Representation">
            <summary>Gets a value, which recommends the representation of the Node object on a GUI.
            The available display options are defined in the header file bgapi2_def.h. See the definitions BGAPI2_NODEREPRESENTATION_xxx.</summary>
            <returns>string: The recommended value for the representation of the Node object on a GUI.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">This exception is thrown when the interface type is not 'IFloat' and not 'IInteger'.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.HasUnit">
            <summary>Gets a flag that indicates whether the Node object has a physical unit.</summary>
            <returns>bool: The flag that indicates whether the Node object has a physical unit.</returns>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Unit">
            <summary>Gets the physical unit of the Node object. Only available for the interface type 'IFloat'.</summary>
            <returns>string: The physical unit of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">This exception is thrown when the interface type is not 'IFloat'.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.EnumNodeList">
            <summary>Gets This function delivers a NodeMap of available enumeration entries.
            Only valid for interface type 'IEnumeration'.</summary>
            <returns>NodeMap: The list of all available enumeration entries of the Node object.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="P:BGAPI2.Node.IsDone">
            <summary>Gets a flag that indicates whether the command of the Node object has been executed.
            Only valid for the interface type 'ICommand'.</summary>
            <returns>bool: The flag that indicates whether the command of the Node object has been executed.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.IsSelector">
            <summary>This function delivers a flag that indicates whether the Node object is a selector.
            A selector is a posibility to define feature dependencies. The current value of a selector node has an impact on the value of another Node object.
            Valid for the interface types 'IInteger' and 'IEnumeration'.</summary>
            <returns>bool: The flag that indicates whether the Node object is a selector.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.SelectedNodeList">
            <summary>This function delivers a list of features that depend on this selector Node.
            Valid for the interface types 'IInteger' and 'IEnumeration'.</summary>
            <returns>NodeMap: The list of all features that depend on this selector Node.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="P:BGAPI2.Node.Value">
             <summary>Gets or Sets the value of the Node object.
             Valid for the interface types 'IFloat', 'IInteger', 'IEnumeration', IString' and 'IBoolean'.</summary>
             <returns>SmartValue: The Value of the Node. The Type is correponding with the Interface.</returns>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed Type is not supported. Supported types are 'long', 'double', 'bool' and 'string'.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="P:BGAPI2.Node.Min">
            <summary>Gets the minimal allowed value of the Node object. Only valid for the interface type 'IInteger' and 'IFloat'.</summary>
            <returns>SmartValue: The minimum allowed value. The Type of the minimum corresponded with the Interface.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed Type is not supported. Supported types are 'long' and 'double'.</exception>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
            <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Max">
            <summary>Gets the maximal allowed value of the Node object. Only valid for the interface type 'IInteger' and 'IFloat'.</summary>
            <returns>SmartValue: The maximum allowed value. The Type of the maximum corresponded with the Interface.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed Type is not supported. Supported types are 'long' and 'double'.</exception>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
            <remarks>This Property is read only.</remarks>
            <see cref="P:BGAPI2.Node.Interface"/>
        </member>
        <member name="P:BGAPI2.Node.HasInc">
            <summary>Gets a flag that indicates whether the Node object has an increment.</summary>
            <returns>bool: The flag that indicates whether the Node object has an increment.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">This exception is thrown when the interface type is not 'IFloat' or 'IInteger'.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Inc">
            <summary>Gets the allowed step size for the value of the Node object. Only valid for the interface type 'IInteger' and 'IFloat'.</summary>
            <returns>SmartValue: The allowed step size for the value. The Type corresponded with the Interface.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException"> The Node object has no (valid) increment value.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed Type is not supported. Supported types are 'long' and 'double'.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.EnumerationValue">
             <summary>Gets or Sets the value of the Node object.
             Only valid for the interface type 'IEnumeration'</summary>
             <returns>SmartValue: The Enumeration Value of the Node. The Type is correponding with the Interface.</returns>
             <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
             <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
             <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
             <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
             <see cref="P:BGAPI2.Node.Interface"/>
            <remarks>Use the Interface prpoerty to find out the type of the value</remarks>
        </member>
        <member name="P:BGAPI2.Node.Length">
            <summary>Gets the length of the Node object. Only valid for the interface type 'IRegister'.</summary>
            <returns>SmartValue: The length for get and set.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException"> The Node object has no (valid) increment value.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Node.Address">
            <summary>Gets the address of the Node object. Only valid for the interface type 'IRegister'.</summary>
            <returns>SmartValue: The address for get and set.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The Node object has the wrong interface type.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException"> The Node object has no (valid) increment value.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.NotImplementedException">This feature is not implemented.</exception>
            <exception cref="T:BGAPI2.Exceptions.AccessDeniedException">Error when accessing this function. Possible reasons for this exception are the loss of connection to the device and the wrong access mode.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="M:BGAPI2.Node.SetBoolValue(System.Boolean)">
             <summary>
             Set the bool value for this Node object.
             </summary>
             <returns>
             NodeMap containing the posible Values.
             </returns>
             <exception cref="T:BGAPI2.Exceptions.IException">
             Only Exceptions based of BGAPI2.Exceptions.IException
             Use IException.GetErrorDescription or check trace output for more detailed error information.
            </exception>
        </member>
        <member name="T:BGAPI2.EventFeatureChanged">
            <summary>
            This class represents an event that will be generated if a feature changes its value.
            </summary>
        </member>
        <member name="T:BGAPI2.Exceptions.IException">
            <summary>
            Representation of an exception class. This class supports additionally information like function name and works a bas class for specific bgapi2 exception classes.
            </summary>
        </member>
        <member name="M:BGAPI2.Exceptions.IException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.IException.GetFunctionName">
            <summary>
            GetFunctionName returns the function, where the exception was thrown.
            </summary>
        </member>
        <member name="M:BGAPI2.Exceptions.IException.GetErrorDescription">
            <summary>GetErrorDecription return the reason, why the exception was thrown. This function returns the same string like ToString.</summary>
            <returns>string: The reason, why the exception was thrown</returns>
        </member>
        <member name="M:BGAPI2.Exceptions.IException.ToString">
            <summary>ToString will return the reason, why the exception was thrown.</summary>
            <returns>string: The error description as string.</returns>
        </member>
        <member name="T:BGAPI2.Exceptions.ErrorException">
            <summary>Specific exception class. General purpose exception.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.ErrorException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.NotInitializedException">
            <summary>Specific exception class. The requested object is not initialized/opened.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.NotInitializedException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.NotImplementedException">
            <summary>Specific exception class. The requested function/feature is not implemented.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.NotImplementedException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.ResourceInUseException">
            <summary>Specific exception class. The requested object is already used.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.ResourceInUseException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.AccessDeniedException">
            <summary>Specific exception class. The requested operation is not allowed/possible, e.g. lose the connection to the device.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.AccessDeniedException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.InvalidHandleException">
            <summary>Specific exception class. Given handle does not support the operation.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.InvalidHandleException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.LowLevelException">
            <summary>Specific exception class. Exception thrown by deeper software layers like GenTL producer.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.LowLevelException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.NoDataException">
            <summary>Specific exception class. An event contains no event data.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.NoDataException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.InvalidParameterException">
            <summary>Specific exception class. One of the parameter given was not valid or out of range.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.InvalidParameterException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.AbortException">
            <summary>Specific exception class. An operation has been aborted before it could be completed.</summary>
            <see cref="M:BGAPI2.Events.DataStreamEventControl.CancelGetFilledBuffer"/>
            <see cref="M:BGAPI2.Events.DataStreamEventControl.GetFilledBuffer(System.UInt64)"/>
        </member>
        <member name="M:BGAPI2.Exceptions.AbortException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.InvalidBufferException">
            <summary>Specific exception class. Invalid buffer is used. The used Buffer object is not valid.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.InvalidBufferException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.NotAvailableException">
            <summary>Specific exception class. The requested resource or information is not available at a given time in a current state.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.NotAvailableException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Exceptions.ObjectInvalidException">
            <summary>Specific exception class. The calling object is not valid.</summary>
        </member>
        <member name="M:BGAPI2.Exceptions.ObjectInvalidException.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:BGAPI2.Events.EventMode">
            <summary>Class which defines event modes, like event polling and using event handler</summary>
        </member>
        <member name="F:BGAPI2.Events.EventMode.UNREGISTERED">
            <summary>
            Unregister / Disable Event
            </summary>
        </member>
        <member name="F:BGAPI2.Events.EventMode.POLLING">
            <summary>
            Uses event polling.
            </summary>
        </member>
        <member name="F:BGAPI2.Events.EventMode.EVENT_HANDLER">
            <summary>
            Uses an event handler.
            </summary>
        </member>
        <member name="T:BGAPI2.Events.PnPType">
            <summary>Class which defines several pnp types, like device removed or devie added.</summary>
        </member>
        <member name="F:BGAPI2.Events.PnPType.DEVICEREMOVED">
            <summary>
            A device was removed.
            </summary>
        </member>
        <member name="F:BGAPI2.Events.PnPType.DEVICEADDED">
            <summary>
            A device was added.
            </summary>
        </member>
        <member name="T:BGAPI2.Events.PnPEvent">
            <summary>This class represents an event that can be generated by the connected device.</summary>
        </member>
        <member name="M:BGAPI2.Events.PnPEvent.#ctor">
            <summary>Constructor for creating an PnPEvent object.</summary>
        </member>
        <member name="M:BGAPI2.Events.PnPEvent.Finalize">
            <summary>Destructor for deleting an PnPEvent object.</summary>
        </member>
        <member name="P:BGAPI2.Events.PnPEvent.ID">
            <summary>Gets the ID of the PnPEvent.</summary>
            <returns>string: The ID of the pnp event in string format.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.NoDataException">The event includes no data.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Events.PnPEvent.SerialNumber">
            <summary>Gets the serial number of the device which is responsible for the pnp event.</summary>
            <returns>string: The serial number device.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The serial number was not included in the event.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Events.PnPEvent.PnPType">
            <summary>Gets the timestamp of the DeviceEvent.</summary>
            <returns>UInt64: The timestamp of the device event.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The timestamp was not included in the event.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="M:BGAPI2.Events.PnPEvent.Dispose(System.Boolean)">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BGAPI2.Events.PnPEventArgs">
            <summary>EventArgs class for PnP Events</summary>
        </member>
        <member name="M:BGAPI2.Events.PnPEventArgs.#ctor(System.String,System.String,BGAPI2.Events.PnPType)">
            <summary>Constructor for the PnPEventArgs</summary>
            <param name="id">string: unique Id of the PnP Event</param>
            <param name="serialnumber">string: Serial number of the device which has fired the event.</param>
            /// <param name="pnpType">PnPType: Type of PnP event..</param>
        </member>
        <member name="P:BGAPI2.Events.PnPEventArgs.ID">
            <summary>Gets the Id of the Event</summary>
            <returns>string: The unique ID of the Event</returns>
        </member>
        <member name="P:BGAPI2.Events.PnPEventArgs.SerialNumber">
            <summary>Gets the serial number of the device which is responsible for the pnp event.</summary>
            <returns>string: The serial number of the device.</returns>
        </member>
        <member name="P:BGAPI2.Events.PnPEventArgs.PnPType">
            <summary></summary>
            <returns>PnPType: The type of PnP event.</returns>
        </member>
        <member name="T:BGAPI2.Events.InterfaceEventControl">
            <summary>Specific EventControl class for Interface Events</summary>
        </member>
        <member name="M:BGAPI2.Events.InterfaceEventControl.RegisterPnPEvent(BGAPI2.Events.EventMode)">
            <summary>This function registers a PnPEvent at an Interface object to detect adding and removing of Device objects.</summary>
            <param name="eventMode">The event mode specifies the way as an incoming event is to be fetched.</param>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">Only the event mode polling is available. See enumeration EventMode.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Events.InterfaceEventControl.UnregisterPnPEvent">
            <summary>This function unregisters a PnPEvent at an Interface object.</summary>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Events.InterfaceEventControl.CancelGetPnPEvent">
            <summary>This function cancels the current waiting operation on the GetPnPEvent function.</summary>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.ErrorException">Unexpected Error. An internal pointer is not valid.</exception>
        </member>
        <member name="M:BGAPI2.Events.InterfaceEventControl.GetPnPEvent(BGAPI2.Events.PnPEvent@,System.UInt64)">
            <summary>This function fetches a PnPEvent from the Interface object.</summary>
            <param name="pnpEvent">A reference to a valid object of type PnPEvent. See function Events.PnPEvent.PnPEvent().</param>
            <param name="iTimeout">After this time, the function delivers latest.</param>
            <returns>bool: A flag that indicates whether a PnPEvent was fetched.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed PnPEvent object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="T:BGAPI2.Events.InterfaceEventControl.PnPEventHandler">
            <summary>Declare the delegate (if using non-generic pattern).</summary>
        </member>
        <member name="E:BGAPI2.Events.InterfaceEventControl.PnPEvent">
            <summary>Declare the event.</summary>
        </member>
        <member name="M:BGAPI2.Events.InterfaceEventControl.RegisterPnPEventHandler(BGAPI2.Events.InterfaceEventControl.PnPEventHandler)">
            <summary>
            Register callback function to receive pnp events
            </summary>
            <param name="pEventHandler"></param>
            <returns>void</returns>
        </member>
        <member name="M:BGAPI2.Events.InterfaceEventControl.RaisePnPEvent(BGAPI2.Events.PnPEvent@)">
            <summary>Wrap the event in a protected virtual method
            to enable derived classes to raise the event.</summary>
        </member>
        <member name="T:BGAPI2.Events.DeviceEvent">
            <summary>This class represents an event that can be generated by the connected device.</summary>
        </member>
        <member name="M:BGAPI2.Events.DeviceEvent.#ctor">
            <summary>Constructor for creating an DeviceEvent object.</summary>
        </member>
        <member name="M:BGAPI2.Events.DeviceEvent.Finalize">
            <summary>Destructor for deleting an DeviceEvent object.</summary>
        </member>
        <member name="P:BGAPI2.Events.DeviceEvent.ID">
            <summary>Gets the ID of the DeviceEvent, which was specified in the XML description of the event.</summary>
            <returns>string: The ID of the device event in string format.</returns>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.NoDataException">The event includes no data.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Events.DeviceEvent.Name">
            <summary>Gets the name of the DeviceEvent, which was specified in the XML description of the event.</summary>
            <returns>string: The name of the device event.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The name was not included in the event.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="P:BGAPI2.Events.DeviceEvent.Timestamp">
            <summary>Gets the timestamp of the DeviceEvent.</summary>
            <returns>UInt64: The timestamp of the device event.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotAvailableException">The timestamp was not included in the event.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <remarks>This Property is read only.</remarks>
        </member>
        <member name="M:BGAPI2.Events.DeviceEvent.Dispose(System.Boolean)">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BGAPI2.Events.DeviceEventArgs">
            <summary>
            Specific EventArgs class for DeviceEvents
            </summary>
        </member>
        <member name="P:BGAPI2.Events.DeviceEventArgs.ID">
            <summary>Gets or private Sets the Id of the DeviceEvent</summary>
        </member>
        <member name="P:BGAPI2.Events.DeviceEventArgs.Name">
            <summary>Gets or private Sets the name of the DeviceEvent</summary>
        </member>
        <member name="P:BGAPI2.Events.DeviceEventArgs.Timestamp">
            <summary>Gets or private Sets the timestamp of the DeviceEvent</summary>
        </member>
        <member name="T:BGAPI2.Events.DeviceEventControl">
            <summary>Specific EventControl class for DeviceEvents</summary>
        </member>
        <member name="M:BGAPI2.Events.DeviceEventControl.RegisterDeviceEvent(BGAPI2.Events.EventMode)">
            <summary>This function registers a DeviceEvent at an Device object to detect asynchronous events from the physical connected device.</summary>
            <returns>void</returns>
            <param name="eventMode">The event mode specifies the way as an incoming event is to be fetched.</param>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">Only the event mode polling is available. See enumeration EventMode.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException::GetErrorDescription or check trace output for more detailed error information. </exception>
        </member>
        <member name="M:BGAPI2.Events.DeviceEventControl.UnregisterDeviceEvent">
            <summary>This function unregisters a DeviceEvent at an Device object.</summary>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Events.DeviceEventControl.CancelGetDeviceEvent">
            <summary>This function cancels the current waiting operation on the GetDeviceEvent function.</summary>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use IException.GetErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.ErrorException">Unexpected Error. An internal pointer is not valid.</exception>
        </member>
        <member name="M:BGAPI2.Events.DeviceEventControl.GetDeviceEvent(BGAPI2.Events.DeviceEvent@,System.UInt64)">
            <summary>This function fetches a DeviceEvent from the Device object.</summary>
            <param name="dEvent">A reference to a valid object of type DeviceEvent. See function Events.DeviceEvent.DeviceEvent().</param>
            <param name="iTimeout">After this time, the function delivers latest.</param>
            <returns>void</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.InvalidParameterException">The passed DeviceEvent object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="T:BGAPI2.Events.DeviceEventControl.DeviceEventHandler">
            <summary>Declare the delegate (if using non-generic pattern).</summary>
        </member>
        <member name="E:BGAPI2.Events.DeviceEventControl.DeviceEvent">
            <summary>Declare the event.</summary>
        </member>
        <member name="M:BGAPI2.Events.DeviceEventControl.RegisterDeviceEventHandler(BGAPI2.Events.DeviceEventControl.DeviceEventHandler)">
            <summary>Register callback function.</summary>
        </member>
        <member name="M:BGAPI2.Events.DeviceEventControl.RaiseDeviceEvent(BGAPI2.Events.DeviceEvent@)">
            <summary>
            Wrap the event in a protected virtual method
            to enable derived classes to raise the event.
            -> calls the registered callback function
            </summary>
        </member>
        <member name="T:BGAPI2.Events.NewBufferEventArgs">
            <summary>Specific EventArgs class for NewBufferEvents</summary>
        </member>
        <member name="M:BGAPI2.Events.NewBufferEventArgs.#ctor(BGAPI2.Buffer)">
            <summary>Constructor for the NewBufferEventArgs class</summary>
            <param name="buffer">The reference of the Buffer with the new image</param>
        </member>
        <member name="P:BGAPI2.Events.NewBufferEventArgs.BufferObj">
            <summary>Gets or private Sets the Buffer in the NewBufferEventArgs</summary>
        </member>
        <member name="T:BGAPI2.Events.DataStreamEventControl">
            <summary>
            Specific EventControl class for DataStreamEvents
            </summary>
        </member>
        <member name="M:BGAPI2.Events.DataStreamEventControl.RaiseNewBufferEvent(BGAPI2.Buffer@)">
            <summary>
            Wrap the event in a protected virtual method
            to enable derived classes to raise the event.
            -> calls the registered callback function
            </summary>
        </member>
        <member name="M:BGAPI2.Events.DataStreamEventControl.RegisterNewBufferEvent(BGAPI2.Events.EventMode)">
            <summary>This function registers manually a NewBufferEvent at a DataStream object to detect the receiving of new images.
            The NewBuffer event is already registered internally, when opening the DataStream object.</summary>
            <param name="eventMode">The event mode specifies the way as an incoming event is to be fetched.</param>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Events.DataStreamEventControl.UnregisterNewBufferEvent">
            <summary>This function unregisters manually a NewBufferEvent at a DataStream object.
            The NewBuffer event is already unregistered internally, when closing the DataStream object.</summary>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
        </member>
        <member name="M:BGAPI2.Events.DataStreamEventControl.GetFilledBuffer(System.UInt64)">
            <summary>This function fetches a new image from the DataStream object and removes it from the output buffer queue.
            If the output buffer queue is empty after the timeout, the function delivers NULL. </summary>
            <param name="iTimeout">After this time, the function delivers latest.</param>
            <returns>Buffer: The buffer object which includes the new image or NULL in case of timeout.</returns>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
            <exception cref="T:BGAPI2.Exceptions.LowLevelException">GenTL Producer error. Use ErrorDescription or check trace output for more detailed error information.</exception>
            <exception cref="T:BGAPI2.Exceptions.AbortException">The waiting operation of this function was canceled. See function CancelGetFilledBuffer.</exception>
        </member>
        <member name="M:BGAPI2.Events.DataStreamEventControl.CancelGetFilledBuffer">
            <summary>This function cancels the current waiting operation on the GetFilledBuffer function.</summary>
            <exception cref="T:BGAPI2.Exceptions.NotInitializedException">The BGAPI object is not open.</exception>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="T:BGAPI2.Events.DataStreamEventControl.NewBufferEventHandler">
            <summary>Declare the delegate (if using non-generic pattern).</summary>
        </member>
        <member name="E:BGAPI2.Events.DataStreamEventControl.NewBufferEvent">
            <summary>Declare the event.</summary>
        </member>
        <member name="M:BGAPI2.Events.DataStreamEventControl.RegisterNewBufferEventHandler(BGAPI2.Events.DataStreamEventControl.NewBufferEventHandler)">
            <summary>
            Register callback function to receive new buffer events
            </summary>
            <param name="pEventHandler"></param>
            <returns>void</returns>
        </member>
        <member name="M:BGAPI2.Events.DataStreamEventControl.RaiseNewBufferEvent">
            <summary>
            Wrap the event in a protected virtual method
            to enable derived classes to raise the event.
            </summary>
        </member>
        <member name="T:BGAPI2.Events.EventControl">
            <summary>
            Event class for to allow event handling.
            </summary>
        </member>
        <member name="P:BGAPI2.Events.EventControl.EventMode">
            <summary>Gets or Sets the current event mode setting. The event mode is controlled by the event register functions.</summary>
            <return>EventMode The current event mode.</return>
            <exception cref="T:BGAPI2.Exceptions.ObjectInvalidException">The calling object is not valid.</exception>
        </member>
        <member name="M:BGAPI2.Events.EventControl.isWorking">
            <summary>
            Returns true, if WorkerThread is still active
            </summary>
            <returns></returns>
        </member>
        <member name="T:BGAPI2.Imageheader">
            <summary>
            class Imageheader
            </summary>
        </member>
        <member name="F:BGAPI2.Imageheader.STARTPATTERN_V2">
            <summary>
            Start pattern of BGAPI image header V2
            </summary>
        </member>
        <member name="T:BGAPI2.FreeformatHeader2">
            <summary>
            class FreeformatHeader2
            </summary>
        </member>
        <member name="M:BGAPI2.FreeformatHeader2.#ctor(System.IntPtr)">
            <summary>
            FreeformatHeader2 constructor
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiStartPattern">
            <summary>
            00
            Start pattern of BGAPI Image Header V2
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiIdentifier">
            <summary>
            01
            hardware type id of camera
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiMaster0">
            <summary>
            02
            first master register
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiMaster1">
            <summary>
            03
            second master register
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiFormat0">
            <summary>
            04
            first format register
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiFormat1">
            <summary>
            05
            second master register
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiFormatConfig">
            <summary>
            06
            format configuration, e.g. binning, partial, ...
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiBitMode">
            <summary>
            07
            pixel resolution
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiExposureValue">
            <summary>
            08
            exposure value
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiExposureControl">
            <summary>
            09
            exposure control
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiGain">
            <summary>
            10
            analog gain
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiOffset">
            <summary>
            11
            analog offset
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiDigitalIO">
            <summary>
            12
            digital io state
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiFlashDelay">
            <summary>
            13
            flash delay
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiTrigger">
            <summary>
            14
            trigger mode settings
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiTriggerDelay">
            <summary>
            15
            trigger delay in us
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiTestpattern">
            <summary>
            16
            test pattern settings
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiPixelGainRed">
            <summary>
            17
            pixel gain red
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiPixelGainBlue">
            <summary>
            18
            pixel gain blue
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiPixelGainGreenRed">
            <summary>
            19
            pixel gain green red
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiPixelGainGreenBlue">
            <summary>
            20
            pixel gain green blue
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.usFrameStartPositionX">
            <summary>
            21_0
            start position x of current frame
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.usFrameStartPositionY">
            <summary>
            21_1
            start position y of current frame
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.usFrameExtensionX">
            <summary>
            22_0
            extension in x direction of current frame
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.usFrameExtensionY">
            <summary>
            22_1
            extension in y direction of current frame
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiLineCounter">
            <summary>
            23
            linecounter
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiSubFrameLength">
            <summary>
            24
            sub frame length
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiFrameCounter">
            <summary>
            25
            framecounter
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiUserDefined">
            <summary>
            26
            user defined special register
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiTemperature">
            <summary>
            27
            Temperature in C
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiSequencer">
            <summary>
            28
            sequencer configuration
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiDataFormat">
            <summary>
            29
            dataformat Rawbayer, RGB, YUV
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiTimeStamp">
            <summary>
            30
            timestamp for image capture
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiNotDefined">
            <summary>
            31-62
            Not defined
            </summary>
        </member>
        <member name="F:BGAPI2.FreeformatHeader2.uiStopPattern">
            <summary>
            63
            Stop pattern of BGAPI Image Header V2
            </summary>
        </member>
    </members>
</doc>
